#####IMPORTANT######
##SEE 'shelldemo' in 'demos' for usage of this module!


############################################
##Entry Code Variables
###READ THIS FOR SIZE OF INPUT
var size=0
#one less than size, for indexing
var itersize=0

var firstspace=@-1

var shell_entry_zeroit=0
var shell_entry_buff=0
var shell_entry_chbuff=0


########CONFIGURATION OF INPUT CODE#########

#controls wether the macros: `cmd_stop_yn` and `cmd_stop` should try to
#  return to SBTCVM DOS before exiting. (on by default)
var DOSEXIT=@1

#####set this to @1 to enable 'purging of the input buffer'
var clearbuffer=@0

#####MAXIMUM INPUT SIZE IN CHARACTERS
var max=@80

############################################

#### basic parser macros ####

var fs_flg=0
var cmdflg=0
var validflg=0
def cmd_get {val @0 / set %mod%validflg / set %mod%cmdflg / gsub %mod%getentry / newline}

def cmd {tabstrc %mod%buffer,@0,@0,%0% / set %mod%cmdflg / if %mod%cmdflg,@1 gsub %1% / if %mod%cmdflg,@1 =%mod%validflg @1}

def cmd_stop {tabstrc %mod%buffer,@0,@0,%0% / set %mod%cmdflg / if %mod%cmdflg,@1 goto %mod%exitcode}

def cmd_stop_YN {tabstrc %mod%buffer,@0,@0,%0% / set %mod%cmdflg / if %mod%cmdflg,@1 gsub %mod%stopYN / if %mod%cmdflg,@1 =%mod%validflg @1}

def cmd_else {ifnot %mod%validflg,@1 gsub %0%}

############################################

var skb=0

label stopYN
	prline QUIT? [Y/N]
	label stopYN_loop
		keyprompt
		set skb
		if skb,:N return
		if skb,:n return
		if skb,:Y goto exitcode
		if skb,:y goto exitcode
	goto stopYN_loop

label exitcode
	if DOSEXIT,@1 begin
		vdi rstld 2 command.state.tri
		prline DOS NOT FOUND.
	end
	stop


#entry buffer
#Table is purposely 5 entries longer than max size.
table buffer,85,1
tpad 85


label getentry
	val 0
	set size
	set fs_flg
	val @-1
	set firstspace
	label getentry_loop
		keyprompt
		set shell_entry_chbuff
		if size,@0 goto shell_entry_skipnewline
		if shell_entry_chbuff,:\n gsub getentry_tobuff
		if shell_entry_chbuff,:\n return
		
		label shell_entry_skipnewline
		if shell_entry_chbuff,:\n goto getentry_loop
		
		if shell_entry_chbuff,:\x gsub getentry_backone
		if shell_entry_chbuff,:\x goto getentry_loop
		
		
		if size,max goto getentry_loop
		chardump shell_entry_chbuff
		add size,@1
		set size
		
		get shell_entry_chbuff
		push
	goto getentry_loop


label getentry_backone
	if size,@0 return
	chardump :\x
	pop
	sub size,@1
	set size
return


label getentry_tobuff
	stackrev
	sub size,@1
	set itersize
	add size,@1
	set shell_entry_zeroit
	set firstspace
	uiter getentry_tobuff_iter,getentry_tobuff_loop,@0,itersize
	uiter getentry_pad_iter,getentry_pad,size,shell_entry_zeroit
	if clearbuffer,@0 return
	uiter getentry_pad_iter,getentry_pad,shell_entry_zeroit,max
	return


label getentry_tobuff_loop
	pop
	set shell_entry_buff
	ifnot fs_flg,@1 begin
		if shell_entry_buff,:\s begin
			get getentry_tobuff_iter
			asm adddata1;10x1
			set firstspace
			val @1
			set fs_flg
		end
	end
	#dumpd firstspace
	#newline
	#chardump shell_entry_buff
	#newline 
	tabw buffer,getentry_tobuff_iter,@0,shell_entry_buff
return

label getentry_pad
	
	tabw buffer,getentry_pad_iter,@0,@0
	
	return
