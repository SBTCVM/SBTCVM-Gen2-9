#SSTNPL COMPILER v0.4.0
#header
head-rname=binrle
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "vmsystem/r_standard_lib/binrle.stnp
null;0;offset
null;0;posx
null;0;posy
null;+++++++++;on
null;---------;off
null;10x1;pixx
null;10x1;pixy
null;0;RL_pointer
null;0;iwide
null;0;draw_pixx
null;0;draw_pixy
null;0;temp_raw_width
null;0;px
null;0;py
null;0;px_rel
null;0;color_bool
null;0;length_buff
null;0;length_temp
null;0;length_final
null;10x1;banksel
null;10x1;data
null;0;breakRUNflg
null;10x1;@1
null;10x0;@0
null;10x-1;@-1
#label
zerosize;;decode--label
#get(1) (may be used with set, or asm code)
dataread1;>posx
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px
#get(1) (may be used with set, or asm code)
dataread1;>posy
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>py
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px_rel
#plotter y pos 1
dataread1;>posy
iowrite1;>plot.y1
#plotter x pos 1
dataread1;>posx
iowrite1;>plot.x1
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>data
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>banksel
#add (2op math)
dataread1;>pixx
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>draw_pixx
#add (2op math)
dataread1;>pixy
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>draw_pixy
#plotter width
dataread1;>draw_pixx
iowrite1;>plot.width
#plotter height
dataread1;>draw_pixy
iowrite1;>plot.height
#copy variables 
dataread1;>offset
datawrite1;>RL_pointer
#get(1) (may be used with set, or asm code)
dataread1;>RL_pointer
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #63-0
datawrite1;>RL_GET_WIDE#SSTNPL Source Line: '63-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #64-0
datawrite1;>RL_GET_STARTCOL#SSTNPL Source Line: '64-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #65-0
instread1;;RL_GET_WIDE#SSTNPL Source Line: '65-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>iwide
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #68-0
dataread1;;RL_GET_STARTCOL#SSTNPL Source Line: '68-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>color_bool
#conditional set
dataread1;>color_bool
dataread2;>@0
gotoif;>goto--branch-70-0
goto;>goto--jumper-70-0
dataread1;>@-1;goto--branch-70-0
datawrite1;>color_bool
zerosize;;goto--jumper-70-0
#plotter draw line
dataread1;>off
iowrite1;>plot.color
#conditional flow control begin
dataread1;>color_bool
dataread2;>@-1
gotoif;>goto--jumper-72-0
goto;>goto--branch-72-0
goto;>flow--con-x-1;goto--branch-72-0

zerosize;;goto--jumper-72-0
zerosize;;flow--con-x-1--start
#plotter draw line
dataread1;>on
iowrite1;>plot.color
zerosize;;flow--con-x-1
#add (2op math)
dataread1;>RL_pointer
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>RL_pointer
#conditional flow control begin
null;;flowloop--con-x-2--start
dataread1;>data
dataread2;>@0
gotoif;>goto--branch-78-0
goto;>goto--jumper-78-0
goto;>flowloop--con-x-2;goto--branch-78-0
zerosize;;goto--jumper-78-0
#conditional flow control begin
dataread1;>banksel
dataread2;>@1
gotoif;>goto--jumper-81-0
goto;>goto--branch-81-0
goto;>flow--con-x-3;goto--branch-81-0

zerosize;;goto--jumper-81-0
zerosize;;flow--con-x-3--start
#get(1) (may be used with set, or asm code)
dataread1;>RL_pointer
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #83-0
datawrite1;>RL_GET_INST#SSTNPL Source Line: '83-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #84-0
instread1;;RL_GET_INST#SSTNPL Source Line: '84-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>data
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_buff
zerosize;;flow--con-x-3
#conditional flow control begin
dataread1;>banksel
dataread2;>@-1
gotoif;>goto--jumper-88-0
goto;>goto--branch-88-0
goto;>flow--con-x-4;goto--branch-88-0

zerosize;;goto--jumper-88-0
zerosize;;flow--con-x-4--start
#get(1) (may be used with set, or asm code)
dataread1;>RL_pointer
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #90-0
datawrite1;>RL_GET_DATA#SSTNPL Source Line: '90-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #91-0
dataread1;;RL_GET_DATA#SSTNPL Source Line: '91-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>data
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_buff
#get(1) (may be used with set, or asm code)
dataread1;>RL_pointer
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #95-0
adddata1;10x1#SSTNPL Source Line: '95-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>RL_pointer
zerosize;;flow--con-x-4
#Get signwise/tritwise inversion of var
dataread1;>banksel
invert1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>banksel
#conditional flow control break
dataread1;>data
dataread2;>@0
gotoif;>goto--branch-105-0
goto;>goto--jumper-105-0
goto;>flowloop--con-x-2;goto--branch-105-0

zerosize;;goto--jumper-105-0
#conditional flow control begin
dataread1;>data
dataread2;>@1
gotoifless;>goto--branch-106-0
goto;>goto--jumper-106-0
goto;>flow--con-x-5;goto--branch-106-0

zerosize;;goto--jumper-106-0
zerosize;;flow--con-x-5--start
#Get signwise/tritwise inversion of var
dataread1;>color_bool
invert1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>color_bool
#plotter draw line
dataread1;>off
iowrite1;>plot.color
#conditional flow control begin
dataread1;>color_bool
dataread2;>@-1
gotoif;>goto--jumper-111-0
goto;>goto--branch-111-0
goto;>flow--con-x-6;goto--branch-111-0

zerosize;;goto--jumper-111-0
zerosize;;flow--con-x-6--start
#plotter draw line
dataread1;>on
iowrite1;>plot.color
zerosize;;flow--con-x-6
zerosize;;flow--con-x-5
#conditional flow control begin
dataread1;>data
dataread2;>@1
gotoifless;>goto--jumper-115-0
goto;>goto--branch-115-0
goto;>flow--con-x-7;goto--branch-115-0

zerosize;;goto--jumper-115-0
zerosize;;flow--con-x-7--start
#Get abs of var
dataread1;>data
abs1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>data
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_buff
zerosize;;flow--con-x-7
#conditional flow control begin
null;;flowloop--con-x-8--start
dataread1;>length_buff
dataread2;>@0
gotoif;>goto--branch-122-0
goto;>goto--jumper-122-0
goto;>flowloop--con-x-8;goto--branch-122-0
zerosize;;goto--jumper-122-0
#plotter x pos 1
dataread1;>px
iowrite1;>plot.x1
#plotter y pos 1
dataread1;>py
iowrite1;>plot.y1
#get(1) (may be used with set, or asm code)
dataread1;>px_rel
#get2 (may be used with set2, and asm code.)
dataread2;>length_buff
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #131-0
add#SSTNPL Source Line: '131-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_temp
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_final
#conditional flow control begin
dataread1;>length_temp
dataread2;>iwide
gotoifmore;>goto--jumper-135-0
goto;>goto--branch-135-0
goto;>flow--con-x-9;goto--branch-135-0

zerosize;;goto--jumper-135-0
zerosize;;flow--con-x-9--start
#get(1) (may be used with set, or asm code)
dataread1;>length_temp
#get2 (may be used with set2, and asm code.)
dataread2;>iwide
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #139-0
sub2#SSTNPL Source Line: '139-0' 
#set2 (used for asm, or get2)
datawrite2;>length_final
#get(1) (may be used with set, or asm code)
dataread1;>length_buff
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #142-0
sub#SSTNPL Source Line: '142-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_buff
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>breakRUNflg
zerosize;;flow--con-x-9
#add (2op math)
dataread1;>px_rel
dataread2;>length_buff
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px_rel
#get(1) (may be used with set, or asm code)
dataread1;>length_buff
#get2 (may be used with set2, and asm code.)
dataread2;>pixx
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #155-0
mul#SSTNPL Source Line: '155-0' 
#get2 (may be used with set2, and asm code.)
dataread2;>px
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #157-0
add#SSTNPL Source Line: '157-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px
#conditional flow control begin
dataread1;>breakRUNflg
dataread2;>@1
gotoif;>goto--jumper-161-0
goto;>goto--branch-161-0
goto;>flow--con-x-10;goto--branch-161-0

zerosize;;goto--jumper-161-0
zerosize;;flow--con-x-10--start
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>breakRUNflg
#get(1) (may be used with set, or asm code)
dataread1;>posx
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px
#get(1) (may be used with set, or asm code)
dataread1;>@0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px_rel
#add (2op math)
dataread1;>py
dataread2;>pixy
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>py
zerosize;;flow--con-x-10
#get(1) (may be used with set, or asm code)
dataread1;>length_buff
#get2 (may be used with set2, and asm code.)
dataread2;>pixx
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #174-0
mul#SSTNPL Source Line: '174-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #175-0
adddata1;10x1#SSTNPL Source Line: '175-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_buff
#plotter width
dataread1;>length_buff
iowrite1;>plot.width
#plotter draw rect
iowrite1;>plot.rect
#get(1) (may be used with set, or asm code)
dataread1;>length_final
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>length_buff
goto;>flowloop--con-x-8--start
zerosize;;flowloop--con-x-8
#conditional flow control begin
dataread1;>px_rel
dataread2;>iwide
gotoifless;>goto--branch-183-0
goto;>goto--jumper-183-0
goto;>flow--con-x-11;goto--branch-183-0

zerosize;;goto--jumper-183-0
zerosize;;flow--con-x-11--start
#get(1) (may be used with set, or asm code)
dataread1;>posx
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px
#get(1) (may be used with set, or asm code)
dataread1;>@0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>px_rel
#add (2op math)
dataread1;>py
dataread2;>pixy
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>py
zerosize;;flow--con-x-11
goto;>flowloop--con-x-2--start
zerosize;;flowloop--con-x-2
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
