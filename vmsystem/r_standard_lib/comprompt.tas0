#SSTNPL COMPILER v0.4.0
#header
head-rname=comprompt
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "vmsystem/r_standard_lib/comprompt.stnp
null;0;size
null;0;itersize
null;0;shell_entry_zeroit
null;0;shell_entry_buff
null;0;shell_entry_chbuff
null;10x1;DOSEXIT
null;10x0;clearbuffer
null;10x80;max
null;0;cmdflg
null;0;validflg
null;0;skb
null;:N;:N
null;:n;:n
null;:Y;:Y
null;:y;:y
null;10x1;@1
null;10x0;@0
null;:\n;:\n
null;:\x;:\x
null;10x0;getentry_tobuff_iter
null;10x0;getentry_pad_iter
#label
zerosize;;stopYN--label
#prline
fopwri1;:Q
fopwri1;:U
fopwri1;:I
fopwri1;:T
fopwri1;:?
fopwri1;:\s
fopwri1;:[
fopwri1;:Y
fopwri1;:/
fopwri1;:N
fopwri1;:]
fopwri1;:\n
#label
zerosize;;stopYN_loop--label
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-53-0
gotoif;>keyprompt--loop-53-0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>skb
#conditional return
dataread1;>skb
dataread2;>:N
gotoif;>goto--branch-55-0
goto;>goto--jumper-55-0
s1pop1;;goto--branch-55-0
gotoreg1
zerosize;;goto--jumper-55-0
#conditional return
dataread1;>skb
dataread2;>:n
gotoif;>goto--branch-56-0
goto;>goto--jumper-56-0
s1pop1;;goto--branch-56-0
gotoreg1
zerosize;;goto--jumper-56-0
#conditional goto
dataread1;>skb
dataread2;>:Y
gotoif;>goto--branch-57-0
goto;>goto--jumper-57-0
setreg1;>goto--jumper-57-0;goto--branch-57-0
goto;>exitcode--label
zerosize;;goto--jumper-57-0
#conditional goto
dataread1;>skb
dataread2;>:y
gotoif;>goto--branch-58-0
goto;>goto--jumper-58-0
setreg1;>goto--jumper-58-0;goto--branch-58-0
goto;>exitcode--label
zerosize;;goto--jumper-58-0
#goto 
goto;>stopYN_loop--label
#label
zerosize;;exitcode--label
#conditional flow control begin
dataread1;>DOSEXIT
dataread2;>@1
gotoif;>goto--jumper-62-0
goto;>goto--branch-62-0
goto;>flow--con-x-1;goto--branch-62-0

zerosize;;goto--jumper-62-0
zerosize;;flow--con-x-1--start
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#prline
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:N
fopwri1;:O
fopwri1;:T
fopwri1;:\s
fopwri1;:F
fopwri1;:O
fopwri1;:U
fopwri1;:N
fopwri1;:D
fopwri1;:.
fopwri1;:\n
zerosize;;flow--con-x-1
#stop (shutdown vm)
stop
#table width=85, height=1
zerosize;;buffer--table
#tpad
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
#label
zerosize;;getentry--label
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>size
#label
zerosize;;getentry_loop--label
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-79-0
gotoif;>keyprompt--loop-79-0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_chbuff
#conditional goto
dataread1;>size
dataread2;>@0
gotoif;>goto--branch-81-0
goto;>goto--jumper-81-0
setreg1;>goto--jumper-81-0;goto--branch-81-0
goto;>shell_entry_skipnewline--label
zerosize;;goto--jumper-81-0
#conditional subroutine goto
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-82-0
goto;>goto--jumper-82-0
setreg1;>goto--jumper-82-0;goto--branch-82-0
s1push1
goto;>getentry_tobuff--label
zerosize;;goto--jumper-82-0
#conditional return
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-83-0
goto;>goto--jumper-83-0
s1pop1;;goto--branch-83-0
gotoreg1
zerosize;;goto--jumper-83-0
#label
zerosize;;shell_entry_skipnewline--label
#conditional goto
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-86-0
goto;>goto--jumper-86-0
setreg1;>goto--jumper-86-0;goto--branch-86-0
goto;>getentry_loop--label
zerosize;;goto--jumper-86-0
#conditional subroutine goto
dataread1;>shell_entry_chbuff
dataread2;>:\x
gotoif;>goto--branch-88-0
goto;>goto--jumper-88-0
setreg1;>goto--jumper-88-0;goto--branch-88-0
s1push1
goto;>getentry_backone--label
zerosize;;goto--jumper-88-0
#conditional goto
dataread1;>shell_entry_chbuff
dataread2;>:\x
gotoif;>goto--branch-89-0
goto;>goto--jumper-89-0
setreg1;>goto--jumper-89-0;goto--branch-89-0
goto;>getentry_loop--label
zerosize;;goto--jumper-89-0
#conditional goto
dataread1;>size
dataread2;>max
gotoif;>goto--branch-92-0
goto;>goto--jumper-92-0
setreg1;>goto--jumper-92-0;goto--branch-92-0
goto;>getentry_loop--label
zerosize;;goto--jumper-92-0
#Dump (character)
dataread1;>shell_entry_chbuff
iowrite1;>io.ttywr
#add (2op math)
dataread1;>size
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>size
#get(1) (may be used with set, or asm code)
dataread1;>shell_entry_chbuff
#stack push (uses stack 2)
s2push1
#goto 
goto;>getentry_loop--label
#label
zerosize;;getentry_backone--label
#conditional return
dataread1;>size
dataread2;>@0
gotoif;>goto--branch-103-0
goto;>goto--jumper-103-0
s1pop1;;goto--branch-103-0
gotoreg1
zerosize;;goto--jumper-103-0
#Dump (character)
dataread1;>:\x
iowrite1;>io.ttywr
#stack pop (uses stack 2)
s2pop1
#subtract (2op math)
dataread1;>size
dataread2;>@1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>size
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;getentry_tobuff--label
#stack reverse (uses stack 2)
s2reverse
#subtract (2op math)
dataread1;>size
dataread2;>@1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>itersize
#add (2op math)
dataread1;>size
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_zeroit
#Upward range iterator
dataread1;>@0
datawrite1;>getentry_tobuff_iter
setreg1;>uiter-retpos-117-0;uiter-loopback-117-0
s1push1
goto;>getentry_tobuff_loop--label
dataread1;>getentry_tobuff_iter;uiter-retpos-117-0
setreg2;10x1
add
datawrite1;>getentry_tobuff_iter
dataread2;>itersize
gotoifless;>uiter-loopback-117-0
gotoif;>uiter-loopback-117-0

#Upward range iterator
dataread1;>size
datawrite1;>getentry_pad_iter
setreg1;>uiter-retpos-118-0;uiter-loopback-118-0
s1push1
goto;>getentry_pad--label
dataread1;>getentry_pad_iter;uiter-retpos-118-0
setreg2;10x1
add
datawrite1;>getentry_pad_iter
dataread2;>shell_entry_zeroit
gotoifless;>uiter-loopback-118-0
gotoif;>uiter-loopback-118-0

#conditional return
dataread1;>clearbuffer
dataread2;>@0
gotoif;>goto--branch-119-0
goto;>goto--jumper-119-0
s1pop1;;goto--branch-119-0
gotoreg1
zerosize;;goto--jumper-119-0
#Upward range iterator
dataread1;>shell_entry_zeroit
datawrite1;>getentry_pad_iter
setreg1;>uiter-retpos-120-0;uiter-loopback-120-0
s1push1
goto;>getentry_pad--label
dataread1;>getentry_pad_iter;uiter-retpos-120-0
setreg2;10x1
add
datawrite1;>getentry_pad_iter
dataread2;>max
gotoifless;>uiter-loopback-120-0
gotoif;>uiter-loopback-120-0

#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;getentry_tobuff_loop--label
#stack pop (uses stack 2)
s2pop1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_buff
#SSTNPL table write instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>getentry_tobuff_iter
add
adddata1;>buffer--table
datawrite1;>tabw--adrbuff--127-0
dataread1;>shell_entry_buff
datawrite1;;tabw--adrbuff--127-0
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;getentry_pad--label
#SSTNPL table write instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>getentry_pad_iter
add
adddata1;>buffer--table
datawrite1;>tabw--adrbuff--132-0
dataread1;>@0
datawrite1;;tabw--adrbuff--132-0
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
