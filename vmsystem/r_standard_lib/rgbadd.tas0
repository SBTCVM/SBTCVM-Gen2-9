#SSTNPL COMPILER v0.4.0
#header
head-rname=rgbadd
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "vmsystem/r_standard_lib/rgbadd.stnp
null;0;r
null;0;g
null;0;b
null;0;r_add
null;0;g_add
null;0;b_add
null;0;rollover_r
null;0;rollover_g
null;0;rollover_b
null;0;r_half
null;0;g_half
null;0;b_half
null;0;intern_r
null;0;intern_c
null;10x1;@1
null;10x2;@2
null;10x13;@13
null;10x27;@27
null;10x-13;@-13
#label
zerosize;;color_add--label
#conditional flow control begin
dataread1;>r_half
dataread2;>@1
gotoif;>goto--jumper-39-1
goto;>goto--branch-39-1
goto;>flow--con-x-1;goto--branch-39-1

zerosize;;goto--jumper-39-1
#divide (2op math)
dataread1;>r
dataread2;>@2
div
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>r
#divide (2op math)
dataread1;>r_add
dataread2;>@2
div
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>r_add
zerosize;;flow--con-x-1
#conditional flow control begin
dataread1;>g_half
dataread2;>@1
gotoif;>goto--jumper-40-1
goto;>goto--branch-40-1
goto;>flow--con-x-2;goto--branch-40-1

zerosize;;goto--jumper-40-1
#divide (2op math)
dataread1;>g
dataread2;>@2
div
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>g
#divide (2op math)
dataread1;>g_add
dataread2;>@2
div
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>g_add
zerosize;;flow--con-x-2
#conditional flow control begin
dataread1;>b_half
dataread2;>@1
gotoif;>goto--jumper-41-1
goto;>goto--branch-41-1
goto;>flow--con-x-3;goto--branch-41-1

zerosize;;goto--jumper-41-1
#divide (2op math)
dataread1;>b
dataread2;>@2
div
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>b
#divide (2op math)
dataread1;>b_add
dataread2;>@2
div
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>b_add
zerosize;;flow--con-x-3
#add (2op math)
dataread1;>r
dataread2;>r_add
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>r
#add (2op math)
dataread1;>g
dataread2;>g_add
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>g
#add (2op math)
dataread1;>b
dataread2;>b_add
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>b
#get(1) (may be used with set, or asm code)
dataread1;>r
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_c
#get(1) (may be used with set, or asm code)
dataread1;>rollover_r
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_r
#goto (extra code stores away return address.)
setreg1;>goto--jumper-47-5
s1push1
goto;>value_limit--label
zerosize;;goto--jumper-47-5
#get(1) (may be used with set, or asm code)
dataread1;>intern_r
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>rollover_r
#get(1) (may be used with set, or asm code)
dataread1;>intern_c
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>r
#get(1) (may be used with set, or asm code)
dataread1;>g
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_c
#get(1) (may be used with set, or asm code)
dataread1;>rollover_g
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_r
#goto (extra code stores away return address.)
setreg1;>goto--jumper-48-5
s1push1
goto;>value_limit--label
zerosize;;goto--jumper-48-5
#get(1) (may be used with set, or asm code)
dataread1;>intern_r
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>rollover_g
#get(1) (may be used with set, or asm code)
dataread1;>intern_c
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>g
#get(1) (may be used with set, or asm code)
dataread1;>b
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_c
#get(1) (may be used with set, or asm code)
dataread1;>rollover_b
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_r
#goto (extra code stores away return address.)
setreg1;>goto--jumper-49-5
s1push1
goto;>value_limit--label
zerosize;;goto--jumper-49-5
#get(1) (may be used with set, or asm code)
dataread1;>intern_r
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>rollover_b
#get(1) (may be used with set, or asm code)
dataread1;>intern_c
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>b
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;value_limit--label
#conditional flow control begin
dataread1;>intern_r
dataread2;>@1
gotoif;>goto--jumper-55-0
goto;>goto--branch-55-0
goto;>flow--con-x-4;goto--branch-55-0

zerosize;;goto--jumper-55-0
#conditional flow control begin
dataread1;>intern_c
dataread2;>@13
gotoifmore;>goto--jumper-56-0
goto;>goto--branch-56-0
goto;>flow--con-x-5;goto--branch-56-0

zerosize;;goto--jumper-56-0
#conditional flow control begin
null;;flowloop--con-x-6--start
dataread1;>intern_c
dataread2;>@13
gotoifmore;>goto--jumper-57-0
goto;>goto--branch-57-0
goto;>flowloop--con-x-6;goto--branch-57-0
zerosize;;goto--jumper-57-0
#subtract (2op math)
dataread1;>intern_c
dataread2;>@27
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_c
goto;>flowloop--con-x-6--start
zerosize;;flowloop--con-x-6
#return from subroutine.
s1pop1
gotoreg1
zerosize;;flow--con-x-5
#conditional flow control begin
null;;flowloop--con-x-7--start
dataread1;>intern_c
dataread2;>@-13
gotoifless;>goto--jumper-64-0
goto;>goto--branch-64-0
goto;>flowloop--con-x-7;goto--branch-64-0
zerosize;;goto--jumper-64-0
#add (2op math)
dataread1;>intern_c
dataread2;>@27
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>intern_c
goto;>flowloop--con-x-7--start
zerosize;;flowloop--con-x-7
#return from subroutine.
s1pop1
gotoreg1
zerosize;;flow--con-x-4
#conditional set
dataread1;>intern_c
dataread2;>@13
gotoifmore;>goto--branch-71-0
goto;>goto--jumper-71-0
dataread1;>@13;goto--branch-71-0
datawrite1;>intern_c
zerosize;;goto--jumper-71-0
#conditional set
dataread1;>intern_c
dataread2;>@-13
gotoifless;>goto--branch-72-0
goto;>goto--jumper-72-0
dataread1;>@-13;goto--branch-72-0
datawrite1;>intern_c
zerosize;;goto--jumper-72-0
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
