SSTNPL: SBTCVM Simplified Ternary Numeric Programming Language

# basic syntax notes:

### Whitespace:
you may use spaces and/or tabs at the start of any line of code, at your leisure.
Such whitespace will be ignored automatically.



#### [nvalue] syntax for var, const, and val:####
Literal prefixes are also acceptable
So feel free to use them if its less confusing to you.

for decimal values prepend '10x' or '@' i.e. 
	var somevar=10x-15
	var somevar=10x54
	var somevar=@54
	const someconst=@2
	
for characters prepend ':' i.e.
	var somevar=:x
	const someconst=:x

for ternary values, no prefix is needed. you may use the '*' prefix though.:
	var somevar=+-0+0
	var somevar=pn0p0
	var somevar=*pn0p0
	const someconst=*pn0p0


Literals:
	
	Certain instructions allow use of Literals:
	
	Decimal
		add @20,@-4
	
	Ternary
		add *+-,*++
	
	Character:
		if :a,:a, goto somthing
	
	Constants:
		if somebool,$true goto somthing
	
		--Constants Note: non-builtin constants are imported from modules just like ints, labels, & tables, e.g.
			dumpd $m.myconstant
			include mymodule as m
		
		-- Builtin constants:
			$true   (1)
			$false  (0)

A note on literals: literals still use a word of memory,
	and just ease working with static values in some cases.

Note that constants only use a word of memory if they are actually used as a literal.



Command documentation:

--Constants
	const [constname]=[nvalue] : create a constant called [constname], with the value [nvalue].

--Tables:
	[see tables.txt]

--Iterators:
	[see iterate.txt]

--Double-Ended Hardware Buffers:
	[see hardware_buffers.txt]

--Variables:
	var [varname]=[nvalue]  : create a integer variable called [varname], with the value [nvalue].
	
	get1/get  : get value of a variable into register 1
	get2      : get value of a variable into register 2
	
	set1/set [varname]  : set variable using value of register 1.
	set2 [varname]      : set variable using value of register 2.
	
	val [nvalue] : set register 1 with value. use with set1/set.
	
	swap [var1],[var2] : swap the values of [var1] & [var2]
	copy [var1],[var2] : copy [var1] to [var2]


--Stack: 
		SSTNPL exposes stack 2 of SBTCVM Gen 2's CPU as a general use stack:
		Note: push2,peek2, and pop2 are available. they use register 2 instead
			of register 1. intended for assembly-heavy programs.
	push/push1: push item to stack. [use with 'get' or 'val']
		like:
			get [varname]
			push
		or:
			val @10
			push
	pop/pop1: get item from stack [use with 'set']
		like:
			pop
			set [varname]
	peek/peek1: 'peek' at top of stack, but don't remove it. [use with 'set']
		like:
			peek
			set [varname]
	stackrev: Reverse order of items in stack.


--Debugging:
	marker [name] : Print an assembly debugging marker at assemble time. (with sstnpl source line appended to name)

--System:
	stop : Shutdown SBTCVM (this is how you quit a program in SBTCVM, when its loaded via a trom image.
	waitcy [cycles] : wait for roughly the given number of cycles (numbers divisible by 6 are most accurate.)

--Math: 
	-----NOTE var1 and var2 can be Literals-----
	add [var1],[var2] : add 2 integer variables. use 'set' to store result.
	sub [var1],[var2] : subtract 2 integer variables. use 'set' to store result.
	mul [var1],[var2] : multiply 2 integer variables. use 'set' to store result.
	div [var1],[var2] : divide 2 integer variables. use 'set' to store result.
	
	divmod [var1],[var2] : modulo division. use set1 to store modulo, use set2 to store quotient.
		divmod @11,@2
		set1 modulo
		set2 quotient

--Logic and tritwise:
	invert [varname] : invert the sign of variable [varname], in-place. [DEPRECIATED]
	inv [varname]    : invert the sign of an integer variable or literal. use set to store the result.
	abs [varname]    : get the absolute value of an integer variable or literal. use set to store result.
	nabs [varname]   : get the INVERTED absolute value of an integer variable or literal. use set to store result.

--Gotos & conditionals:
	label [name] : create a label with the name [name], for use with gotos.
	goto [name]  : goto label [name]
	gsub [name]  : goto label [name], but store next block (line) of code as return address.
	return : return to most recent return address stored.
	
	-----NOTE FOR CONDITIONAL GOTOS: var1 var2 var3 and var5 can be Literals as well as variables.-----
	two argument conditionals:
		[condition] [var1],[var2] [mode] (label)
	three argument conditionals:
		[condition] [var1],[var2],[var3] [mode] (label)
	
	(a goto label (label) is only needed for goto & gsub modes, but for
	variable set mode (=[varname], it is replaced with an extra variable name
	(that can be a literal))
	
	--2-argument conditions:
		if         : true if [var1]=[var2]
		if not     : true if [var1]!=[var2] (var1 not equal to var2)
		ifmore     : true if [var1]>[var2]
		ifless     : true if [var1]<[var2]
		ifnotmore  : true if [var1]<=[var2]
		ifnotless  : true if [var1]>=[var2]
	--3-argument conditions:
		ifrange    : true if [var1]<=[var3]<=[var2]
		ifnotrange : true if [var1]<=[var3]<=[var2]
	
	--modes:
		goto : ordinary goto.
		gsub : store next block (line) of code as return address. (same as normal gsub command)
		return : just like normal return command. should omit label.
		stop : just like normal stop command. should omit label.
		chardump : a conditional character dump operation. using a [var5] in place of label. (var5 can be a literal)
		dumpd : a conditional decimal dump. using a [var5] in place of label. (var5 can be a literal)
		dumpt : a conditional ternary dump. using a [var5] in place of label. (var5 can be a literal)
		=[var4] : conditional variable copy: set [var4] using a [var5] in place of label. (var5 can be a literal)
	  
	--Examples:
		if var1,var2 goto somelabel
		if var1,var2 return
		if var1,@1 return
		if var1,var2 =var4 var5
		if var1,var2 =var4 @1
		if var1,var2 =var4 :a
		if var1,var2 chardump var5
		if var1,var2 chardump :c
		if var1,var2 dumpd var5
		if var1,var2 dumpd @1
		if var1,var2 dumpt var5
		if var1,var2 dumpt *+0-
	  

--TTY output:
	print [string]      : print specified raw text.
	prline [string]     : print specified raw text, but append a newline.
	newline             : print newline
	space               : print space
	dumpt [varname]     : Dump integer variable [varname], to TTY in ternary form. Can use Literals
	dumpd [varname]     : Dump integer variable [varname], to TTY in signed decimal form. Can use Literals
	chardump [varname]  : Dump a variable to the TTY as a character. Can use Literals
	textcolor [varname] : set text color (on frontends that support it) Can use Literals
	packcolor [varname] : set ternary packed art color (on frontends that support it) Can use Literals
	tpack [varname]     : Print ternary packed art segment. Can use Literals
	cpack [varname]     : Print 27 COLOR ternary packed art segment. Can use Literals
	mulpk [chunks]      : specify multiple raw 9-trit ternary values, semicolon divided, for output.
		mulpk +++++++++;++++++000
	linepk [chunks]     : same as mulpk, but appends a newline after the chunk sequence.
	cmulpk, clinepk     : Same as mulpk, and linepk respectively, but for use with 27 COLOR Ternary Packed Art.

--SBTGA:
	gamode [variable] : switch to the mode specified by the given variable.
		30: plotter, 0: standard TTY (default mode)

--SBTGA plotter:
	drawx1    [varname]: set plotter x1
	drawy1    [varname]: set plotter y1
	drawx2    [varname]: set plotter x2
	drawy2    [varname]: set plotter y2
	drawwdith  [varname]: set plotter width register
	drawheight  [varname]: set plotter height register
	drawcolor [varname]: set plotter color (9-trit RGB)
	drawline           : draw line from x1,y1, to x2,y2 using plotter color
	drawrect           : draw rect at x1,y1 using plotter width/height registers for size.
	drawfill  [varname]: fill plotter display with given (9-trit RGB) color
	drawflock [varname]: instruct plotter to stop parsing items for the
		current frame, rather than break at 30 items.

--VDI (DISK SYSTEM) see 'SBTVDI' directory in 'textdocs' for more details.
	vdi [string]     : send a command to VDI serial
	vdin [string]    : send a command to VDI serial (with no appended newline, for more complex command building)
	vdistat [varname]: get VDI serial status.
	vdimode [mode]   : set VDI serial mode/init vdi serial.

--Random
	rrange [start],[end] : Get a random number between [start] and [end] (including [start] and [end]. use set to store result. Can use Literals

--TTY input:
	getchar [var] : Gets a character from the TTY input buffer and puts it in [var] returns 0/null on empty buffer.
	keyprompt : Wait in a loop until a keystroke is detected, then continue. use set to store result.
	clearcharbuff : Clear TTY input buffer.
