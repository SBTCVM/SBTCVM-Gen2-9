#SSTNPL COMPILER v0.2.2
#header
head-rname=auto_main
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "demos/shelldemo/auto_main.stnp
null;0;shell_entry_size
null;0;shell_entry_itersize
null;10x80;shell_entry_max
null;0;shell_entry_buff
null;0;shell_entry_chbuff
null;0;cmdflg
null;0;validcom
null;0++---;*0++---
null;+++---;*+++---
null;10x0;@0
null;10x1;@1
null;+++--0;*+++--0
null;:\n;:\n
null;:\x;:\x
null;10x0;getentry_tobuff_iter
#prline
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:b
fopwri1;:a
fopwri1;:s
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:m
fopwri1;:u
fopwri1;:l
fopwri1;:t
fopwri1;:i
fopwri1;:-
fopwri1;:c
fopwri1;:h
fopwri1;:a
fopwri1;:r
fopwri1;:a
fopwri1;:c
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:-
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:m
fopwri1;:o
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:y
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\n
#label
null;;main--label
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#print
fopwri1;:>
#goto (extra code stores away return address.)
setreg1;>goto--jumper-36
s1push1
goto;>getentry--label
null;;goto--jumper-36
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validcom
#######tabstrc
#init
setreg1;10x80
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabstrc--adrbuff--49
null;;tabstrc--adrbuff--49
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--49
null;;tabstrc--outbuff--49
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_1
dataread1;;tabstrc--recurs-tabbuff--49_1
datawrite1;>tabstrc--recurs-tabbuff_read--49_1
dataread1;;tabstrc--recurs-tabbuff_read--49_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--49_1
goto;>tabstrc--recurs-checkno--49_1
null;;tabstrc--recurs-checkyes--49_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_2
dataread1;;tabstrc--recurs-tabbuff--49_2
datawrite1;>tabstrc--recurs-tabbuff_read--49_2
dataread1;;tabstrc--recurs-tabbuff_read--49_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--49_2
goto;>tabstrc--recurs-checkno--49_2
null;;tabstrc--recurs-checkyes--49_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_3
dataread1;;tabstrc--recurs-tabbuff--49_3
datawrite1;>tabstrc--recurs-tabbuff_read--49_3
dataread1;;tabstrc--recurs-tabbuff_read--49_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--49_3
goto;>tabstrc--recurs-checkno--49_3
null;;tabstrc--recurs-checkyes--49_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_4
dataread1;;tabstrc--recurs-tabbuff--49_4
datawrite1;>tabstrc--recurs-tabbuff_read--49_4
dataread1;;tabstrc--recurs-tabbuff_read--49_4

setreg2;:p


gotoif;>tabstrc--recurs-checkyes--49_4
goto;>tabstrc--recurs-checkno--49_4
null;;tabstrc--recurs-checkyes--49_4
##set flag########
setreg1;>tabstrc--outbuff--49
datawrite1;>tabstrc--recurs-flag--49_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--49_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--49
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-51
goto;>goto--jumper-51
dataread1;>@1;goto--branch-51
datawrite1;>validcom
null;;goto--jumper-51
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-52
goto;>goto--jumper-52
setreg1;>goto--jumper-52;goto--branch-52
s1push1
goto;>help--label
null;;goto--jumper-52
#######tabstrc
#init
setreg1;10x80
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabstrc--adrbuff--54
null;;tabstrc--adrbuff--54
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--54
null;;tabstrc--outbuff--54
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--54

datawrite1;>tabstrc--recurs-tabbuff--54_1
dataread1;;tabstrc--recurs-tabbuff--54_1
datawrite1;>tabstrc--recurs-tabbuff_read--54_1
dataread1;;tabstrc--recurs-tabbuff_read--54_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--54_1
goto;>tabstrc--recurs-checkno--54_1
null;;tabstrc--recurs-checkyes--54_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--54
setreg2;+
add
datawrite1;>tabstrc--adrbuff--54

setreg1;>tabstrc--adrbuff--54

datawrite1;>tabstrc--recurs-tabbuff--54_2
dataread1;;tabstrc--recurs-tabbuff--54_2
datawrite1;>tabstrc--recurs-tabbuff_read--54_2
dataread1;;tabstrc--recurs-tabbuff_read--54_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--54_2
goto;>tabstrc--recurs-checkno--54_2
null;;tabstrc--recurs-checkyes--54_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--54
setreg2;+
add
datawrite1;>tabstrc--adrbuff--54

setreg1;>tabstrc--adrbuff--54

datawrite1;>tabstrc--recurs-tabbuff--54_3
dataread1;;tabstrc--recurs-tabbuff--54_3
datawrite1;>tabstrc--recurs-tabbuff_read--54_3
dataread1;;tabstrc--recurs-tabbuff_read--54_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--54_3
goto;>tabstrc--recurs-checkno--54_3
null;;tabstrc--recurs-checkyes--54_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--54
setreg2;+
add
datawrite1;>tabstrc--adrbuff--54

setreg1;>tabstrc--adrbuff--54

datawrite1;>tabstrc--recurs-tabbuff--54_4
dataread1;;tabstrc--recurs-tabbuff--54_4
datawrite1;>tabstrc--recurs-tabbuff_read--54_4
dataread1;;tabstrc--recurs-tabbuff_read--54_4

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--54_4
goto;>tabstrc--recurs-checkno--54_4
null;;tabstrc--recurs-checkyes--54_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--54
setreg2;+
add
datawrite1;>tabstrc--adrbuff--54

setreg1;>tabstrc--adrbuff--54

datawrite1;>tabstrc--recurs-tabbuff--54_5
dataread1;;tabstrc--recurs-tabbuff--54_5
datawrite1;>tabstrc--recurs-tabbuff_read--54_5
dataread1;;tabstrc--recurs-tabbuff_read--54_5

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--54_5
goto;>tabstrc--recurs-checkno--54_5
null;;tabstrc--recurs-checkyes--54_5
##set flag########
setreg1;>tabstrc--outbuff--54
datawrite1;>tabstrc--recurs-flag--54_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--54_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--54_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--54_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--54_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--54_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--54_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--54
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-56
goto;>goto--jumper-56
dataread1;>@1;goto--branch-56
datawrite1;>validcom
null;;goto--jumper-56
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-57
goto;>goto--jumper-57
setreg1;>goto--jumper-57;goto--branch-57
s1push1
goto;>hello--label
null;;goto--jumper-57
#######tabstrc
#init
setreg1;10x80
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabstrc--adrbuff--59
null;;tabstrc--adrbuff--59
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--59
null;;tabstrc--outbuff--59
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--59

datawrite1;>tabstrc--recurs-tabbuff--59_1
dataread1;;tabstrc--recurs-tabbuff--59_1
datawrite1;>tabstrc--recurs-tabbuff_read--59_1
dataread1;;tabstrc--recurs-tabbuff_read--59_1

setreg2;:q


gotoif;>tabstrc--recurs-checkyes--59_1
goto;>tabstrc--recurs-checkno--59_1
null;;tabstrc--recurs-checkyes--59_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--59
setreg2;+
add
datawrite1;>tabstrc--adrbuff--59

setreg1;>tabstrc--adrbuff--59

datawrite1;>tabstrc--recurs-tabbuff--59_2
dataread1;;tabstrc--recurs-tabbuff--59_2
datawrite1;>tabstrc--recurs-tabbuff_read--59_2
dataread1;;tabstrc--recurs-tabbuff_read--59_2

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--59_2
goto;>tabstrc--recurs-checkno--59_2
null;;tabstrc--recurs-checkyes--59_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--59
setreg2;+
add
datawrite1;>tabstrc--adrbuff--59

setreg1;>tabstrc--adrbuff--59

datawrite1;>tabstrc--recurs-tabbuff--59_3
dataread1;;tabstrc--recurs-tabbuff--59_3
datawrite1;>tabstrc--recurs-tabbuff_read--59_3
dataread1;;tabstrc--recurs-tabbuff_read--59_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--59_3
goto;>tabstrc--recurs-checkno--59_3
null;;tabstrc--recurs-checkyes--59_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--59
setreg2;+
add
datawrite1;>tabstrc--adrbuff--59

setreg1;>tabstrc--adrbuff--59

datawrite1;>tabstrc--recurs-tabbuff--59_4
dataread1;;tabstrc--recurs-tabbuff--59_4
datawrite1;>tabstrc--recurs-tabbuff_read--59_4
dataread1;;tabstrc--recurs-tabbuff_read--59_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--59_4
goto;>tabstrc--recurs-checkno--59_4
null;;tabstrc--recurs-checkyes--59_4
##set flag########
setreg1;>tabstrc--outbuff--59
datawrite1;>tabstrc--recurs-flag--59_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--59_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--59_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--59_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--59_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--59_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--59
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-61
goto;>goto--jumper-61
dataread1;>@1;goto--branch-61
datawrite1;>validcom
null;;goto--jumper-61
#conditional stop
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-62
goto;>goto--jumper-62
stop;;goto--branch-62

null;;goto--jumper-62
#conditional subroutine goto
dataread1;>validcom
dataread2;>@0
gotoif;>goto--branch-64
goto;>goto--jumper-64
setreg1;>goto--jumper-64;goto--branch-64
s1push1
goto;>invalid--label
null;;goto--jumper-64
#goto 
goto;>main--label
#label
null;;invalid--label
#prline
fopwri1;:U
fopwri1;:n
fopwri1;:k
fopwri1;:n
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;hello--label
#prline
fopwri1;:A
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:g
fopwri1;:o
fopwri1;:o
fopwri1;:d
fopwri1;:\s
fopwri1;:d
fopwri1;:a
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:,
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:r
fopwri1;:.
fopwri1;:\s
fopwri1;::
fopwri1;:D
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;help--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:H
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;::
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;::
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:o
fopwri1;::
fopwri1;:\s
fopwri1;:p
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:g
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:m
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;::
fopwri1;:\s
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#table width=80, height=1
null;;shell_entry_buffer--table
#tpad
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
#label
null;;getentry--label
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_size
#label
null;;getentry_loop--label
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-103
gotoif;>keyprompt--loop-103
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_chbuff
#conditional goto
dataread1;>shell_entry_size
dataread2;>@0
gotoif;>goto--branch-105
goto;>goto--jumper-105
setreg1;>goto--jumper-105;goto--branch-105
goto;>shell_entry_skipnewline--label
null;;goto--jumper-105
#conditional subroutine goto
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-106
goto;>goto--jumper-106
setreg1;>goto--jumper-106;goto--branch-106
s1push1
goto;>getentry_tobuff--label
null;;goto--jumper-106
#conditional return
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-107
goto;>goto--jumper-107
s1pop1;;goto--branch-107
gotoreg1
null;;goto--jumper-107
#label
null;;shell_entry_skipnewline--label
#conditional goto
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-110
goto;>goto--jumper-110
setreg1;>goto--jumper-110;goto--branch-110
goto;>getentry_loop--label
null;;goto--jumper-110
#conditional subroutine goto
dataread1;>shell_entry_chbuff
dataread2;>:\x
gotoif;>goto--branch-112
goto;>goto--jumper-112
setreg1;>goto--jumper-112;goto--branch-112
s1push1
goto;>getentry_backone--label
null;;goto--jumper-112
#conditional goto
dataread1;>shell_entry_chbuff
dataread2;>:\x
gotoif;>goto--branch-113
goto;>goto--jumper-113
setreg1;>goto--jumper-113;goto--branch-113
goto;>getentry_loop--label
null;;goto--jumper-113
#conditional goto
dataread1;>shell_entry_size
dataread2;>shell_entry_max
gotoif;>goto--branch-116
goto;>goto--jumper-116
setreg1;>goto--jumper-116;goto--branch-116
goto;>getentry_loop--label
null;;goto--jumper-116
#Dump (character)
dataread1;>shell_entry_chbuff
iowrite1;>io.ttywr
#add (2op math)
dataread1;>shell_entry_size
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_size
#get(1) (may be used with set, or asm code)
dataread1;>shell_entry_chbuff
#stack push (uses stack 2)
s2push1
#goto 
goto;>getentry_loop--label
#label
null;;getentry_backone--label
#conditional return
dataread1;>shell_entry_size
dataread2;>@0
gotoif;>goto--branch-127
goto;>goto--jumper-127
s1pop1;;goto--branch-127
gotoreg1
null;;goto--jumper-127
#Dump (character)
dataread1;>:\x
iowrite1;>io.ttywr
#stack pop (uses stack 2)
s2pop1
#subtract (2op math)
dataread1;>shell_entry_size
dataread2;>@1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_size
#return from subroutine.
s1pop1
gotoreg1
#label
null;;getentry_tobuff--label
#stack reverse (uses stack 2)
s2reverse
#subtract (2op math)
dataread1;>shell_entry_size
dataread2;>@1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_itersize
#Upward range iterator
dataread1;>@0
datawrite1;>getentry_tobuff_iter
setreg1;>uiter-retpos-139;uiter-loopback-139
s1push1
goto;>getentry_tobuff_loop--label
dataread1;>getentry_tobuff_iter;uiter-retpos-139
setreg2;10x1
add
datawrite1;>getentry_tobuff_iter
dataread2;>shell_entry_itersize
gotoifless;>uiter-loopback-139
gotoif;>uiter-loopback-139

#return from subroutine.
s1pop1
gotoreg1
#label
null;;getentry_tobuff_loop--label
#stack pop (uses stack 2)
s2pop1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_buff
#SSTNPL table write instruction.
setreg1;10x80
dataread2;>@0
mul
dataread2;>getentry_tobuff_iter
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabw--adrbuff--145
dataread1;>shell_entry_buff
datawrite1;;tabw--adrbuff--145
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
