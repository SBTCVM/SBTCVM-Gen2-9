#SSTNPL COMPILER v0.4.0
#header
head-rname=auto_main
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "demos/shelldemo/auto_main.stnp
null;0;cmdflg
null;0;validcom
null;0++---;*0++---
null;+++---;*+++---
null;10x0;@0
null;10x1;@1
null;+++--0;*+++--0
#prline
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:b
fopwri1;:a
fopwri1;:s
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:m
fopwri1;:u
fopwri1;:l
fopwri1;:t
fopwri1;:i
fopwri1;:-
fopwri1;:c
fopwri1;:h
fopwri1;:a
fopwri1;:r
fopwri1;:a
fopwri1;:c
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:-
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:m
fopwri1;:o
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:y
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;10x70
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.max
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.clearbuffer
#label
zerosize;;main--label
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#print
fopwri1;:>
#goto (extra code stores away return address.)
setreg1;>goto--jumper-47-0
s1push1
goto;>cp.getentry--label
zerosize;;goto--jumper-47-0
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validcom
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>cp.buffer--table
datawrite1;>tabstrc--adrbuff--61-0
null;;tabstrc--adrbuff--61-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--61-0
null;;tabstrc--outbuff--61-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--61-0

datawrite1;>tabstrc--recurs-tabbuff--61-0_1
dataread1;;tabstrc--recurs-tabbuff--61-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--61-0_1
dataread1;;tabstrc--recurs-tabbuff_read--61-0_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--61-0_1
goto;>tabstrc--recurs-checkno--61-0_1
zerosize;;tabstrc--recurs-checkyes--61-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61-0

setreg1;>tabstrc--adrbuff--61-0

datawrite1;>tabstrc--recurs-tabbuff--61-0_2
dataread1;;tabstrc--recurs-tabbuff--61-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--61-0_2
dataread1;;tabstrc--recurs-tabbuff_read--61-0_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--61-0_2
goto;>tabstrc--recurs-checkno--61-0_2
zerosize;;tabstrc--recurs-checkyes--61-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61-0

setreg1;>tabstrc--adrbuff--61-0

datawrite1;>tabstrc--recurs-tabbuff--61-0_3
dataread1;;tabstrc--recurs-tabbuff--61-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--61-0_3
dataread1;;tabstrc--recurs-tabbuff_read--61-0_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--61-0_3
goto;>tabstrc--recurs-checkno--61-0_3
zerosize;;tabstrc--recurs-checkyes--61-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61-0

setreg1;>tabstrc--adrbuff--61-0

datawrite1;>tabstrc--recurs-tabbuff--61-0_4
dataread1;;tabstrc--recurs-tabbuff--61-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--61-0_4
dataread1;;tabstrc--recurs-tabbuff_read--61-0_4

setreg2;:p


gotoif;>tabstrc--recurs-checkyes--61-0_4
goto;>tabstrc--recurs-checkno--61-0_4
zerosize;;tabstrc--recurs-checkyes--61-0_4
##set flag########
setreg1;>tabstrc--outbuff--61-0
datawrite1;>tabstrc--recurs-flag--61-0_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--61-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--61-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--61-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--61-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--61-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--61-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-63-0
goto;>goto--jumper-63-0
dataread1;>@1;goto--branch-63-0
datawrite1;>validcom
zerosize;;goto--jumper-63-0
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-64-0
goto;>goto--jumper-64-0
setreg1;>goto--jumper-64-0;goto--branch-64-0
s1push1
goto;>help--label
zerosize;;goto--jumper-64-0
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>cp.buffer--table
datawrite1;>tabstrc--adrbuff--66-0
null;;tabstrc--adrbuff--66-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--66-0
null;;tabstrc--outbuff--66-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--66-0

datawrite1;>tabstrc--recurs-tabbuff--66-0_1
dataread1;;tabstrc--recurs-tabbuff--66-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--66-0_1
dataread1;;tabstrc--recurs-tabbuff_read--66-0_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--66-0_1
goto;>tabstrc--recurs-checkno--66-0_1
zerosize;;tabstrc--recurs-checkyes--66-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--66-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--66-0

setreg1;>tabstrc--adrbuff--66-0

datawrite1;>tabstrc--recurs-tabbuff--66-0_2
dataread1;;tabstrc--recurs-tabbuff--66-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--66-0_2
dataread1;;tabstrc--recurs-tabbuff_read--66-0_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--66-0_2
goto;>tabstrc--recurs-checkno--66-0_2
zerosize;;tabstrc--recurs-checkyes--66-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--66-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--66-0

setreg1;>tabstrc--adrbuff--66-0

datawrite1;>tabstrc--recurs-tabbuff--66-0_3
dataread1;;tabstrc--recurs-tabbuff--66-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--66-0_3
dataread1;;tabstrc--recurs-tabbuff_read--66-0_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--66-0_3
goto;>tabstrc--recurs-checkno--66-0_3
zerosize;;tabstrc--recurs-checkyes--66-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--66-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--66-0

setreg1;>tabstrc--adrbuff--66-0

datawrite1;>tabstrc--recurs-tabbuff--66-0_4
dataread1;;tabstrc--recurs-tabbuff--66-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--66-0_4
dataread1;;tabstrc--recurs-tabbuff_read--66-0_4

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--66-0_4
goto;>tabstrc--recurs-checkno--66-0_4
zerosize;;tabstrc--recurs-checkyes--66-0_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--66-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--66-0

setreg1;>tabstrc--adrbuff--66-0

datawrite1;>tabstrc--recurs-tabbuff--66-0_5
dataread1;;tabstrc--recurs-tabbuff--66-0_5
datawrite1;>tabstrc--recurs-tabbuff_read--66-0_5
dataread1;;tabstrc--recurs-tabbuff_read--66-0_5

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--66-0_5
goto;>tabstrc--recurs-checkno--66-0_5
zerosize;;tabstrc--recurs-checkyes--66-0_5
##set flag########
setreg1;>tabstrc--outbuff--66-0
datawrite1;>tabstrc--recurs-flag--66-0_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--66-0_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--66-0_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--66-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--66-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--66-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--66-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--66-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-68-0
goto;>goto--jumper-68-0
dataread1;>@1;goto--branch-68-0
datawrite1;>validcom
zerosize;;goto--jumper-68-0
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-69-0
goto;>goto--jumper-69-0
setreg1;>goto--jumper-69-0;goto--branch-69-0
s1push1
goto;>hello--label
zerosize;;goto--jumper-69-0
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>cp.buffer--table
datawrite1;>tabstrc--adrbuff--71-0
null;;tabstrc--adrbuff--71-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--71-0
null;;tabstrc--outbuff--71-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--71-0

datawrite1;>tabstrc--recurs-tabbuff--71-0_1
dataread1;;tabstrc--recurs-tabbuff--71-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--71-0_1
dataread1;;tabstrc--recurs-tabbuff_read--71-0_1

setreg2;:q


gotoif;>tabstrc--recurs-checkyes--71-0_1
goto;>tabstrc--recurs-checkno--71-0_1
zerosize;;tabstrc--recurs-checkyes--71-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--71-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--71-0

setreg1;>tabstrc--adrbuff--71-0

datawrite1;>tabstrc--recurs-tabbuff--71-0_2
dataread1;;tabstrc--recurs-tabbuff--71-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--71-0_2
dataread1;;tabstrc--recurs-tabbuff_read--71-0_2

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--71-0_2
goto;>tabstrc--recurs-checkno--71-0_2
zerosize;;tabstrc--recurs-checkyes--71-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--71-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--71-0

setreg1;>tabstrc--adrbuff--71-0

datawrite1;>tabstrc--recurs-tabbuff--71-0_3
dataread1;;tabstrc--recurs-tabbuff--71-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--71-0_3
dataread1;;tabstrc--recurs-tabbuff_read--71-0_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--71-0_3
goto;>tabstrc--recurs-checkno--71-0_3
zerosize;;tabstrc--recurs-checkyes--71-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--71-0
setreg2;+
add
datawrite1;>tabstrc--adrbuff--71-0

setreg1;>tabstrc--adrbuff--71-0

datawrite1;>tabstrc--recurs-tabbuff--71-0_4
dataread1;;tabstrc--recurs-tabbuff--71-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--71-0_4
dataread1;;tabstrc--recurs-tabbuff_read--71-0_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--71-0_4
goto;>tabstrc--recurs-checkno--71-0_4
zerosize;;tabstrc--recurs-checkyes--71-0_4
##set flag########
setreg1;>tabstrc--outbuff--71-0
datawrite1;>tabstrc--recurs-flag--71-0_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--71-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--71-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--71-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--71-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--71-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--71-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-73-0
goto;>goto--jumper-73-0
dataread1;>@1;goto--branch-73-0
datawrite1;>validcom
zerosize;;goto--jumper-73-0
#conditional stop
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-74-0
goto;>goto--jumper-74-0
stop;;goto--branch-74-0

zerosize;;goto--jumper-74-0
#conditional subroutine goto
dataread1;>validcom
dataread2;>@0
gotoif;>goto--branch-76-0
goto;>goto--jumper-76-0
setreg1;>goto--jumper-76-0;goto--branch-76-0
s1push1
goto;>invalid--label
zerosize;;goto--jumper-76-0
#goto 
goto;>main--label
#label
zerosize;;invalid--label
#prline
fopwri1;:U
fopwri1;:n
fopwri1;:k
fopwri1;:n
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;hello--label
#prline
fopwri1;:A
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:g
fopwri1;:o
fopwri1;:o
fopwri1;:d
fopwri1;:\s
fopwri1;:d
fopwri1;:a
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:\m
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:r
fopwri1;:.
fopwri1;:\s
fopwri1;::
fopwri1;:D
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;help--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:H
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;::
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;::
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:o
fopwri1;::
fopwri1;:\s
fopwri1;:p
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:g
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:m
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;::
fopwri1;:\s
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#module include: line 101-0: comprompt as cp
includeas;comprompt,cp
#END OF FILE
