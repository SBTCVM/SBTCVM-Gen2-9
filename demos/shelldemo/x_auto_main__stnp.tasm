#SSTNPL COMPILER v0.2.2
#header
head-rname=auto_main
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "demos/shelldemo/auto_main.stnp
null;0;shell_entry_size
null;0;shell_entry_itersize
null;0;shell_entry_buff
null;0;shell_entry_chbuff
null;10x0;shell_entry_clearbuffer
null;10x80;shell_entry_max
null;0;cmdflg
null;0;validcom
null;0++---;*0++---
null;+++---;*+++---
null;10x0;@0
null;10x1;@1
null;+++--0;*+++--0
null;:\n;:\n
null;:\x;:\x
null;10x0;getentry_tobuff_iter
null;10x0;getentry_pad_iter
#prline
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:b
fopwri1;:a
fopwri1;:s
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:m
fopwri1;:u
fopwri1;:l
fopwri1;:t
fopwri1;:i
fopwri1;:-
fopwri1;:c
fopwri1;:h
fopwri1;:a
fopwri1;:r
fopwri1;:a
fopwri1;:c
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:-
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:m
fopwri1;:o
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:y
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\n
#label
null;;main--label
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#print
fopwri1;:>
#goto (extra code stores away return address.)
setreg1;>goto--jumper-49
s1push1
goto;>getentry--label
null;;goto--jumper-49
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validcom
#######tabstrc
#init
setreg1;10x80
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabstrc--adrbuff--62
null;;tabstrc--adrbuff--62
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--62
null;;tabstrc--outbuff--62
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--62

datawrite1;>tabstrc--recurs-tabbuff--62_1
dataread1;;tabstrc--recurs-tabbuff--62_1
datawrite1;>tabstrc--recurs-tabbuff_read--62_1
dataread1;;tabstrc--recurs-tabbuff_read--62_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--62_1
goto;>tabstrc--recurs-checkno--62_1
null;;tabstrc--recurs-checkyes--62_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--62
setreg2;+
add
datawrite1;>tabstrc--adrbuff--62

setreg1;>tabstrc--adrbuff--62

datawrite1;>tabstrc--recurs-tabbuff--62_2
dataread1;;tabstrc--recurs-tabbuff--62_2
datawrite1;>tabstrc--recurs-tabbuff_read--62_2
dataread1;;tabstrc--recurs-tabbuff_read--62_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--62_2
goto;>tabstrc--recurs-checkno--62_2
null;;tabstrc--recurs-checkyes--62_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--62
setreg2;+
add
datawrite1;>tabstrc--adrbuff--62

setreg1;>tabstrc--adrbuff--62

datawrite1;>tabstrc--recurs-tabbuff--62_3
dataread1;;tabstrc--recurs-tabbuff--62_3
datawrite1;>tabstrc--recurs-tabbuff_read--62_3
dataread1;;tabstrc--recurs-tabbuff_read--62_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--62_3
goto;>tabstrc--recurs-checkno--62_3
null;;tabstrc--recurs-checkyes--62_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--62
setreg2;+
add
datawrite1;>tabstrc--adrbuff--62

setreg1;>tabstrc--adrbuff--62

datawrite1;>tabstrc--recurs-tabbuff--62_4
dataread1;;tabstrc--recurs-tabbuff--62_4
datawrite1;>tabstrc--recurs-tabbuff_read--62_4
dataread1;;tabstrc--recurs-tabbuff_read--62_4

setreg2;:p


gotoif;>tabstrc--recurs-checkyes--62_4
goto;>tabstrc--recurs-checkno--62_4
null;;tabstrc--recurs-checkyes--62_4
##set flag########
setreg1;>tabstrc--outbuff--62
datawrite1;>tabstrc--recurs-flag--62_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--62_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--62_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--62_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--62_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--62_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--62
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-64
goto;>goto--jumper-64
dataread1;>@1;goto--branch-64
datawrite1;>validcom
null;;goto--jumper-64
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-65
goto;>goto--jumper-65
setreg1;>goto--jumper-65;goto--branch-65
s1push1
goto;>help--label
null;;goto--jumper-65
#######tabstrc
#init
setreg1;10x80
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabstrc--adrbuff--67
null;;tabstrc--adrbuff--67
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--67
null;;tabstrc--outbuff--67
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_1
dataread1;;tabstrc--recurs-tabbuff--67_1
datawrite1;>tabstrc--recurs-tabbuff_read--67_1
dataread1;;tabstrc--recurs-tabbuff_read--67_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--67_1
goto;>tabstrc--recurs-checkno--67_1
null;;tabstrc--recurs-checkyes--67_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--67
setreg2;+
add
datawrite1;>tabstrc--adrbuff--67

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_2
dataread1;;tabstrc--recurs-tabbuff--67_2
datawrite1;>tabstrc--recurs-tabbuff_read--67_2
dataread1;;tabstrc--recurs-tabbuff_read--67_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--67_2
goto;>tabstrc--recurs-checkno--67_2
null;;tabstrc--recurs-checkyes--67_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--67
setreg2;+
add
datawrite1;>tabstrc--adrbuff--67

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_3
dataread1;;tabstrc--recurs-tabbuff--67_3
datawrite1;>tabstrc--recurs-tabbuff_read--67_3
dataread1;;tabstrc--recurs-tabbuff_read--67_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--67_3
goto;>tabstrc--recurs-checkno--67_3
null;;tabstrc--recurs-checkyes--67_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--67
setreg2;+
add
datawrite1;>tabstrc--adrbuff--67

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_4
dataread1;;tabstrc--recurs-tabbuff--67_4
datawrite1;>tabstrc--recurs-tabbuff_read--67_4
dataread1;;tabstrc--recurs-tabbuff_read--67_4

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--67_4
goto;>tabstrc--recurs-checkno--67_4
null;;tabstrc--recurs-checkyes--67_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--67
setreg2;+
add
datawrite1;>tabstrc--adrbuff--67

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_5
dataread1;;tabstrc--recurs-tabbuff--67_5
datawrite1;>tabstrc--recurs-tabbuff_read--67_5
dataread1;;tabstrc--recurs-tabbuff_read--67_5

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--67_5
goto;>tabstrc--recurs-checkno--67_5
null;;tabstrc--recurs-checkyes--67_5
##set flag########
setreg1;>tabstrc--outbuff--67
datawrite1;>tabstrc--recurs-flag--67_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--67_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--67
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-69
goto;>goto--jumper-69
dataread1;>@1;goto--branch-69
datawrite1;>validcom
null;;goto--jumper-69
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-70
goto;>goto--jumper-70
setreg1;>goto--jumper-70;goto--branch-70
s1push1
goto;>hello--label
null;;goto--jumper-70
#######tabstrc
#init
setreg1;10x80
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabstrc--adrbuff--72
null;;tabstrc--adrbuff--72
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--72
null;;tabstrc--outbuff--72
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--72

datawrite1;>tabstrc--recurs-tabbuff--72_1
dataread1;;tabstrc--recurs-tabbuff--72_1
datawrite1;>tabstrc--recurs-tabbuff_read--72_1
dataread1;;tabstrc--recurs-tabbuff_read--72_1

setreg2;:q


gotoif;>tabstrc--recurs-checkyes--72_1
goto;>tabstrc--recurs-checkno--72_1
null;;tabstrc--recurs-checkyes--72_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--72
setreg2;+
add
datawrite1;>tabstrc--adrbuff--72

setreg1;>tabstrc--adrbuff--72

datawrite1;>tabstrc--recurs-tabbuff--72_2
dataread1;;tabstrc--recurs-tabbuff--72_2
datawrite1;>tabstrc--recurs-tabbuff_read--72_2
dataread1;;tabstrc--recurs-tabbuff_read--72_2

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--72_2
goto;>tabstrc--recurs-checkno--72_2
null;;tabstrc--recurs-checkyes--72_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--72
setreg2;+
add
datawrite1;>tabstrc--adrbuff--72

setreg1;>tabstrc--adrbuff--72

datawrite1;>tabstrc--recurs-tabbuff--72_3
dataread1;;tabstrc--recurs-tabbuff--72_3
datawrite1;>tabstrc--recurs-tabbuff_read--72_3
dataread1;;tabstrc--recurs-tabbuff_read--72_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--72_3
goto;>tabstrc--recurs-checkno--72_3
null;;tabstrc--recurs-checkyes--72_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--72
setreg2;+
add
datawrite1;>tabstrc--adrbuff--72

setreg1;>tabstrc--adrbuff--72

datawrite1;>tabstrc--recurs-tabbuff--72_4
dataread1;;tabstrc--recurs-tabbuff--72_4
datawrite1;>tabstrc--recurs-tabbuff_read--72_4
dataread1;;tabstrc--recurs-tabbuff_read--72_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--72_4
goto;>tabstrc--recurs-checkno--72_4
null;;tabstrc--recurs-checkyes--72_4
##set flag########
setreg1;>tabstrc--outbuff--72
datawrite1;>tabstrc--recurs-flag--72_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--72_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--72_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--72_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--72_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--72_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--72
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-74
goto;>goto--jumper-74
dataread1;>@1;goto--branch-74
datawrite1;>validcom
null;;goto--jumper-74
#conditional stop
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-75
goto;>goto--jumper-75
stop;;goto--branch-75

null;;goto--jumper-75
#conditional subroutine goto
dataread1;>validcom
dataread2;>@0
gotoif;>goto--branch-77
goto;>goto--jumper-77
setreg1;>goto--jumper-77;goto--branch-77
s1push1
goto;>invalid--label
null;;goto--jumper-77
#goto 
goto;>main--label
#label
null;;invalid--label
#prline
fopwri1;:U
fopwri1;:n
fopwri1;:k
fopwri1;:n
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;hello--label
#prline
fopwri1;:A
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:g
fopwri1;:o
fopwri1;:o
fopwri1;:d
fopwri1;:\s
fopwri1;:d
fopwri1;:a
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:,
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:r
fopwri1;:.
fopwri1;:\s
fopwri1;::
fopwri1;:D
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;help--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:H
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;::
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;::
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:o
fopwri1;::
fopwri1;:\s
fopwri1;:p
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:g
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:m
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;::
fopwri1;:\s
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#table width=80, height=1
null;;shell_entry_buffer--table
#tpad
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
null;0
#label
null;;getentry--label
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_size
#label
null;;getentry_loop--label
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-116
gotoif;>keyprompt--loop-116
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_chbuff
#conditional goto
dataread1;>shell_entry_size
dataread2;>@0
gotoif;>goto--branch-118
goto;>goto--jumper-118
setreg1;>goto--jumper-118;goto--branch-118
goto;>shell_entry_skipnewline--label
null;;goto--jumper-118
#conditional subroutine goto
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-119
goto;>goto--jumper-119
setreg1;>goto--jumper-119;goto--branch-119
s1push1
goto;>getentry_tobuff--label
null;;goto--jumper-119
#conditional return
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-120
goto;>goto--jumper-120
s1pop1;;goto--branch-120
gotoreg1
null;;goto--jumper-120
#label
null;;shell_entry_skipnewline--label
#conditional goto
dataread1;>shell_entry_chbuff
dataread2;>:\n
gotoif;>goto--branch-123
goto;>goto--jumper-123
setreg1;>goto--jumper-123;goto--branch-123
goto;>getentry_loop--label
null;;goto--jumper-123
#conditional subroutine goto
dataread1;>shell_entry_chbuff
dataread2;>:\x
gotoif;>goto--branch-125
goto;>goto--jumper-125
setreg1;>goto--jumper-125;goto--branch-125
s1push1
goto;>getentry_backone--label
null;;goto--jumper-125
#conditional goto
dataread1;>shell_entry_chbuff
dataread2;>:\x
gotoif;>goto--branch-126
goto;>goto--jumper-126
setreg1;>goto--jumper-126;goto--branch-126
goto;>getentry_loop--label
null;;goto--jumper-126
#conditional goto
dataread1;>shell_entry_size
dataread2;>shell_entry_max
gotoif;>goto--branch-129
goto;>goto--jumper-129
setreg1;>goto--jumper-129;goto--branch-129
goto;>getentry_loop--label
null;;goto--jumper-129
#Dump (character)
dataread1;>shell_entry_chbuff
iowrite1;>io.ttywr
#add (2op math)
dataread1;>shell_entry_size
dataread2;>@1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_size
#get(1) (may be used with set, or asm code)
dataread1;>shell_entry_chbuff
#stack push (uses stack 2)
s2push1
#goto 
goto;>getentry_loop--label
#label
null;;getentry_backone--label
#conditional return
dataread1;>shell_entry_size
dataread2;>@0
gotoif;>goto--branch-140
goto;>goto--jumper-140
s1pop1;;goto--branch-140
gotoreg1
null;;goto--jumper-140
#Dump (character)
dataread1;>:\x
iowrite1;>io.ttywr
#stack pop (uses stack 2)
s2pop1
#subtract (2op math)
dataread1;>shell_entry_size
dataread2;>@1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_size
#return from subroutine.
s1pop1
gotoreg1
#label
null;;getentry_tobuff--label
#stack reverse (uses stack 2)
s2reverse
#subtract (2op math)
dataread1;>shell_entry_size
dataread2;>@1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_itersize
#Upward range iterator
dataread1;>@0
datawrite1;>getentry_tobuff_iter
setreg1;>uiter-retpos-152;uiter-loopback-152
s1push1
goto;>getentry_tobuff_loop--label
dataread1;>getentry_tobuff_iter;uiter-retpos-152
setreg2;10x1
add
datawrite1;>getentry_tobuff_iter
dataread2;>shell_entry_itersize
gotoifless;>uiter-loopback-152
gotoif;>uiter-loopback-152

#conditional return
dataread1;>shell_entry_clearbuffer
dataread2;>@0
gotoif;>goto--branch-153
goto;>goto--jumper-153
s1pop1;;goto--branch-153
gotoreg1
null;;goto--jumper-153
#Upward range iterator
dataread1;>shell_entry_size
datawrite1;>getentry_pad_iter
setreg1;>uiter-retpos-154;uiter-loopback-154
s1push1
goto;>getentry_pad--label
dataread1;>getentry_pad_iter;uiter-retpos-154
setreg2;10x1
add
datawrite1;>getentry_pad_iter
dataread2;>shell_entry_max
gotoifless;>uiter-loopback-154
gotoif;>uiter-loopback-154

#return from subroutine.
s1pop1
gotoreg1
#label
null;;getentry_tobuff_loop--label
#stack pop (uses stack 2)
s2pop1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>shell_entry_buff
#SSTNPL table write instruction.
setreg1;10x80
dataread2;>@0
mul
dataread2;>getentry_tobuff_iter
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabw--adrbuff--160
dataread1;>shell_entry_buff
datawrite1;;tabw--adrbuff--160
#return from subroutine.
s1pop1
gotoreg1
#label
null;;getentry_pad--label
#SSTNPL table write instruction.
setreg1;10x80
dataread2;>@0
mul
dataread2;>getentry_pad_iter
add
setreg2;10x1
add
setreg2;>shell_entry_buffer--table
add
datawrite1;>tabw--adrbuff--165
dataread1;>@0
datawrite1;;tabw--adrbuff--165
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
