#SSTNPL COMPILER v0.4.0
#header
head-rname=splash
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/tools/splash/splash.stnp
null;0;kb
null;10x0;@0
null;10x1;@1
null;10x30;@30
#goto (extra code stores away return address.)
setreg1;>goto--jumper-3-0
s1push1
goto;>init--label
zerosize;;goto--jumper-3-0
#goto (extra code stores away return address.)
setreg1;>goto--jumper-4-0
s1push1
goto;>screen_refresh--label
zerosize;;goto--jumper-4-0
#unconditional loop
zerosize;;flowloop--con-x-1--start
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:.
fopwri1;:2
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:A
fopwri1;:\s
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:-
fopwri1;:l
fopwri1;:i
fopwri1;:k
fopwri1;:e
fopwri1;:\s
fopwri1;:T
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:O
fopwri1;:S
fopwri1;:.
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-9-0
s1push1
goto;>textwait--label
zerosize;;goto--jumper-9-0
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:P
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:P
fopwri1;:r
fopwri1;:o
fopwri1;:j
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:W
fopwri1;:o
fopwri1;:r
fopwri1;:k
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:B
fopwri1;:a
fopwri1;:l
fopwri1;:a
fopwri1;:n
fopwri1;:c
fopwri1;:e
fopwri1;:d
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:T
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:p
fopwri1;:u
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:o
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:5
fopwri1;:\s
fopwri1;:y
fopwri1;:e
fopwri1;:a
fopwri1;:r
fopwri1;:s
fopwri1;:.
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-15-0
s1push1
goto;>textwait--label
zerosize;;goto--jumper-15-0
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:B
fopwri1;:u
fopwri1;:i
fopwri1;:l
fopwri1;:t
fopwri1;:\s
fopwri1;:F
fopwri1;:o
fopwri1;:r
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:2
fopwri1;:-
fopwri1;:9
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:W
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:\s
fopwri1;:S
fopwri1;:S
fopwri1;:T
fopwri1;:N
fopwri1;:P
fopwri1;:L
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:A
fopwri1;:s
fopwri1;:s
fopwri1;:e
fopwri1;:m
fopwri1;:b
fopwri1;:l
fopwri1;:y
fopwri1;:.
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-21-0
s1push1
goto;>textwait--label
zerosize;;goto--jumper-21-0
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:S
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:s
fopwri1;:.
fopwri1;:m
fopwri1;:d
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:w
fopwri1;:e
fopwri1;:s
fopwri1;:o
fopwri1;:m
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:p
fopwri1;:e
fopwri1;:o
fopwri1;:p
fopwri1;:l
fopwri1;:e
fopwri1;:\s
fopwri1;:w
fopwri1;:h
fopwri1;:o
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:k
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:P
fopwri1;:o
fopwri1;:s
fopwri1;:s
fopwri1;:i
fopwri1;:b
fopwri1;:l
fopwri1;:e
fopwri1;:!
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-26-0
s1push1
goto;>textwait--label
zerosize;;goto--jumper-26-0
goto;>flowloop--con-x-1--start
zerosize;;flowloop--con-x-1
#label
zerosize;;screen_refresh--label
#Get character from TTY input.
ioread1;>io.ttyrd
datawrite1;>kb
#conditional flow control begin
dataread1;>kb
dataread2;>@0
gotoif;>goto--branch-33-0
goto;>goto--jumper-33-0
goto;>flow--con-x-2;goto--branch-33-0

zerosize;;goto--jumper-33-0
zerosize;;flow--con-x-2--start
#Set SBTGA mode
dataread1;>@0
iowrite1;>ga.mode
#goto (extra code stores away return address.)
setreg1;>goto--jumper-35-0
s1push1
goto;>dos.exit--label
zerosize;;goto--jumper-35-0
zerosize;;flow--con-x-2
#plotter buffer blit
dataread1;>@1
iowrite1;>plot.blit
#val (used with set to change variable value during runtime.)
setreg1;10x-46
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.posx
#val (used with set to change variable value during runtime.)
setreg1;10x14
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.posy
#goto (extra code stores away return address.)
setreg1;>goto--jumper-42-0
s1push1
goto;>seg.init_pos--label
zerosize;;goto--jumper-42-0
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;textwait--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-46-0
s1push1
goto;>seg.output--label
zerosize;;goto--jumper-46-0
#Get character from TTY input.
ioread1;>io.ttyrd
datawrite1;>kb
#conditional flow control begin
dataread1;>kb
dataread2;>@0
gotoif;>goto--branch-48-0
goto;>goto--jumper-48-0
goto;>flow--con-x-3;goto--branch-48-0

zerosize;;goto--jumper-48-0
zerosize;;flow--con-x-3--start
#Set SBTGA mode
dataread1;>@0
iowrite1;>ga.mode
#goto (extra code stores away return address.)
setreg1;>goto--jumper-50-0
s1push1
goto;>dos.exit--label
zerosize;;goto--jumper-50-0
zerosize;;flow--con-x-3
#Wait loop
setreg1;0
datawrite1;>waitcy-loopback-52-0
setreg1;0;waitcy-loopback-52-0
setreg2;10x1
add
datawrite1;>waitcy-loopback-52-0
setreg2;10x2666
gotoifless;>waitcy-loopback-52-0

#goto (extra code stores away return address.)
setreg1;>goto--jumper-53-0
s1push1
goto;>screen_refresh--label
zerosize;;goto--jumper-53-0
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;init--label
#Clear TTY input buffer
iowrite1;>io.ttyrd#Set SBTGA mode
dataread1;>@30
iowrite1;>ga.mode
#prline
fopwri1;:N
fopwri1;:o
fopwri1;:t
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:g
fopwri1;:r
fopwri1;:a
fopwri1;:m
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:G
fopwri1;:r
fopwri1;:a
fopwri1;:p
fopwri1;:h
fopwri1;:i
fopwri1;:c
fopwri1;:s
fopwri1;:!
fopwri1;:\n
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #62-0
setreg1;>image_offset1#SSTNPL Source Line: '62-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.offset
#goto (extra code stores away return address.)
setreg1;>goto--jumper-65-0
s1push1
goto;>pl.decode--label
zerosize;;goto--jumper-65-0
#plotter buffer select
dataread1;>@0
iowrite1;>plot.select
#plotter buffer copy
dataread1;>@1
iowrite1;>plot.copy
#val (used with set to change variable value during runtime.)
setreg1;10x-9841
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.color_on
#val (used with set to change variable value during runtime.)
setreg1;10x4
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.height
#val (used with set to change variable value during runtime.)
setreg1;10x2
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.width
#val (used with set to change variable value during runtime.)
setreg1;10x5
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.hori_space
#val (used with set to change variable value during runtime.)
setreg1;10x10
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>seg.vert_space
#return from subroutine.
s1pop1
gotoreg1
#module include: line 84-0: plrle_noalpha as pl
includeas;plrle_noalpha,pl
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #85-0
include;dos+media+dosfloppy.tas0;image_offset1#SSTNPL Source Line: '85-0' 
#module include: line 86-0: doslib as dos
includeas;doslib,dos
#module include: line 87-0: segment as seg
includeas;segment,seg
#END OF FILE
