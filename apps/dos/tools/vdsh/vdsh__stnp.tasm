#SSTNPL COMPILER v0.4.0
#header
head-rname=vdsh
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/tools/vdsh/vdsh.stnp
null;0;cmdflg
null;0;validflg
null;0;quitflg
null;++0---;*++0---
null;10x0;@0
null;10x1;@1
null;0++--0;*0++--0
null;+++---;*+++---
null;0;exitcode
null;10x2;@2
#goto (extra code stores away return address.)
setreg1;>goto--jumper-5-0
s1push1
goto;>dosargs.getentry--label
zerosize;;goto--jumper-5-0
#Set text colors
dataread1;>*++0---
iowrite1;>io.textcolor
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--9-1
null;;tabstrc--adrbuff--9-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--9-1
null;;tabstrc--outbuff--9-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_1
dataread1;;tabstrc--recurs-tabbuff--9-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_1
dataread1;;tabstrc--recurs-tabbuff_read--9-1_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--9-1_1
goto;>tabstrc--recurs-checkno--9-1_1
zerosize;;tabstrc--recurs-checkyes--9-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--9-1
adddata1;+
datawrite1;>tabstrc--adrbuff--9-1

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_2
dataread1;;tabstrc--recurs-tabbuff--9-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_2
dataread1;;tabstrc--recurs-tabbuff_read--9-1_2

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--9-1_2
goto;>tabstrc--recurs-checkno--9-1_2
zerosize;;tabstrc--recurs-checkyes--9-1_2
##set flag########
setreg1;>tabstrc--outbuff--9-1
datawrite1;>tabstrc--recurs-flag--9-1_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--9-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--9-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-9-3
goto;>goto--jumper-9-3
setreg1;>goto--jumper-9-3;goto--branch-9-3
s1push1
goto;>vdi_default--label
zerosize;;goto--jumper-9-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-9-4
goto;>goto--jumper-9-4
dataread1;>@1;goto--branch-9-4
datawrite1;>validflg
zerosize;;goto--jumper-9-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--10-1
null;;tabstrc--adrbuff--10-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--10-1
null;;tabstrc--outbuff--10-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--10-1

datawrite1;>tabstrc--recurs-tabbuff--10-1_1
dataread1;;tabstrc--recurs-tabbuff--10-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--10-1_1
dataread1;;tabstrc--recurs-tabbuff_read--10-1_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--10-1_1
goto;>tabstrc--recurs-checkno--10-1_1
zerosize;;tabstrc--recurs-checkyes--10-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--10-1
adddata1;+
datawrite1;>tabstrc--adrbuff--10-1

setreg1;>tabstrc--adrbuff--10-1

datawrite1;>tabstrc--recurs-tabbuff--10-1_2
dataread1;;tabstrc--recurs-tabbuff--10-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--10-1_2
dataread1;;tabstrc--recurs-tabbuff_read--10-1_2

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--10-1_2
goto;>tabstrc--recurs-checkno--10-1_2
zerosize;;tabstrc--recurs-checkyes--10-1_2
##set flag########
setreg1;>tabstrc--outbuff--10-1
datawrite1;>tabstrc--recurs-flag--10-1_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--10-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--10-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--10-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--10-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-10-3
goto;>goto--jumper-10-3
setreg1;>goto--jumper-10-3;goto--branch-10-3
s1push1
goto;>vdi_no_quit--label
zerosize;;goto--jumper-10-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-10-4
goto;>goto--jumper-10-4
dataread1;>@1;goto--branch-10-4
datawrite1;>validflg
zerosize;;goto--jumper-10-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--11-1
null;;tabstrc--adrbuff--11-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--11-1
null;;tabstrc--outbuff--11-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--11-1

datawrite1;>tabstrc--recurs-tabbuff--11-1_1
dataread1;;tabstrc--recurs-tabbuff--11-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--11-1_1
dataread1;;tabstrc--recurs-tabbuff_read--11-1_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--11-1_1
goto;>tabstrc--recurs-checkno--11-1_1
zerosize;;tabstrc--recurs-checkyes--11-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--11-1
adddata1;+
datawrite1;>tabstrc--adrbuff--11-1

setreg1;>tabstrc--adrbuff--11-1

datawrite1;>tabstrc--recurs-tabbuff--11-1_2
dataread1;;tabstrc--recurs-tabbuff--11-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--11-1_2
dataread1;;tabstrc--recurs-tabbuff_read--11-1_2

setreg2;:?


gotoif;>tabstrc--recurs-checkyes--11-1_2
goto;>tabstrc--recurs-checkno--11-1_2
zerosize;;tabstrc--recurs-checkyes--11-1_2
##set flag########
setreg1;>tabstrc--outbuff--11-1
datawrite1;>tabstrc--recurs-flag--11-1_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--11-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--11-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--11-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--11-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-11-3
goto;>goto--jumper-11-3
setreg1;>goto--jumper-11-3;goto--branch-11-3
s1push1
goto;>vdi_help--label
zerosize;;goto--jumper-11-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-11-4
goto;>goto--jumper-11-4
dataread1;>@1;goto--branch-11-4
datawrite1;>validflg
zerosize;;goto--jumper-11-4
#conditional flow control begin
dataread1;>validflg
dataread2;>@0
gotoif;>goto--jumper-12-0
goto;>goto--branch-12-0
goto;>flow--con-x-1;goto--branch-12-0

zerosize;;goto--jumper-12-0
zerosize;;flow--con-x-1--start
#prline
fopwri1;:U
fopwri1;:s
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:f
fopwri1;:a
fopwri1;:u
fopwri1;:l
fopwri1;:t
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:`
fopwri1;:v
fopwri1;:d
fopwri1;:s
fopwri1;:h
fopwri1;:\s
fopwri1;:/
fopwri1;:?
fopwri1;:`
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-14-0
s1push1
goto;>vdi_default--label
zerosize;;goto--jumper-14-0
zerosize;;flow--con-x-1
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#prline
fopwri1;:E
fopwri1;:R
fopwri1;:R
fopwri1;:O
fopwri1;:R
fopwri1;::
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
#stop (shutdown vm)
stop
#label
zerosize;;vdi_default--label
#prline
fopwri1;:U
fopwri1;:s
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:c
fopwri1;:t
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:v
fopwri1;:d
fopwri1;:s
fopwri1;:h
fopwri1;:\s
fopwri1;:/
fopwri1;:i
fopwri1;:)
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-23-0
s1push1
goto;>vdi_serial--label
zerosize;;goto--jumper-23-0
#vdi mode set
dataread1;>@1
iowrite1;>vdi.cli.status
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;vdi_no_quit--label
#prline
fopwri1;:U
fopwri1;:s
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:-
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:(
fopwri1;:v
fopwri1;:d
fopwri1;:s
fopwri1;:h
fopwri1;:\s
fopwri1;:/
fopwri1;:r
fopwri1;:)
fopwri1;:\s
fopwri1;:\n
#prline
fopwri1;:`
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:`
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:N
fopwri1;:O
fopwri1;:T
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>quitflg
#goto (extra code stores away return address.)
setreg1;>goto--jumper-32-0
s1push1
goto;>vdi_serial--label
zerosize;;goto--jumper-32-0
#vdi mode set
dataread1;>@1
iowrite1;>vdi.cli.status
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;vdi_help--label
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:V
fopwri1;:D
fopwri1;:S
fopwri1;:H
fopwri1;::
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:o
fopwri1;:m
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#prline
fopwri1;:U
fopwri1;:S
fopwri1;:A
fopwri1;:G
fopwri1;:E
fopwri1;::
fopwri1;:\n
#prline
fopwri1;:/
fopwri1;:i
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:c
fopwri1;:t
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:[
fopwri1;:n
fopwri1;:o
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:s
fopwri1;:]
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:/
fopwri1;:i
fopwri1;:\n
#prline
fopwri1;:/
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\n
#prline
fopwri1;:/
fopwri1;:r
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:/
fopwri1;:i
fopwri1;:\m
fopwri1;:\s
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:Q
fopwri1;:U
fopwri1;:I
fopwri1;:T
fopwri1;:\s
fopwri1;:s
fopwri1;:t
fopwri1;:a
fopwri1;:t
fopwri1;:u
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;vdi_serial--label
#Set text colors
dataread1;>*0++--0
iowrite1;>io.textcolor
#prline
fopwri1;:V
fopwri1;:D
fopwri1;:S
fopwri1;:H
fopwri1;::
fopwri1;:\s
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:w
fopwri1;:r
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #58-0
include;vdishell.tas0#SSTNPL Source Line: '58-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #59-0
dataread1;>vdiexitcode#SSTNPL Source Line: '59-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>exitcode
#print
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:S
fopwri1;:t
fopwri1;:a
fopwri1;:t
fopwri1;:u
fopwri1;:s
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:t
fopwri1;:u
fopwri1;:r
fopwri1;:n
fopwri1;:e
fopwri1;:d
fopwri1;::
fopwri1;:\s
#Dump (decimal)
dataread1;>exitcode
iowrite1;>io.decdump
#print newline
fopwri1;:\n
#conditional flow control begin
dataread1;>exitcode
dataread2;>@2
gotoif;>goto--jumper-66-0
goto;>goto--branch-66-0
goto;>flow--con-x-2;goto--branch-66-0

zerosize;;goto--jumper-66-0
zerosize;;flow--con-x-2--start
#conditional stop
dataread1;>quitflg
dataread2;>@0
gotoif;>goto--branch-67-0
goto;>goto--jumper-67-0
stop;;goto--branch-67-0

zerosize;;goto--jumper-67-0
zerosize;;flow--con-x-2
#return from subroutine.
s1pop1
gotoreg1
#module include: line 71-0: dosargs as dosargs
includeas;dosargs,dosargs
#END OF FILE
