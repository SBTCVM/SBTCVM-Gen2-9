#SSTNPL COMPILER v0.4.0
#header
head-rname=help
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/tools/help/help.stnp
null;0;cmdflg
null;0;validflg
null;++0---;*++0---
null;10x0;@0
null;10x1;@1
null;000000;*000000
null;+0+---;*+0+---
#goto (extra code stores away return address.)
setreg1;>goto--jumper-3-0
s1push1
goto;>dosargs.getentry--label
zerosize;;goto--jumper-3-0
#Set text colors
dataread1;>*++0---
iowrite1;>io.textcolor
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--7-1
null;;tabstrc--adrbuff--7-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--7-1
null;;tabstrc--outbuff--7-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_1
dataread1;;tabstrc--recurs-tabbuff--7-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_1
dataread1;;tabstrc--recurs-tabbuff_read--7-1_1

setreg2;:c


gotoif;>tabstrc--recurs-checkyes--7-1_1
goto;>tabstrc--recurs-checkno--7-1_1
zerosize;;tabstrc--recurs-checkyes--7-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--7-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--7-1

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_2
dataread1;;tabstrc--recurs-tabbuff--7-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_2
dataread1;;tabstrc--recurs-tabbuff_read--7-1_2

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--7-1_2
goto;>tabstrc--recurs-checkno--7-1_2
zerosize;;tabstrc--recurs-checkyes--7-1_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--7-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--7-1

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_3
dataread1;;tabstrc--recurs-tabbuff--7-1_3
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_3
dataread1;;tabstrc--recurs-tabbuff_read--7-1_3

setreg2;:m


gotoif;>tabstrc--recurs-checkyes--7-1_3
goto;>tabstrc--recurs-checkno--7-1_3
zerosize;;tabstrc--recurs-checkyes--7-1_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--7-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--7-1

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_4
dataread1;;tabstrc--recurs-tabbuff--7-1_4
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_4
dataread1;;tabstrc--recurs-tabbuff_read--7-1_4

setreg2;:m


gotoif;>tabstrc--recurs-checkyes--7-1_4
goto;>tabstrc--recurs-checkno--7-1_4
zerosize;;tabstrc--recurs-checkyes--7-1_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--7-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--7-1

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_5
dataread1;;tabstrc--recurs-tabbuff--7-1_5
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_5
dataread1;;tabstrc--recurs-tabbuff_read--7-1_5

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--7-1_5
goto;>tabstrc--recurs-checkno--7-1_5
zerosize;;tabstrc--recurs-checkyes--7-1_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--7-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--7-1

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_6
dataread1;;tabstrc--recurs-tabbuff--7-1_6
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_6
dataread1;;tabstrc--recurs-tabbuff_read--7-1_6

setreg2;:n


gotoif;>tabstrc--recurs-checkyes--7-1_6
goto;>tabstrc--recurs-checkno--7-1_6
zerosize;;tabstrc--recurs-checkyes--7-1_6
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--7-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--7-1

setreg1;>tabstrc--adrbuff--7-1

datawrite1;>tabstrc--recurs-tabbuff--7-1_7
dataread1;;tabstrc--recurs-tabbuff--7-1_7
datawrite1;>tabstrc--recurs-tabbuff_read--7-1_7
dataread1;;tabstrc--recurs-tabbuff_read--7-1_7

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--7-1_7
goto;>tabstrc--recurs-checkno--7-1_7
zerosize;;tabstrc--recurs-checkyes--7-1_7
##set flag########
setreg1;>tabstrc--outbuff--7-1
datawrite1;>tabstrc--recurs-flag--7-1_7
setreg1;+
datawrite1;;tabstrc--recurs-flag--7-1_7
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_7
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_6
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--7-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--7-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-7-3
goto;>goto--jumper-7-3
setreg1;>goto--jumper-7-3;goto--branch-7-3
s1push1
goto;>command_txe_help--label
zerosize;;goto--jumper-7-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-7-4
goto;>goto--jumper-7-4
dataread1;>@1;goto--branch-7-4
datawrite1;>validflg
zerosize;;goto--jumper-7-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--8-1
null;;tabstrc--adrbuff--8-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--8-1
null;;tabstrc--outbuff--8-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_1
dataread1;;tabstrc--recurs-tabbuff--8-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_1
dataread1;;tabstrc--recurs-tabbuff_read--8-1_1

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--8-1_1
goto;>tabstrc--recurs-checkno--8-1_1
zerosize;;tabstrc--recurs-checkyes--8-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_2
dataread1;;tabstrc--recurs-tabbuff--8-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_2
dataread1;;tabstrc--recurs-tabbuff_read--8-1_2

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--8-1_2
goto;>tabstrc--recurs-checkno--8-1_2
zerosize;;tabstrc--recurs-checkyes--8-1_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_3
dataread1;;tabstrc--recurs-tabbuff--8-1_3
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_3
dataread1;;tabstrc--recurs-tabbuff_read--8-1_3

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--8-1_3
goto;>tabstrc--recurs-checkno--8-1_3
zerosize;;tabstrc--recurs-checkyes--8-1_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_4
dataread1;;tabstrc--recurs-tabbuff--8-1_4
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_4
dataread1;;tabstrc--recurs-tabbuff_read--8-1_4

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--8-1_4
goto;>tabstrc--recurs-checkno--8-1_4
zerosize;;tabstrc--recurs-checkyes--8-1_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_5
dataread1;;tabstrc--recurs-tabbuff--8-1_5
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_5
dataread1;;tabstrc--recurs-tabbuff_read--8-1_5

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--8-1_5
goto;>tabstrc--recurs-checkno--8-1_5
zerosize;;tabstrc--recurs-checkyes--8-1_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_6
dataread1;;tabstrc--recurs-tabbuff--8-1_6
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_6
dataread1;;tabstrc--recurs-tabbuff_read--8-1_6

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--8-1_6
goto;>tabstrc--recurs-checkno--8-1_6
zerosize;;tabstrc--recurs-checkyes--8-1_6
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_7
dataread1;;tabstrc--recurs-tabbuff--8-1_7
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_7
dataread1;;tabstrc--recurs-tabbuff_read--8-1_7

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--8-1_7
goto;>tabstrc--recurs-checkno--8-1_7
zerosize;;tabstrc--recurs-checkyes--8-1_7
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8-1

setreg1;>tabstrc--adrbuff--8-1

datawrite1;>tabstrc--recurs-tabbuff--8-1_8
dataread1;;tabstrc--recurs-tabbuff--8-1_8
datawrite1;>tabstrc--recurs-tabbuff_read--8-1_8
dataread1;;tabstrc--recurs-tabbuff_read--8-1_8

setreg2;:w


gotoif;>tabstrc--recurs-checkyes--8-1_8
goto;>tabstrc--recurs-checkno--8-1_8
zerosize;;tabstrc--recurs-checkyes--8-1_8
##set flag########
setreg1;>tabstrc--outbuff--8-1
datawrite1;>tabstrc--recurs-flag--8-1_8
setreg1;+
datawrite1;;tabstrc--recurs-flag--8-1_8
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_8
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_7
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_6
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--8-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-8-3
goto;>goto--jumper-8-3
setreg1;>goto--jumper-8-3;goto--branch-8-3
s1push1
goto;>overview--label
zerosize;;goto--jumper-8-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-8-4
goto;>goto--jumper-8-4
dataread1;>@1;goto--branch-8-4
datawrite1;>validflg
zerosize;;goto--jumper-8-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--9-1
null;;tabstrc--adrbuff--9-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--9-1
null;;tabstrc--outbuff--9-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_1
dataread1;;tabstrc--recurs-tabbuff--9-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_1
dataread1;;tabstrc--recurs-tabbuff_read--9-1_1

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--9-1_1
goto;>tabstrc--recurs-checkno--9-1_1
zerosize;;tabstrc--recurs-checkyes--9-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--9-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--9-1

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_2
dataread1;;tabstrc--recurs-tabbuff--9-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_2
dataread1;;tabstrc--recurs-tabbuff_read--9-1_2

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--9-1_2
goto;>tabstrc--recurs-checkno--9-1_2
zerosize;;tabstrc--recurs-checkyes--9-1_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--9-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--9-1

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_3
dataread1;;tabstrc--recurs-tabbuff--9-1_3
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_3
dataread1;;tabstrc--recurs-tabbuff_read--9-1_3

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--9-1_3
goto;>tabstrc--recurs-checkno--9-1_3
zerosize;;tabstrc--recurs-checkyes--9-1_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--9-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--9-1

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_4
dataread1;;tabstrc--recurs-tabbuff--9-1_4
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_4
dataread1;;tabstrc--recurs-tabbuff_read--9-1_4

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--9-1_4
goto;>tabstrc--recurs-checkno--9-1_4
zerosize;;tabstrc--recurs-checkyes--9-1_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--9-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--9-1

setreg1;>tabstrc--adrbuff--9-1

datawrite1;>tabstrc--recurs-tabbuff--9-1_5
dataread1;;tabstrc--recurs-tabbuff--9-1_5
datawrite1;>tabstrc--recurs-tabbuff_read--9-1_5
dataread1;;tabstrc--recurs-tabbuff_read--9-1_5

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--9-1_5
goto;>tabstrc--recurs-checkno--9-1_5
zerosize;;tabstrc--recurs-checkyes--9-1_5
##set flag########
setreg1;>tabstrc--outbuff--9-1
datawrite1;>tabstrc--recurs-flag--9-1_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--9-1_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--9-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--9-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-9-3
goto;>goto--jumper-9-3
setreg1;>goto--jumper-9-3;goto--branch-9-3
s1push1
goto;>tools--label
zerosize;;goto--jumper-9-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-9-4
goto;>goto--jumper-9-4
dataread1;>@1;goto--branch-9-4
datawrite1;>validflg
zerosize;;goto--jumper-9-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--10-1
null;;tabstrc--adrbuff--10-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--10-1
null;;tabstrc--outbuff--10-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--10-1

datawrite1;>tabstrc--recurs-tabbuff--10-1_1
dataread1;;tabstrc--recurs-tabbuff--10-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--10-1_1
dataread1;;tabstrc--recurs-tabbuff_read--10-1_1

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--10-1_1
goto;>tabstrc--recurs-checkno--10-1_1
zerosize;;tabstrc--recurs-checkyes--10-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--10-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--10-1

setreg1;>tabstrc--adrbuff--10-1

datawrite1;>tabstrc--recurs-tabbuff--10-1_2
dataread1;;tabstrc--recurs-tabbuff--10-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--10-1_2
dataread1;;tabstrc--recurs-tabbuff_read--10-1_2

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--10-1_2
goto;>tabstrc--recurs-checkno--10-1_2
zerosize;;tabstrc--recurs-checkyes--10-1_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--10-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--10-1

setreg1;>tabstrc--adrbuff--10-1

datawrite1;>tabstrc--recurs-tabbuff--10-1_3
dataread1;;tabstrc--recurs-tabbuff--10-1_3
datawrite1;>tabstrc--recurs-tabbuff_read--10-1_3
dataread1;;tabstrc--recurs-tabbuff_read--10-1_3

setreg2;:y


gotoif;>tabstrc--recurs-checkyes--10-1_3
goto;>tabstrc--recurs-checkno--10-1_3
zerosize;;tabstrc--recurs-checkyes--10-1_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--10-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--10-1

setreg1;>tabstrc--adrbuff--10-1

datawrite1;>tabstrc--recurs-tabbuff--10-1_4
dataread1;;tabstrc--recurs-tabbuff--10-1_4
datawrite1;>tabstrc--recurs-tabbuff_read--10-1_4
dataread1;;tabstrc--recurs-tabbuff_read--10-1_4

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--10-1_4
goto;>tabstrc--recurs-checkno--10-1_4
zerosize;;tabstrc--recurs-checkyes--10-1_4
##set flag########
setreg1;>tabstrc--outbuff--10-1
datawrite1;>tabstrc--recurs-flag--10-1_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--10-1_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--10-1_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--10-1_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--10-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--10-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--10-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-10-3
goto;>goto--jumper-10-3
setreg1;>goto--jumper-10-3;goto--branch-10-3
s1push1
goto;>toys--label
zerosize;;goto--jumper-10-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-10-4
goto;>goto--jumper-10-4
dataread1;>@1;goto--branch-10-4
datawrite1;>validflg
zerosize;;goto--jumper-10-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--11-1
null;;tabstrc--adrbuff--11-1
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--11-1
null;;tabstrc--outbuff--11-1
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--11-1

datawrite1;>tabstrc--recurs-tabbuff--11-1_1
dataread1;;tabstrc--recurs-tabbuff--11-1_1
datawrite1;>tabstrc--recurs-tabbuff_read--11-1_1
dataread1;;tabstrc--recurs-tabbuff_read--11-1_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--11-1_1
goto;>tabstrc--recurs-checkno--11-1_1
zerosize;;tabstrc--recurs-checkyes--11-1_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--11-1
setreg2;+
add
datawrite1;>tabstrc--adrbuff--11-1

setreg1;>tabstrc--adrbuff--11-1

datawrite1;>tabstrc--recurs-tabbuff--11-1_2
dataread1;;tabstrc--recurs-tabbuff--11-1_2
datawrite1;>tabstrc--recurs-tabbuff_read--11-1_2
dataread1;;tabstrc--recurs-tabbuff_read--11-1_2

setreg2;:?


gotoif;>tabstrc--recurs-checkyes--11-1_2
goto;>tabstrc--recurs-checkno--11-1_2
zerosize;;tabstrc--recurs-checkyes--11-1_2
##set flag########
setreg1;>tabstrc--outbuff--11-1
datawrite1;>tabstrc--recurs-flag--11-1_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--11-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--11-1_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--11-1_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--11-1
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-11-3
goto;>goto--jumper-11-3
setreg1;>goto--jumper-11-3;goto--branch-11-3
s1push1
goto;>help_help--label
zerosize;;goto--jumper-11-3
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-11-4
goto;>goto--jumper-11-4
dataread1;>@1;goto--branch-11-4
datawrite1;>validflg
zerosize;;goto--jumper-11-4
#conditional subroutine goto
dataread1;>validflg
dataread2;>@0
gotoif;>goto--branch-12-0
goto;>goto--jumper-12-0
setreg1;>goto--jumper-12-0;goto--branch-12-0
s1push1
goto;>Errortext--label
zerosize;;goto--jumper-12-0
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#stop (shutdown vm)
stop
#label
zerosize;;Errortext--label
#prline
fopwri1;:P
fopwri1;:l
fopwri1;:e
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:`
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:/
fopwri1;:?
fopwri1;:`
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;help_help--label
#prline
fopwri1;:H
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:C
fopwri1;:a
fopwri1;:t
fopwri1;:e
fopwri1;:g
fopwri1;:o
fopwri1;:r
fopwri1;:i
fopwri1;:e
fopwri1;:s
fopwri1;::
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-22-0
s1push1
goto;>divider--label
zerosize;;goto--jumper-22-0
#prline
fopwri1;:/
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\n
#prline
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\n
#prline
fopwri1;:o
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:v
fopwri1;:i
fopwri1;:e
fopwri1;:w
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:o
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:v
fopwri1;:i
fopwri1;:e
fopwri1;:w
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:o
fopwri1;:o
fopwri1;:l
fopwri1;:s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:f
fopwri1;:u
fopwri1;:l
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:o
fopwri1;:l
fopwri1;:s
fopwri1;:\s
fopwri1;:&
fopwri1;:\s
fopwri1;:u
fopwri1;:t
fopwri1;:i
fopwri1;:l
fopwri1;:i
fopwri1;:t
fopwri1;:i
fopwri1;:e
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:o
fopwri1;:y
fopwri1;:s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:F
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;overview--label
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:O
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:v
fopwri1;:i
fopwri1;:e
fopwri1;:w
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-32-0
s1push1
goto;>divider--label
zerosize;;goto--jumper-32-0
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:-
fopwri1;:b
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:-
fopwri1;:s
fopwri1;:y
fopwri1;:s
fopwri1;:t
fopwri1;:e
fopwri1;:m
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:(
fopwri1;:n
fopwri1;:e
fopwri1;:e
fopwri1;:d
fopwri1;:s
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:)
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;tools--label
#prline
fopwri1;:T
fopwri1;:o
fopwri1;:o
fopwri1;:l
fopwri1;:s
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-39-0
s1push1
goto;>divider--label
zerosize;;goto--jumper-39-0
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:u
fopwri1;:t
fopwri1;:i
fopwri1;:l
fopwri1;:i
fopwri1;:t
fopwri1;:y
fopwri1;:.
fopwri1;:\s
fopwri1;:(
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:'
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:w
fopwri1;:.
fopwri1;:)
fopwri1;:\n
#prline
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:G
fopwri1;:T
fopwri1;:A
fopwri1;:\s
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:t
fopwri1;:i
fopwri1;:e
fopwri1;:s
fopwri1;:.
fopwri1;:\s
fopwri1;:i
fopwri1;:.
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:S
fopwri1;:c
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:M
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:c
fopwri1;:p
fopwri1;:c
fopwri1;:t
fopwri1;:r
fopwri1;:l
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:o
fopwri1;:l
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:C
fopwri1;:P
fopwri1;:U
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:o
fopwri1;:m
fopwri1;:\s
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:a
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:A
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;toys--label
#prline
fopwri1;:T
fopwri1;:o
fopwri1;:y
fopwri1;:s
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-48-0
s1push1
goto;>divider--label
zerosize;;goto--jumper-48-0
#prline
fopwri1;:s
fopwri1;:p
fopwri1;:l
fopwri1;:a
fopwri1;:s
fopwri1;:h
fopwri1;:\s
fopwri1;:-
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:n
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:\s
fopwri1;:g
fopwri1;:r
fopwri1;:a
fopwri1;:p
fopwri1;:h
fopwri1;:i
fopwri1;:c
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:s
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;divider--label
#Set text colors
dataread1;>*000000
iowrite1;>io.textcolor
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#Set text colors
dataread1;>*+0+---
iowrite1;>io.textcolor
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;command_txe_help--label
#prline
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-60-0
s1push1
goto;>divider--label
zerosize;;goto--jumper-60-0
#prline
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:[
fopwri1;:c
fopwri1;:m
fopwri1;:d
fopwri1;:]
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:a
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:r
fopwri1;:i
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:s
fopwri1;:o
fopwri1;:l
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:'
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\n
#prline
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:*
fopwri1;::
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:l
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:u
fopwri1;:r
fopwri1;:r
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:'
fopwri1;:A
fopwri1;::
fopwri1;:'
fopwri1;:\m
fopwri1;:\s
fopwri1;:'
fopwri1;:B
fopwri1;::
fopwri1;:'
fopwri1;:\m
fopwri1;:\s
fopwri1;:'
fopwri1;:R
fopwri1;::
fopwri1;:'
fopwri1;:)
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:-
fopwri1;:i
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:i
fopwri1;:t
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:m
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\n
#prline
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:\s
fopwri1;:<
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:>
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:C
fopwri1;:U
fopwri1;:R
fopwri1;:R
fopwri1;:E
fopwri1;:N
fopwri1;:T
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:a
fopwri1;:l
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:s
fopwri1;:p
fopwri1;:e
fopwri1;:c
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\s
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:n
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:m
fopwri1;:u
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:a
fopwri1;:r
fopwri1;:c
fopwri1;:h
fopwri1;:\s
fopwri1;:c
fopwri1;:u
fopwri1;:r
fopwri1;:r
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\m
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:a
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:s
fopwri1;:\m
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:-
fopwri1;:l
fopwri1;:o
fopwri1;:a
fopwri1;:d
fopwri1;:\n
#prline
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:t
fopwri1;:c
fopwri1;:h
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:*
fopwri1;::
fopwri1;:\b
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:r
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:*
fopwri1;:)
fopwri1;:\s
fopwri1;:e
fopwri1;:.
fopwri1;:g
fopwri1;:.
fopwri1;:\s
fopwri1;:A
fopwri1;::
fopwri1;:\b
fopwri1;:b
fopwri1;:o
fopwri1;:o
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:b
fopwri1;:o
fopwri1;:o
fopwri1;:t
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:A
fopwri1;::
fopwri1;:\n
#prline
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#module include: line 74-0: dosargs as dosargs
includeas;dosargs,dosargs
#END OF FILE
