#SSTNPL COMPILER v0.4.0
#header
head-rname=mode
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/tools/mode/mode.stnp
null;0;cmdflg
null;0;validflg
null;0;cmdx
null;0;quiet
null;10x0;@0
null;10x1;@1
null;10x0;$false
null;10x30;@30
null;10x31;@31
#goto (extra code stores away return address.)
setreg1;>goto--jumper-5
s1push1
goto;>dosargs.getentry--label
zerosize;;goto--jumper-5
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--8
null;;tabstrc--adrbuff--8
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--8
null;;tabstrc--outbuff--8
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--8

datawrite1;>tabstrc--recurs-tabbuff--8_1
dataread1;;tabstrc--recurs-tabbuff--8_1
datawrite1;>tabstrc--recurs-tabbuff_read--8_1
dataread1;;tabstrc--recurs-tabbuff_read--8_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--8_1
goto;>tabstrc--recurs-checkno--8_1
zerosize;;tabstrc--recurs-checkyes--8_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8
setreg2;+
add
datawrite1;>tabstrc--adrbuff--8

setreg1;>tabstrc--adrbuff--8

datawrite1;>tabstrc--recurs-tabbuff--8_2
dataread1;;tabstrc--recurs-tabbuff--8_2
datawrite1;>tabstrc--recurs-tabbuff_read--8_2
dataread1;;tabstrc--recurs-tabbuff_read--8_2

setreg2;:Q


gotoif;>tabstrc--recurs-checkyes--8_2
goto;>tabstrc--recurs-checkno--8_2
zerosize;;tabstrc--recurs-checkyes--8_2
##set flag########
setreg1;>tabstrc--outbuff--8
datawrite1;>tabstrc--recurs-flag--8_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--8_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--8
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-10
goto;>goto--branch-10
goto;>flow--con-x-1;goto--branch-10

zerosize;;goto--jumper-10
#val (used with set to change variable value during runtime.)
setreg1;10x3
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdx
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>quiet
zerosize;;flow--con-x-1
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--17
null;;tabstrc--adrbuff--17
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--17
null;;tabstrc--outbuff--17
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--17

datawrite1;>tabstrc--recurs-tabbuff--17_1
dataread1;;tabstrc--recurs-tabbuff--17_1
datawrite1;>tabstrc--recurs-tabbuff_read--17_1
dataread1;;tabstrc--recurs-tabbuff_read--17_1

setreg2;:g


gotoif;>tabstrc--recurs-checkyes--17_1
goto;>tabstrc--recurs-checkno--17_1
zerosize;;tabstrc--recurs-checkyes--17_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17
setreg2;+
add
datawrite1;>tabstrc--adrbuff--17

setreg1;>tabstrc--adrbuff--17

datawrite1;>tabstrc--recurs-tabbuff--17_2
dataread1;;tabstrc--recurs-tabbuff--17_2
datawrite1;>tabstrc--recurs-tabbuff_read--17_2
dataread1;;tabstrc--recurs-tabbuff_read--17_2

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--17_2
goto;>tabstrc--recurs-checkno--17_2
zerosize;;tabstrc--recurs-checkyes--17_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17
setreg2;+
add
datawrite1;>tabstrc--adrbuff--17

setreg1;>tabstrc--adrbuff--17

datawrite1;>tabstrc--recurs-tabbuff--17_3
dataread1;;tabstrc--recurs-tabbuff--17_3
datawrite1;>tabstrc--recurs-tabbuff_read--17_3
dataread1;;tabstrc--recurs-tabbuff_read--17_3

setreg2;:0


gotoif;>tabstrc--recurs-checkyes--17_3
goto;>tabstrc--recurs-checkno--17_3
zerosize;;tabstrc--recurs-checkyes--17_3
##set flag########
setreg1;>tabstrc--outbuff--17
datawrite1;>tabstrc--recurs-flag--17_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--17_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--17
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-19
goto;>goto--branch-19
goto;>flow--con-x-2;goto--branch-19

zerosize;;goto--jumper-19
#Set SBTGA mode
dataread1;>@0
iowrite1;>ga.mode
#conditional flow control begin
dataread1;>quiet
dataread2;>$false
gotoif;>goto--jumper-21
goto;>goto--branch-21
goto;>flow--con-x-3;goto--branch-21

zerosize;;goto--jumper-21
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:M
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:0
fopwri1;::
fopwri1;:\s
fopwri1;:8
fopwri1;:1
fopwri1;:x
fopwri1;:2
fopwri1;:5
fopwri1;:\s
fopwri1;:T
fopwri1;:T
fopwri1;:Y
fopwri1;:\n
zerosize;;flow--con-x-3
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-2
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--27
null;;tabstrc--adrbuff--27
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--27
null;;tabstrc--outbuff--27
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--27

datawrite1;>tabstrc--recurs-tabbuff--27_1
dataread1;;tabstrc--recurs-tabbuff--27_1
datawrite1;>tabstrc--recurs-tabbuff_read--27_1
dataread1;;tabstrc--recurs-tabbuff_read--27_1

setreg2;:g


gotoif;>tabstrc--recurs-checkyes--27_1
goto;>tabstrc--recurs-checkno--27_1
zerosize;;tabstrc--recurs-checkyes--27_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--27
setreg2;+
add
datawrite1;>tabstrc--adrbuff--27

setreg1;>tabstrc--adrbuff--27

datawrite1;>tabstrc--recurs-tabbuff--27_2
dataread1;;tabstrc--recurs-tabbuff--27_2
datawrite1;>tabstrc--recurs-tabbuff_read--27_2
dataread1;;tabstrc--recurs-tabbuff_read--27_2

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--27_2
goto;>tabstrc--recurs-checkno--27_2
zerosize;;tabstrc--recurs-checkyes--27_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--27
setreg2;+
add
datawrite1;>tabstrc--adrbuff--27

setreg1;>tabstrc--adrbuff--27

datawrite1;>tabstrc--recurs-tabbuff--27_3
dataread1;;tabstrc--recurs-tabbuff--27_3
datawrite1;>tabstrc--recurs-tabbuff_read--27_3
dataread1;;tabstrc--recurs-tabbuff_read--27_3

setreg2;:3


gotoif;>tabstrc--recurs-checkyes--27_3
goto;>tabstrc--recurs-checkno--27_3
zerosize;;tabstrc--recurs-checkyes--27_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--27
setreg2;+
add
datawrite1;>tabstrc--adrbuff--27

setreg1;>tabstrc--adrbuff--27

datawrite1;>tabstrc--recurs-tabbuff--27_4
dataread1;;tabstrc--recurs-tabbuff--27_4
datawrite1;>tabstrc--recurs-tabbuff_read--27_4
dataread1;;tabstrc--recurs-tabbuff_read--27_4

setreg2;:0


gotoif;>tabstrc--recurs-checkyes--27_4
goto;>tabstrc--recurs-checkno--27_4
zerosize;;tabstrc--recurs-checkyes--27_4
##set flag########
setreg1;>tabstrc--outbuff--27
datawrite1;>tabstrc--recurs-flag--27_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--27_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--27_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--27_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--27_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--27_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--27
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-29
goto;>goto--branch-29
goto;>flow--con-x-4;goto--branch-29

zerosize;;goto--jumper-29
#Set SBTGA mode
dataread1;>@30
iowrite1;>ga.mode
#conditional flow control begin
dataread1;>quiet
dataread2;>$false
gotoif;>goto--jumper-31
goto;>goto--branch-31
goto;>flow--con-x-5;goto--branch-31

zerosize;;goto--jumper-31
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:M
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:3
fopwri1;:0
fopwri1;::
fopwri1;:\s
fopwri1;:2
fopwri1;:4
fopwri1;:3
fopwri1;:x
fopwri1;:2
fopwri1;:4
fopwri1;:3
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:P
fopwri1;:l
fopwri1;:o
fopwri1;:t
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\n
zerosize;;flow--con-x-5
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--37
null;;tabstrc--adrbuff--37
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--37
null;;tabstrc--outbuff--37
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--37

datawrite1;>tabstrc--recurs-tabbuff--37_1
dataread1;;tabstrc--recurs-tabbuff--37_1
datawrite1;>tabstrc--recurs-tabbuff_read--37_1
dataread1;;tabstrc--recurs-tabbuff_read--37_1

setreg2;:g


gotoif;>tabstrc--recurs-checkyes--37_1
goto;>tabstrc--recurs-checkno--37_1
zerosize;;tabstrc--recurs-checkyes--37_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--37
setreg2;+
add
datawrite1;>tabstrc--adrbuff--37

setreg1;>tabstrc--adrbuff--37

datawrite1;>tabstrc--recurs-tabbuff--37_2
dataread1;;tabstrc--recurs-tabbuff--37_2
datawrite1;>tabstrc--recurs-tabbuff_read--37_2
dataread1;;tabstrc--recurs-tabbuff_read--37_2

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--37_2
goto;>tabstrc--recurs-checkno--37_2
zerosize;;tabstrc--recurs-checkyes--37_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--37
setreg2;+
add
datawrite1;>tabstrc--adrbuff--37

setreg1;>tabstrc--adrbuff--37

datawrite1;>tabstrc--recurs-tabbuff--37_3
dataread1;;tabstrc--recurs-tabbuff--37_3
datawrite1;>tabstrc--recurs-tabbuff_read--37_3
dataread1;;tabstrc--recurs-tabbuff_read--37_3

setreg2;:3


gotoif;>tabstrc--recurs-checkyes--37_3
goto;>tabstrc--recurs-checkno--37_3
zerosize;;tabstrc--recurs-checkyes--37_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--37
setreg2;+
add
datawrite1;>tabstrc--adrbuff--37

setreg1;>tabstrc--adrbuff--37

datawrite1;>tabstrc--recurs-tabbuff--37_4
dataread1;;tabstrc--recurs-tabbuff--37_4
datawrite1;>tabstrc--recurs-tabbuff_read--37_4
dataread1;;tabstrc--recurs-tabbuff_read--37_4

setreg2;:1


gotoif;>tabstrc--recurs-checkyes--37_4
goto;>tabstrc--recurs-checkno--37_4
zerosize;;tabstrc--recurs-checkyes--37_4
##set flag########
setreg1;>tabstrc--outbuff--37
datawrite1;>tabstrc--recurs-flag--37_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--37_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--37_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--37_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--37_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--37_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--37
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-39
goto;>goto--branch-39
goto;>flow--con-x-6;goto--branch-39

zerosize;;goto--jumper-39
#Set SBTGA mode
dataread1;>@31
iowrite1;>ga.mode
#conditional flow control begin
dataread1;>quiet
dataread2;>$false
gotoif;>goto--jumper-41
goto;>goto--branch-41
goto;>flow--con-x-7;goto--branch-41

zerosize;;goto--jumper-41
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:M
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:3
fopwri1;:1
fopwri1;::
fopwri1;:\s
fopwri1;:5
fopwri1;:7
fopwri1;:5
fopwri1;:x
fopwri1;:5
fopwri1;:7
fopwri1;:5
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:P
fopwri1;:l
fopwri1;:o
fopwri1;:t
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\n
zerosize;;flow--con-x-7
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-6
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--47
null;;tabstrc--adrbuff--47
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--47
null;;tabstrc--outbuff--47
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--47

datawrite1;>tabstrc--recurs-tabbuff--47_1
dataread1;;tabstrc--recurs-tabbuff--47_1
datawrite1;>tabstrc--recurs-tabbuff_read--47_1
dataread1;;tabstrc--recurs-tabbuff_read--47_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--47_1
goto;>tabstrc--recurs-checkno--47_1
zerosize;;tabstrc--recurs-checkyes--47_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--47
setreg2;+
add
datawrite1;>tabstrc--adrbuff--47

setreg1;>tabstrc--adrbuff--47

datawrite1;>tabstrc--recurs-tabbuff--47_2
dataread1;;tabstrc--recurs-tabbuff--47_2
datawrite1;>tabstrc--recurs-tabbuff_read--47_2
dataread1;;tabstrc--recurs-tabbuff_read--47_2

setreg2;:?


gotoif;>tabstrc--recurs-checkyes--47_2
goto;>tabstrc--recurs-checkno--47_2
zerosize;;tabstrc--recurs-checkyes--47_2
##set flag########
setreg1;>tabstrc--outbuff--47
datawrite1;>tabstrc--recurs-flag--47_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--47_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--47_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--47_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--47
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-49
goto;>goto--jumper-49
setreg1;>goto--jumper-49;goto--branch-49
s1push1
goto;>mode_help--label
zerosize;;goto--jumper-49
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-50
goto;>goto--jumper-50
dataread1;>@1;goto--branch-50
datawrite1;>validflg
zerosize;;goto--jumper-50
#conditional subroutine goto
dataread1;>validflg
dataread2;>@0
gotoif;>goto--branch-53
goto;>goto--jumper-53
setreg1;>goto--jumper-53;goto--branch-53
s1push1
goto;>Errortext--label
zerosize;;goto--jumper-53
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#stop (shutdown vm)
stop
#label
zerosize;;Errortext--label
#prline
fopwri1;:P
fopwri1;:l
fopwri1;:e
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:`
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:/
fopwri1;:?
fopwri1;:`
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;mode_help--label
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:M
fopwri1;:O
fopwri1;:D
fopwri1;:E
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:s
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:t
fopwri1;:i
fopwri1;:e
fopwri1;:s
fopwri1;:.
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#prline
fopwri1;:U
fopwri1;:S
fopwri1;:A
fopwri1;:G
fopwri1;:E
fopwri1;::
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:[
fopwri1;:/
fopwri1;:Q
fopwri1;:]
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\n
#prline
fopwri1;:g
fopwri1;:a
fopwri1;:0
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:p
fopwri1;:l
fopwri1;:a
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:8
fopwri1;:1
fopwri1;:x
fopwri1;:2
fopwri1;:5
fopwri1;:\s
fopwri1;:T
fopwri1;:T
fopwri1;:Y
fopwri1;:\n
#prline
fopwri1;:g
fopwri1;:a
fopwri1;:3
fopwri1;:0
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:p
fopwri1;:l
fopwri1;:a
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:2
fopwri1;:4
fopwri1;:3
fopwri1;:x
fopwri1;:2
fopwri1;:4
fopwri1;:3
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:P
fopwri1;:l
fopwri1;:o
fopwri1;:t
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:g
fopwri1;:a
fopwri1;:3
fopwri1;:1
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:p
fopwri1;:l
fopwri1;:a
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:5
fopwri1;:7
fopwri1;:5
fopwri1;:x
fopwri1;:5
fopwri1;:7
fopwri1;:5
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:P
fopwri1;:l
fopwri1;:o
fopwri1;:t
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:/
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:\n
#prline
fopwri1;:/
fopwri1;:Q
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:a
fopwri1;:b
fopwri1;:o
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:s
fopwri1;:u
fopwri1;:p
fopwri1;:p
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:e
fopwri1;:\s
fopwri1;:c
fopwri1;:h
fopwri1;:a
fopwri1;:n
fopwri1;:g
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#module include: line 71: dosargs as dosargs
includeas;dosargs,dosargs
#END OF FILE
