#SSTNPL COMPILER v0.4.0
#header
head-rname=cpctrl
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/tools/cpctrl/cpctrl.stnp
null;0;cmdflg
null;0;validflg
null;0;cmdx
null;0;status
null;10x0;@0
null;10x1;@1
null;10x1;$true
null;10x0;$false
#goto (extra code stores away return address.)
setreg1;>goto--jumper-5-0
s1push1
goto;>dosargs.getentry--label
zerosize;;goto--jumper-5-0
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--8-0
null;;tabstrc--adrbuff--8-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--8-0
null;;tabstrc--outbuff--8-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--8-0

datawrite1;>tabstrc--recurs-tabbuff--8-0_1
dataread1;;tabstrc--recurs-tabbuff--8-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--8-0_1
dataread1;;tabstrc--recurs-tabbuff_read--8-0_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--8-0_1
goto;>tabstrc--recurs-checkno--8-0_1
zerosize;;tabstrc--recurs-checkyes--8-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-0
adddata1;+
datawrite1;>tabstrc--adrbuff--8-0

setreg1;>tabstrc--adrbuff--8-0

datawrite1;>tabstrc--recurs-tabbuff--8-0_2
dataread1;;tabstrc--recurs-tabbuff--8-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--8-0_2
dataread1;;tabstrc--recurs-tabbuff_read--8-0_2

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--8-0_2
goto;>tabstrc--recurs-checkno--8-0_2
zerosize;;tabstrc--recurs-checkyes--8-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-0
adddata1;+
datawrite1;>tabstrc--adrbuff--8-0

setreg1;>tabstrc--adrbuff--8-0

datawrite1;>tabstrc--recurs-tabbuff--8-0_3
dataread1;;tabstrc--recurs-tabbuff--8-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--8-0_3
dataread1;;tabstrc--recurs-tabbuff_read--8-0_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--8-0_3
goto;>tabstrc--recurs-checkno--8-0_3
zerosize;;tabstrc--recurs-checkyes--8-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--8-0
adddata1;+
datawrite1;>tabstrc--adrbuff--8-0

setreg1;>tabstrc--adrbuff--8-0

datawrite1;>tabstrc--recurs-tabbuff--8-0_4
dataread1;;tabstrc--recurs-tabbuff--8-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--8-0_4
dataread1;;tabstrc--recurs-tabbuff_read--8-0_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--8-0_4
goto;>tabstrc--recurs-checkno--8-0_4
zerosize;;tabstrc--recurs-checkyes--8-0_4
##set flag########
setreg1;>tabstrc--outbuff--8-0
datawrite1;>tabstrc--recurs-flag--8-0_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--8-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--8-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--8-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-10-0
goto;>goto--branch-10-0
goto;>flow--con-x-1;goto--branch-10-0

zerosize;;goto--jumper-10-0
zerosize;;flow--con-x-1--start
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #11-0
setreg1;10x1#SSTNPL Source Line: '11-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #12-0
iowrite1;>cocpu.status#SSTNPL Source Line: '12-0' 
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:H
fopwri1;:a
fopwri1;:l
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:.
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-1
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--17-0
null;;tabstrc--adrbuff--17-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--17-0
null;;tabstrc--outbuff--17-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--17-0

datawrite1;>tabstrc--recurs-tabbuff--17-0_1
dataread1;;tabstrc--recurs-tabbuff--17-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--17-0_1
dataread1;;tabstrc--recurs-tabbuff_read--17-0_1

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--17-0_1
goto;>tabstrc--recurs-checkno--17-0_1
zerosize;;tabstrc--recurs-checkyes--17-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17-0
adddata1;+
datawrite1;>tabstrc--adrbuff--17-0

setreg1;>tabstrc--adrbuff--17-0

datawrite1;>tabstrc--recurs-tabbuff--17-0_2
dataread1;;tabstrc--recurs-tabbuff--17-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--17-0_2
dataread1;;tabstrc--recurs-tabbuff_read--17-0_2

setreg2;:n


gotoif;>tabstrc--recurs-checkyes--17-0_2
goto;>tabstrc--recurs-checkno--17-0_2
zerosize;;tabstrc--recurs-checkyes--17-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17-0
adddata1;+
datawrite1;>tabstrc--adrbuff--17-0

setreg1;>tabstrc--adrbuff--17-0

datawrite1;>tabstrc--recurs-tabbuff--17-0_3
dataread1;;tabstrc--recurs-tabbuff--17-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--17-0_3
dataread1;;tabstrc--recurs-tabbuff_read--17-0_3

setreg2;:g


gotoif;>tabstrc--recurs-checkyes--17-0_3
goto;>tabstrc--recurs-checkno--17-0_3
zerosize;;tabstrc--recurs-checkyes--17-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17-0
adddata1;+
datawrite1;>tabstrc--adrbuff--17-0

setreg1;>tabstrc--adrbuff--17-0

datawrite1;>tabstrc--recurs-tabbuff--17-0_4
dataread1;;tabstrc--recurs-tabbuff--17-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--17-0_4
dataread1;;tabstrc--recurs-tabbuff_read--17-0_4

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--17-0_4
goto;>tabstrc--recurs-checkno--17-0_4
zerosize;;tabstrc--recurs-checkyes--17-0_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17-0
adddata1;+
datawrite1;>tabstrc--adrbuff--17-0

setreg1;>tabstrc--adrbuff--17-0

datawrite1;>tabstrc--recurs-tabbuff--17-0_5
dataread1;;tabstrc--recurs-tabbuff--17-0_5
datawrite1;>tabstrc--recurs-tabbuff_read--17-0_5
dataread1;;tabstrc--recurs-tabbuff_read--17-0_5

setreg2;:g


gotoif;>tabstrc--recurs-checkyes--17-0_5
goto;>tabstrc--recurs-checkno--17-0_5
zerosize;;tabstrc--recurs-checkyes--17-0_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--17-0
adddata1;+
datawrite1;>tabstrc--adrbuff--17-0

setreg1;>tabstrc--adrbuff--17-0

datawrite1;>tabstrc--recurs-tabbuff--17-0_6
dataread1;;tabstrc--recurs-tabbuff--17-0_6
datawrite1;>tabstrc--recurs-tabbuff_read--17-0_6
dataread1;;tabstrc--recurs-tabbuff_read--17-0_6

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--17-0_6
goto;>tabstrc--recurs-checkno--17-0_6
zerosize;;tabstrc--recurs-checkyes--17-0_6
##set flag########
setreg1;>tabstrc--outbuff--17-0
datawrite1;>tabstrc--recurs-flag--17-0_6
setreg1;+
datawrite1;;tabstrc--recurs-flag--17-0_6
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17-0_6
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17-0_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--17-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--17-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-19-0
goto;>goto--branch-19-0
goto;>flow--con-x-2;goto--branch-19-0

zerosize;;goto--jumper-19-0
zerosize;;flow--con-x-2--start
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #20-0
setreg1;10x0#SSTNPL Source Line: '20-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #21-0
iowrite1;>cocpu.status#SSTNPL Source Line: '21-0' 
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:E
fopwri1;:n
fopwri1;:g
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:d
fopwri1;:.
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-2
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--26-0
null;;tabstrc--adrbuff--26-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--26-0
null;;tabstrc--outbuff--26-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--26-0

datawrite1;>tabstrc--recurs-tabbuff--26-0_1
dataread1;;tabstrc--recurs-tabbuff--26-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--26-0_1
dataread1;;tabstrc--recurs-tabbuff_read--26-0_1

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--26-0_1
goto;>tabstrc--recurs-checkno--26-0_1
zerosize;;tabstrc--recurs-checkyes--26-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--26-0
adddata1;+
datawrite1;>tabstrc--adrbuff--26-0

setreg1;>tabstrc--adrbuff--26-0

datawrite1;>tabstrc--recurs-tabbuff--26-0_2
dataread1;;tabstrc--recurs-tabbuff--26-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--26-0_2
dataread1;;tabstrc--recurs-tabbuff_read--26-0_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--26-0_2
goto;>tabstrc--recurs-checkno--26-0_2
zerosize;;tabstrc--recurs-checkyes--26-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--26-0
adddata1;+
datawrite1;>tabstrc--adrbuff--26-0

setreg1;>tabstrc--adrbuff--26-0

datawrite1;>tabstrc--recurs-tabbuff--26-0_3
dataread1;;tabstrc--recurs-tabbuff--26-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--26-0_3
dataread1;;tabstrc--recurs-tabbuff_read--26-0_3

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--26-0_3
goto;>tabstrc--recurs-checkno--26-0_3
zerosize;;tabstrc--recurs-checkyes--26-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--26-0
adddata1;+
datawrite1;>tabstrc--adrbuff--26-0

setreg1;>tabstrc--adrbuff--26-0

datawrite1;>tabstrc--recurs-tabbuff--26-0_4
dataread1;;tabstrc--recurs-tabbuff--26-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--26-0_4
dataread1;;tabstrc--recurs-tabbuff_read--26-0_4

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--26-0_4
goto;>tabstrc--recurs-checkno--26-0_4
zerosize;;tabstrc--recurs-checkyes--26-0_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--26-0
adddata1;+
datawrite1;>tabstrc--adrbuff--26-0

setreg1;>tabstrc--adrbuff--26-0

datawrite1;>tabstrc--recurs-tabbuff--26-0_5
dataread1;;tabstrc--recurs-tabbuff--26-0_5
datawrite1;>tabstrc--recurs-tabbuff_read--26-0_5
dataread1;;tabstrc--recurs-tabbuff_read--26-0_5

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--26-0_5
goto;>tabstrc--recurs-checkno--26-0_5
zerosize;;tabstrc--recurs-checkyes--26-0_5
##set flag########
setreg1;>tabstrc--outbuff--26-0
datawrite1;>tabstrc--recurs-flag--26-0_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--26-0_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--26-0_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--26-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--26-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--26-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--26-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--26-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-28-0
goto;>goto--branch-28-0
goto;>flow--con-x-3;goto--branch-28-0

zerosize;;goto--jumper-28-0
zerosize;;flow--con-x-3--start
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #29-0
setreg1;10x0#SSTNPL Source Line: '29-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #30-0
iowrite1;>cocpu.reset#SSTNPL Source Line: '30-0' 
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:R
fopwri1;:e
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-3
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>cmdx
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--35-0
null;;tabstrc--adrbuff--35-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--35-0
null;;tabstrc--outbuff--35-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--35-0

datawrite1;>tabstrc--recurs-tabbuff--35-0_1
dataread1;;tabstrc--recurs-tabbuff--35-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--35-0_1
dataread1;;tabstrc--recurs-tabbuff_read--35-0_1

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--35-0_1
goto;>tabstrc--recurs-checkno--35-0_1
zerosize;;tabstrc--recurs-checkyes--35-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--35-0
adddata1;+
datawrite1;>tabstrc--adrbuff--35-0

setreg1;>tabstrc--adrbuff--35-0

datawrite1;>tabstrc--recurs-tabbuff--35-0_2
dataread1;;tabstrc--recurs-tabbuff--35-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--35-0_2
dataread1;;tabstrc--recurs-tabbuff_read--35-0_2

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--35-0_2
goto;>tabstrc--recurs-checkno--35-0_2
zerosize;;tabstrc--recurs-checkyes--35-0_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--35-0
adddata1;+
datawrite1;>tabstrc--adrbuff--35-0

setreg1;>tabstrc--adrbuff--35-0

datawrite1;>tabstrc--recurs-tabbuff--35-0_3
dataread1;;tabstrc--recurs-tabbuff--35-0_3
datawrite1;>tabstrc--recurs-tabbuff_read--35-0_3
dataread1;;tabstrc--recurs-tabbuff_read--35-0_3

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--35-0_3
goto;>tabstrc--recurs-checkno--35-0_3
zerosize;;tabstrc--recurs-checkyes--35-0_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--35-0
adddata1;+
datawrite1;>tabstrc--adrbuff--35-0

setreg1;>tabstrc--adrbuff--35-0

datawrite1;>tabstrc--recurs-tabbuff--35-0_4
dataread1;;tabstrc--recurs-tabbuff--35-0_4
datawrite1;>tabstrc--recurs-tabbuff_read--35-0_4
dataread1;;tabstrc--recurs-tabbuff_read--35-0_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--35-0_4
goto;>tabstrc--recurs-checkno--35-0_4
zerosize;;tabstrc--recurs-checkyes--35-0_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--35-0
adddata1;+
datawrite1;>tabstrc--adrbuff--35-0

setreg1;>tabstrc--adrbuff--35-0

datawrite1;>tabstrc--recurs-tabbuff--35-0_5
dataread1;;tabstrc--recurs-tabbuff--35-0_5
datawrite1;>tabstrc--recurs-tabbuff_read--35-0_5
dataread1;;tabstrc--recurs-tabbuff_read--35-0_5

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--35-0_5
goto;>tabstrc--recurs-checkno--35-0_5
zerosize;;tabstrc--recurs-checkyes--35-0_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--35-0
adddata1;+
datawrite1;>tabstrc--adrbuff--35-0

setreg1;>tabstrc--adrbuff--35-0

datawrite1;>tabstrc--recurs-tabbuff--35-0_6
dataread1;;tabstrc--recurs-tabbuff--35-0_6
datawrite1;>tabstrc--recurs-tabbuff_read--35-0_6
dataread1;;tabstrc--recurs-tabbuff_read--35-0_6

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--35-0_6
goto;>tabstrc--recurs-checkno--35-0_6
zerosize;;tabstrc--recurs-checkyes--35-0_6
##set flag########
setreg1;>tabstrc--outbuff--35-0
datawrite1;>tabstrc--recurs-flag--35-0_6
setreg1;+
datawrite1;;tabstrc--recurs-flag--35-0_6
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--35-0_6
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--35-0_5
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--35-0_4
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--35-0_3
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--35-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--35-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--35-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional flow control begin
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--jumper-37-0
goto;>goto--branch-37-0
goto;>flow--con-x-4;goto--branch-37-0

zerosize;;goto--jumper-37-0
zerosize;;flow--con-x-4--start
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #38-0
ioread1;>cocpu.status#SSTNPL Source Line: '38-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>status
#conditional flow control begin
dataread1;>status
dataread2;>$true
gotoif;>goto--jumper-40-0
goto;>goto--branch-40-0
goto;>flow--con-x-5;goto--branch-40-0

zerosize;;goto--jumper-40-0
zerosize;;flow--con-x-5--start
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:I
fopwri1;:s
fopwri1;:\s
fopwri1;:H
fopwri1;:a
fopwri1;:l
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:.
fopwri1;:\n
zerosize;;flow--con-x-5
#conditional flow control begin
dataread1;>status
dataread2;>$false
gotoif;>goto--jumper-43-0
goto;>goto--branch-43-0
goto;>flow--con-x-6;goto--branch-43-0

zerosize;;goto--jumper-43-0
zerosize;;flow--con-x-6--start
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:I
fopwri1;:s
fopwri1;:\s
fopwri1;:E
fopwri1;:n
fopwri1;:g
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:d
fopwri1;:.
fopwri1;:\n
zerosize;;flow--con-x-6
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
zerosize;;flow--con-x-4
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
adddata1;>dosargs.buffer--table
datawrite1;>tabstrc--adrbuff--49-0
null;;tabstrc--adrbuff--49-0
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--49-0
null;;tabstrc--outbuff--49-0
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--49-0

datawrite1;>tabstrc--recurs-tabbuff--49-0_1
dataread1;;tabstrc--recurs-tabbuff--49-0_1
datawrite1;>tabstrc--recurs-tabbuff_read--49-0_1
dataread1;;tabstrc--recurs-tabbuff_read--49-0_1

setreg2;:/


gotoif;>tabstrc--recurs-checkyes--49-0_1
goto;>tabstrc--recurs-checkno--49-0_1
zerosize;;tabstrc--recurs-checkyes--49-0_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49-0
adddata1;+
datawrite1;>tabstrc--adrbuff--49-0

setreg1;>tabstrc--adrbuff--49-0

datawrite1;>tabstrc--recurs-tabbuff--49-0_2
dataread1;;tabstrc--recurs-tabbuff--49-0_2
datawrite1;>tabstrc--recurs-tabbuff_read--49-0_2
dataread1;;tabstrc--recurs-tabbuff_read--49-0_2

setreg2;:?


gotoif;>tabstrc--recurs-checkyes--49-0_2
goto;>tabstrc--recurs-checkno--49-0_2
zerosize;;tabstrc--recurs-checkyes--49-0_2
##set flag########
setreg1;>tabstrc--outbuff--49-0
datawrite1;>tabstrc--recurs-flag--49-0_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--49-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--49-0_2
#recursionskip endpoint
zerosize;;tabstrc--recurs-checkno--49-0_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--49-0
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-51-0
goto;>goto--jumper-51-0
setreg1;>goto--jumper-51-0;goto--branch-51-0
s1push1
goto;>cpctrl_help--label
zerosize;;goto--jumper-51-0
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-52-0
goto;>goto--jumper-52-0
dataread1;>@1;goto--branch-52-0
datawrite1;>validflg
zerosize;;goto--jumper-52-0
#conditional subroutine goto
dataread1;>validflg
dataread2;>@0
gotoif;>goto--branch-55-0
goto;>goto--jumper-55-0
setreg1;>goto--jumper-55-0;goto--branch-55-0
s1push1
goto;>Errortext--label
zerosize;;goto--jumper-55-0
#goto (extra code stores away return address.)
setreg1;>goto--jumper-56-0
s1push1
goto;>dos.exit--label
zerosize;;goto--jumper-56-0
#label
zerosize;;Errortext--label
#prline
fopwri1;:P
fopwri1;:l
fopwri1;:e
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:`
fopwri1;:c
fopwri1;:p
fopwri1;:c
fopwri1;:t
fopwri1;:r
fopwri1;:l
fopwri1;:\s
fopwri1;:/
fopwri1;:?
fopwri1;:`
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;cpctrl_help--label
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:c
fopwri1;:p
fopwri1;:c
fopwri1;:t
fopwri1;:r
fopwri1;:l
fopwri1;::
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:l
fopwri1;:s
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:G
fopwri1;:A
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:o
fopwri1;:m
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:.
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#prline
fopwri1;:U
fopwri1;:S
fopwri1;:A
fopwri1;:G
fopwri1;:E
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:c
fopwri1;:p
fopwri1;:c
fopwri1;:t
fopwri1;:r
fopwri1;:l
fopwri1;:\s
fopwri1;:[
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:]
fopwri1;:\n
#prline
fopwri1;:s
fopwri1;:t
fopwri1;:a
fopwri1;:t
fopwri1;:u
fopwri1;:s
fopwri1;::
fopwri1;:\s
fopwri1;:g
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:S
fopwri1;:t
fopwri1;:a
fopwri1;:t
fopwri1;:u
fopwri1;:s
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:a
fopwri1;:l
fopwri1;:t
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:h
fopwri1;:a
fopwri1;:l
fopwri1;:t
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:a
fopwri1;:g
fopwri1;:e
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:r
fopwri1;:o
fopwri1;:c
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:/
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#module include: line 73-0: dosargs as dosargs
includeas;dosargs,dosargs
#module include: line 74-0: doslib as dos
includeas;doslib,dos
#END OF FILE
