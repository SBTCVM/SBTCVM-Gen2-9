#SSTNPL COMPILER v0.3.0
#header
head-rname=auto_main
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/auto_main.stnp
null;0;cmdflg
null;0;validflg
null;++0---;*++0---
null;0+0---;*0+0---
null;+++---;*+++---
null;10x0;@0
null;10x1;@1
null;0;vdi_vdioutput_buffer
null;10x0;vdi_iter
null;10x4;@4
null;+++--0;*+++--0
null;+++0--;*+++0--
null;+++00-;*+++00-
null;+++-0-;*+++-0-
null;+++-00;*+++-00
null;+++0-0;*+++0-0
null;0++---;*0++---
#val (used with set to change variable value during runtime.)
setreg1;10x70
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.max
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #3
head-nspout=1#SSTNPL Source Line: '3' 
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.clearbuffer
#goto (extra code stores away return address.)
setreg1;>goto--jumper-11
s1push1
goto;>bigsplash--label
null;;goto--jumper-11
#goto (extra code stores away return address.)
setreg1;>goto--jumper-12
s1push1
goto;>splash--label
null;;goto--jumper-12
#Set text colors
dataread1;>*++0---
iowrite1;>io.textcolor
#prline
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:\s
fopwri1;:[
fopwri1;:P
fopwri1;:R
fopwri1;:O
fopwri1;:T
fopwri1;:O
fopwri1;:T
fopwri1;:Y
fopwri1;:P
fopwri1;:E
fopwri1;:]
fopwri1;:\n
#prline
fopwri1;:T
fopwri1;:y
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:.
fopwri1;:\n
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#label
null;;main--label
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print
fopwri1;:0
fopwri1;:/
fopwri1;:>
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#goto (extra code stores away return address.)
setreg1;>goto--jumper-22
s1push1
goto;>cp.getentry--label
null;;goto--jumper-22
#print newline
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--28
null;;tabstrc--adrbuff--28
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--28
null;;tabstrc--outbuff--28
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--28

datawrite1;>tabstrc--recurs-tabbuff--28_1
dataread1;;tabstrc--recurs-tabbuff--28_1
datawrite1;>tabstrc--recurs-tabbuff_read--28_1
dataread1;;tabstrc--recurs-tabbuff_read--28_1

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--28_1
goto;>tabstrc--recurs-checkno--28_1
null;;tabstrc--recurs-checkyes--28_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--28
setreg2;+
add
datawrite1;>tabstrc--adrbuff--28

setreg1;>tabstrc--adrbuff--28

datawrite1;>tabstrc--recurs-tabbuff--28_2
dataread1;;tabstrc--recurs-tabbuff--28_2
datawrite1;>tabstrc--recurs-tabbuff_read--28_2
dataread1;;tabstrc--recurs-tabbuff_read--28_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--28_2
goto;>tabstrc--recurs-checkno--28_2
null;;tabstrc--recurs-checkyes--28_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--28
setreg2;+
add
datawrite1;>tabstrc--adrbuff--28

setreg1;>tabstrc--adrbuff--28

datawrite1;>tabstrc--recurs-tabbuff--28_3
dataread1;;tabstrc--recurs-tabbuff--28_3
datawrite1;>tabstrc--recurs-tabbuff_read--28_3
dataread1;;tabstrc--recurs-tabbuff_read--28_3

setreg2;:l


gotoif;>tabstrc--recurs-checkyes--28_3
goto;>tabstrc--recurs-checkno--28_3
null;;tabstrc--recurs-checkyes--28_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--28
setreg2;+
add
datawrite1;>tabstrc--adrbuff--28

setreg1;>tabstrc--adrbuff--28

datawrite1;>tabstrc--recurs-tabbuff--28_4
dataread1;;tabstrc--recurs-tabbuff--28_4
datawrite1;>tabstrc--recurs-tabbuff_read--28_4
dataread1;;tabstrc--recurs-tabbuff_read--28_4

setreg2;:p


gotoif;>tabstrc--recurs-checkyes--28_4
goto;>tabstrc--recurs-checkno--28_4
null;;tabstrc--recurs-checkyes--28_4
##set flag########
setreg1;>tabstrc--outbuff--28
datawrite1;>tabstrc--recurs-flag--28_4
setreg1;+
datawrite1;;tabstrc--recurs-flag--28_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--28_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--28_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--28_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--28_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--28
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-30
goto;>goto--jumper-30
setreg1;>goto--jumper-30;goto--branch-30
s1push1
goto;>help--label
null;;goto--jumper-30
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-31
goto;>goto--jumper-31
dataread1;>@1;goto--branch-31
datawrite1;>validflg
null;;goto--jumper-31
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--32
null;;tabstrc--adrbuff--32
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--32
null;;tabstrc--outbuff--32
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--32

datawrite1;>tabstrc--recurs-tabbuff--32_1
dataread1;;tabstrc--recurs-tabbuff--32_1
datawrite1;>tabstrc--recurs-tabbuff_read--32_1
dataread1;;tabstrc--recurs-tabbuff_read--32_1

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--32_1
goto;>tabstrc--recurs-checkno--32_1
null;;tabstrc--recurs-checkyes--32_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--32
setreg2;+
add
datawrite1;>tabstrc--adrbuff--32

setreg1;>tabstrc--adrbuff--32

datawrite1;>tabstrc--recurs-tabbuff--32_2
dataread1;;tabstrc--recurs-tabbuff--32_2
datawrite1;>tabstrc--recurs-tabbuff_read--32_2
dataread1;;tabstrc--recurs-tabbuff_read--32_2

setreg2;:b


gotoif;>tabstrc--recurs-checkyes--32_2
goto;>tabstrc--recurs-checkno--32_2
null;;tabstrc--recurs-checkyes--32_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--32
setreg2;+
add
datawrite1;>tabstrc--adrbuff--32

setreg1;>tabstrc--adrbuff--32

datawrite1;>tabstrc--recurs-tabbuff--32_3
dataread1;;tabstrc--recurs-tabbuff--32_3
datawrite1;>tabstrc--recurs-tabbuff_read--32_3
dataread1;;tabstrc--recurs-tabbuff_read--32_3

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--32_3
goto;>tabstrc--recurs-checkno--32_3
null;;tabstrc--recurs-checkyes--32_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--32
setreg2;+
add
datawrite1;>tabstrc--adrbuff--32

setreg1;>tabstrc--adrbuff--32

datawrite1;>tabstrc--recurs-tabbuff--32_4
dataread1;;tabstrc--recurs-tabbuff--32_4
datawrite1;>tabstrc--recurs-tabbuff_read--32_4
dataread1;;tabstrc--recurs-tabbuff_read--32_4

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--32_4
goto;>tabstrc--recurs-checkno--32_4
null;;tabstrc--recurs-checkyes--32_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--32
setreg2;+
add
datawrite1;>tabstrc--adrbuff--32

setreg1;>tabstrc--adrbuff--32

datawrite1;>tabstrc--recurs-tabbuff--32_5
dataread1;;tabstrc--recurs-tabbuff--32_5
datawrite1;>tabstrc--recurs-tabbuff_read--32_5
dataread1;;tabstrc--recurs-tabbuff_read--32_5

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--32_5
goto;>tabstrc--recurs-checkno--32_5
null;;tabstrc--recurs-checkyes--32_5
##set flag########
setreg1;>tabstrc--outbuff--32
datawrite1;>tabstrc--recurs-flag--32_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--32_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--32_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--32_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--32_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--32_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--32_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--32
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-34
goto;>goto--jumper-34
setreg1;>goto--jumper-34;goto--branch-34
s1push1
goto;>about--label
null;;goto--jumper-34
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-35
goto;>goto--jumper-35
dataread1;>@1;goto--branch-35
datawrite1;>validflg
null;;goto--jumper-35
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--36
null;;tabstrc--adrbuff--36
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--36
null;;tabstrc--outbuff--36
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--36

datawrite1;>tabstrc--recurs-tabbuff--36_1
dataread1;;tabstrc--recurs-tabbuff--36_1
datawrite1;>tabstrc--recurs-tabbuff_read--36_1
dataread1;;tabstrc--recurs-tabbuff_read--36_1

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--36_1
goto;>tabstrc--recurs-checkno--36_1
null;;tabstrc--recurs-checkyes--36_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--36
setreg2;+
add
datawrite1;>tabstrc--adrbuff--36

setreg1;>tabstrc--adrbuff--36

datawrite1;>tabstrc--recurs-tabbuff--36_2
dataread1;;tabstrc--recurs-tabbuff--36_2
datawrite1;>tabstrc--recurs-tabbuff_read--36_2
dataread1;;tabstrc--recurs-tabbuff_read--36_2

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--36_2
goto;>tabstrc--recurs-checkno--36_2
null;;tabstrc--recurs-checkyes--36_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--36
setreg2;+
add
datawrite1;>tabstrc--adrbuff--36

setreg1;>tabstrc--adrbuff--36

datawrite1;>tabstrc--recurs-tabbuff--36_3
dataread1;;tabstrc--recurs-tabbuff--36_3
datawrite1;>tabstrc--recurs-tabbuff_read--36_3
dataread1;;tabstrc--recurs-tabbuff_read--36_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--36_3
goto;>tabstrc--recurs-checkno--36_3
null;;tabstrc--recurs-checkyes--36_3
##set flag########
setreg1;>tabstrc--outbuff--36
datawrite1;>tabstrc--recurs-flag--36_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--36_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--36_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--36_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--36_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--36
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-38
goto;>goto--jumper-38
setreg1;>goto--jumper-38;goto--branch-38
s1push1
goto;>vdi--label
null;;goto--jumper-38
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-39
goto;>goto--jumper-39
dataread1;>@1;goto--branch-39
datawrite1;>validflg
null;;goto--jumper-39
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--40
null;;tabstrc--adrbuff--40
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--40
null;;tabstrc--outbuff--40
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_1
dataread1;;tabstrc--recurs-tabbuff--40_1
datawrite1;>tabstrc--recurs-tabbuff_read--40_1
dataread1;;tabstrc--recurs-tabbuff_read--40_1

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--40_1
goto;>tabstrc--recurs-checkno--40_1
null;;tabstrc--recurs-checkyes--40_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_2
dataread1;;tabstrc--recurs-tabbuff--40_2
datawrite1;>tabstrc--recurs-tabbuff_read--40_2
dataread1;;tabstrc--recurs-tabbuff_read--40_2

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--40_2
goto;>tabstrc--recurs-checkno--40_2
null;;tabstrc--recurs-checkyes--40_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_3
dataread1;;tabstrc--recurs-tabbuff--40_3
datawrite1;>tabstrc--recurs-tabbuff_read--40_3
dataread1;;tabstrc--recurs-tabbuff_read--40_3

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--40_3
goto;>tabstrc--recurs-checkno--40_3
null;;tabstrc--recurs-checkyes--40_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_4
dataread1;;tabstrc--recurs-tabbuff--40_4
datawrite1;>tabstrc--recurs-tabbuff_read--40_4
dataread1;;tabstrc--recurs-tabbuff_read--40_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--40_4
goto;>tabstrc--recurs-checkno--40_4
null;;tabstrc--recurs-checkyes--40_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_5
dataread1;;tabstrc--recurs-tabbuff--40_5
datawrite1;>tabstrc--recurs-tabbuff_read--40_5
dataread1;;tabstrc--recurs-tabbuff_read--40_5

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--40_5
goto;>tabstrc--recurs-checkno--40_5
null;;tabstrc--recurs-checkyes--40_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_6
dataread1;;tabstrc--recurs-tabbuff--40_6
datawrite1;>tabstrc--recurs-tabbuff_read--40_6
dataread1;;tabstrc--recurs-tabbuff_read--40_6

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--40_6
goto;>tabstrc--recurs-checkno--40_6
null;;tabstrc--recurs-checkyes--40_6
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_7
dataread1;;tabstrc--recurs-tabbuff--40_7
datawrite1;>tabstrc--recurs-tabbuff_read--40_7
dataread1;;tabstrc--recurs-tabbuff_read--40_7

setreg2;:w


gotoif;>tabstrc--recurs-checkyes--40_7
goto;>tabstrc--recurs-checkno--40_7
null;;tabstrc--recurs-checkyes--40_7
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_8
dataread1;;tabstrc--recurs-tabbuff--40_8
datawrite1;>tabstrc--recurs-tabbuff_read--40_8
dataread1;;tabstrc--recurs-tabbuff_read--40_8

setreg2;:n


gotoif;>tabstrc--recurs-checkyes--40_8
goto;>tabstrc--recurs-checkno--40_8
null;;tabstrc--recurs-checkyes--40_8
##set flag########
setreg1;>tabstrc--outbuff--40
datawrite1;>tabstrc--recurs-flag--40_8
setreg1;+
datawrite1;;tabstrc--recurs-flag--40_8
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_8
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_7
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--40
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-42
goto;>goto--jumper-42
setreg1;>goto--jumper-42;goto--branch-42
s1push1
goto;>shutdown--label
null;;goto--jumper-42
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-43
goto;>goto--jumper-43
dataread1;>@1;goto--branch-43
datawrite1;>validflg
null;;goto--jumper-43
#conditional subroutine goto
dataread1;>validflg
dataread2;>@0
gotoif;>goto--branch-44
goto;>goto--jumper-44
setreg1;>goto--jumper-44;goto--branch-44
s1push1
goto;>invalid--label
null;;goto--jumper-44
#goto 
goto;>main--label
#label
null;;invalid--label
#Set text colors
dataread1;>*++0---
iowrite1;>io.textcolor
#prline
fopwri1;:U
fopwri1;:n
fopwri1;:k
fopwri1;:n
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:\s
fopwri1;:N
fopwri1;:e
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:B
fopwri1;:u
fopwri1;:i
fopwri1;:l
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:u
fopwri1;:t
fopwri1;:a
fopwri1;:b
fopwri1;:l
fopwri1;:e
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:!
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;vdi--label
#val (used with set to change variable value during runtime.)
setreg1;10x1
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #56
iowrite1;>vdi.cli.status#SSTNPL Source Line: '56' 
#Upward range iterator
dataread1;>@4
datawrite1;>vdi_iter
setreg1;>uiter-retpos-57;uiter-loopback-57
s1push1
goto;>vdi_buffiter--label
dataread1;>vdi_iter;uiter-retpos-57
setreg2;10x1
add
datawrite1;>vdi_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-57
gotoif;>uiter-loopback-57

#val (used with set to change variable value during runtime.)
setreg1;:\n
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #59
iowrite1;>vdi.cli.in#SSTNPL Source Line: '59' 
#label
null;;vdi_outloop--label
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #61
ioread1;>vdi.cli.out#SSTNPL Source Line: '61' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>vdi_vdioutput_buffer
#conditional return
dataread1;>vdi_vdioutput_buffer
dataread2;>@0
gotoif;>goto--branch-64
goto;>goto--jumper-64
s1pop1;;goto--branch-64
gotoreg1
null;;goto--jumper-64
#Dump (character)
dataread1;>vdi_vdioutput_buffer
iowrite1;>io.ttywr
#goto 
goto;>vdi_outloop--label
#label
null;;vdi_buffiter--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>vdi_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--70
dataread1;;tabr--adrbuff--70
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #71
iowrite1;>vdi.cli.in#SSTNPL Source Line: '71' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;help--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:[
fopwri1;:c
fopwri1;:m
fopwri1;:d
fopwri1;:]
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:a
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:r
fopwri1;:i
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:s
fopwri1;:o
fopwri1;:l
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:'
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\n
#prline
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#print
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;about--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:A
fopwri1;:B
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-87
s1push1
goto;>splash--label
null;;goto--jumper-87
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:\s
fopwri1;:(
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:D
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\s
fopwri1;:O
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:S
fopwri1;:y
fopwri1;:s
fopwri1;:t
fopwri1;:e
fopwri1;:m
fopwri1;:)
fopwri1;:\n
#prline
fopwri1;:P
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:2
fopwri1;:-
fopwri1;:9
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:r
fopwri1;:i
fopwri1;:g
fopwri1;:h
fopwri1;:t
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:)
fopwri1;:\s
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:8
fopwri1;:-
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:9
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:o
fopwri1;:m
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:L
fopwri1;:e
fopwri1;:a
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:\s
fopwri1;:&
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:s
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:/
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:m
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:p
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:b
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:S
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:o
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:,
fopwri1;:\s
fopwri1;:e
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:3
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:,
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:(
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:r
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:)
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:y
fopwri1;:\s
fopwri1;:l
fopwri1;:a
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:h
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:b
fopwri1;:e
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:f
fopwri1;:u
fopwri1;:l
fopwri1;:,
fopwri1;:\n
#prline
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:T
fopwri1;:H
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:\s
fopwri1;:A
fopwri1;:N
fopwri1;:Y
fopwri1;:\s
fopwri1;:W
fopwri1;:A
fopwri1;:R
fopwri1;:R
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:Y
fopwri1;:\c
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:e
fopwri1;:v
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:m
fopwri1;:p
fopwri1;:l
fopwri1;:i
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:r
fopwri1;:a
fopwri1;:n
fopwri1;:t
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\n
#prline
fopwri1;:M
fopwri1;:E
fopwri1;:R
fopwri1;:C
fopwri1;:H
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:A
fopwri1;:B
fopwri1;:I
fopwri1;:L
fopwri1;:I
fopwri1;:T
fopwri1;:Y
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:F
fopwri1;:I
fopwri1;:T
fopwri1;:N
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:F
fopwri1;:O
fopwri1;:R
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:P
fopwri1;:A
fopwri1;:R
fopwri1;:T
fopwri1;:I
fopwri1;:C
fopwri1;:U
fopwri1;:L
fopwri1;:A
fopwri1;:R
fopwri1;:\s
fopwri1;:P
fopwri1;:U
fopwri1;:R
fopwri1;:P
fopwri1;:O
fopwri1;:S
fopwri1;:E
fopwri1;:.
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:l
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:h
fopwri1;:a
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:e
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\n
#print
fopwri1;:a
fopwri1;:l
fopwri1;:o
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:.
fopwri1;:\s
fopwri1;:I
fopwri1;:f
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:t
fopwri1;:,
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:<
fopwri1;:h
fopwri1;:t
fopwri1;:t
fopwri1;:p
fopwri1;::
fopwri1;:/
fopwri1;:/
fopwri1;:w
fopwri1;:w
fopwri1;:w
fopwri1;:.
fopwri1;:g
fopwri1;:n
fopwri1;:u
fopwri1;:.
fopwri1;:o
fopwri1;:r
fopwri1;:g
fopwri1;:/
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:s
fopwri1;:/
fopwri1;:>
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;splash--label
#Set text colors
dataread1;>*+++0--
iowrite1;>io.textcolor
#print
fopwri1;:S
#Set text colors
dataread1;>*+++00-
iowrite1;>io.textcolor
#print
fopwri1;:B
#Set text colors
dataread1;>*+++-0-
iowrite1;>io.textcolor
#print
fopwri1;:T
#Set text colors
dataread1;>*+++-00
iowrite1;>io.textcolor
#print
fopwri1;:C
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#print
fopwri1;:V
#Set text colors
dataread1;>*+++0-0
iowrite1;>io.textcolor
#print
fopwri1;:M
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print
fopwri1;:-
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#print
fopwri1;:D
fopwri1;:O
fopwri1;:S
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#return from subroutine.
s1pop1
gotoreg1
#label
null;;bigsplash--label
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #134
include;dos+bigsplash.tas0#SSTNPL Source Line: '134' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;shutdown--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-138
s1push1
goto;>splash--label
null;;goto--jumper-138
#prline
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:o
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#stop (shutdown vm)
stop
#module include: line 146: comprompt as cp
includeas;comprompt,cp
#END OF FILE
