#SSTNPL COMPILER v0.3.0
#header
head-rname=command
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/command/command.stnp
null;+++---;*+++---
null;10x1;@1
null;0;cmdflg
null;0;validflg
null;:A;drive
null;0+0---;*0+0---
null;10x0;@0
null;10x3;@3
null;10x0;run_iter
null;:R;:R
null;:B;:B
null;:A;:A
null;10x4;@4
null;:0;driveref
null;0;invalid_charcheck
null;++0---;*++0---
null;10x2;@2
null;::;::
null;:0;:0
null;:1;:1
null;:2;:2
null;0;run_s_tmp
null;0;run_tobuffer_flg
null;:\s;:\s
null;0++---;*0++---
null;0;vdi_vdioutput_buffer
null;10x0;vdi_iter
null;+++--0;*+++--0
null;+++0--;*+++0--
null;+++00-;*+++00-
null;+++-0-;*+++-0-
null;+++-00;*+++-00
null;+++0-0;*+++0-0
#label
null;;startup--label
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#prline
fopwri1;:T
fopwri1;:y
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:?
fopwri1;:'
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:.
fopwri1;:\s
fopwri1;:R
fopwri1;:E
fopwri1;:A
fopwri1;:D
fopwri1;:Y
fopwri1;:.
fopwri1;:\n
#vdi mode set
dataread1;>@1
iowrite1;>vdi.cli.status
#val (used with set to change variable value during runtime.)
setreg1;10x70
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.max
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.clearbuffer
#buffer 2 reset
iowrite1;>buffer.2.reset
#goto 
goto;>main--label
#label
null;;main--label
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#Dump (character)
dataread1;>drive
iowrite1;>io.ttywr
#print
fopwri1;::
fopwri1;:\b
fopwri1;:>
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#goto (extra code stores away return address.)
setreg1;>goto--jumper-31
s1push1
goto;>cp.getentry--label
null;;goto--jumper-31
#print newline
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--37
null;;tabstrc--adrbuff--37
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--37
null;;tabstrc--outbuff--37
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--37

datawrite1;>tabstrc--recurs-tabbuff--37_1
dataread1;;tabstrc--recurs-tabbuff--37_1
datawrite1;>tabstrc--recurs-tabbuff_read--37_1
dataread1;;tabstrc--recurs-tabbuff_read--37_1

setreg2;:?


gotoif;>tabstrc--recurs-checkyes--37_1
goto;>tabstrc--recurs-checkno--37_1
null;;tabstrc--recurs-checkyes--37_1
##set flag########
setreg1;>tabstrc--outbuff--37
datawrite1;>tabstrc--recurs-flag--37_1
setreg1;+
datawrite1;;tabstrc--recurs-flag--37_1
#recursionskip endpoint
null;;tabstrc--recurs-checkno--37_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--37
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-39
goto;>goto--jumper-39
setreg1;>goto--jumper-39;goto--branch-39
s1push1
goto;>help--label
null;;goto--jumper-39
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-40
goto;>goto--jumper-40
dataread1;>@1;goto--branch-40
datawrite1;>validflg
null;;goto--jumper-40
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--41
null;;tabstrc--adrbuff--41
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--41
null;;tabstrc--outbuff--41
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--41

datawrite1;>tabstrc--recurs-tabbuff--41_1
dataread1;;tabstrc--recurs-tabbuff--41_1
datawrite1;>tabstrc--recurs-tabbuff_read--41_1
dataread1;;tabstrc--recurs-tabbuff_read--41_1

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--41_1
goto;>tabstrc--recurs-checkno--41_1
null;;tabstrc--recurs-checkyes--41_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--41
setreg2;+
add
datawrite1;>tabstrc--adrbuff--41

setreg1;>tabstrc--adrbuff--41

datawrite1;>tabstrc--recurs-tabbuff--41_2
dataread1;;tabstrc--recurs-tabbuff--41_2
datawrite1;>tabstrc--recurs-tabbuff_read--41_2
dataread1;;tabstrc--recurs-tabbuff_read--41_2

setreg2;:b


gotoif;>tabstrc--recurs-checkyes--41_2
goto;>tabstrc--recurs-checkno--41_2
null;;tabstrc--recurs-checkyes--41_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--41
setreg2;+
add
datawrite1;>tabstrc--adrbuff--41

setreg1;>tabstrc--adrbuff--41

datawrite1;>tabstrc--recurs-tabbuff--41_3
dataread1;;tabstrc--recurs-tabbuff--41_3
datawrite1;>tabstrc--recurs-tabbuff_read--41_3
dataread1;;tabstrc--recurs-tabbuff_read--41_3

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--41_3
goto;>tabstrc--recurs-checkno--41_3
null;;tabstrc--recurs-checkyes--41_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--41
setreg2;+
add
datawrite1;>tabstrc--adrbuff--41

setreg1;>tabstrc--adrbuff--41

datawrite1;>tabstrc--recurs-tabbuff--41_4
dataread1;;tabstrc--recurs-tabbuff--41_4
datawrite1;>tabstrc--recurs-tabbuff_read--41_4
dataread1;;tabstrc--recurs-tabbuff_read--41_4

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--41_4
goto;>tabstrc--recurs-checkno--41_4
null;;tabstrc--recurs-checkyes--41_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--41
setreg2;+
add
datawrite1;>tabstrc--adrbuff--41

setreg1;>tabstrc--adrbuff--41

datawrite1;>tabstrc--recurs-tabbuff--41_5
dataread1;;tabstrc--recurs-tabbuff--41_5
datawrite1;>tabstrc--recurs-tabbuff_read--41_5
dataread1;;tabstrc--recurs-tabbuff_read--41_5

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--41_5
goto;>tabstrc--recurs-checkno--41_5
null;;tabstrc--recurs-checkyes--41_5
##set flag########
setreg1;>tabstrc--outbuff--41
datawrite1;>tabstrc--recurs-flag--41_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--41_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--41_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--41_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--41_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--41_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--41_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--41
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-43
goto;>goto--jumper-43
setreg1;>goto--jumper-43;goto--branch-43
s1push1
goto;>about--label
null;;goto--jumper-43
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-44
goto;>goto--jumper-44
dataread1;>@1;goto--branch-44
datawrite1;>validflg
null;;goto--jumper-44
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--45
null;;tabstrc--adrbuff--45
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--45
null;;tabstrc--outbuff--45
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--45

datawrite1;>tabstrc--recurs-tabbuff--45_1
dataread1;;tabstrc--recurs-tabbuff--45_1
datawrite1;>tabstrc--recurs-tabbuff_read--45_1
dataread1;;tabstrc--recurs-tabbuff_read--45_1

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--45_1
goto;>tabstrc--recurs-checkno--45_1
null;;tabstrc--recurs-checkyes--45_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--45
setreg2;+
add
datawrite1;>tabstrc--adrbuff--45

setreg1;>tabstrc--adrbuff--45

datawrite1;>tabstrc--recurs-tabbuff--45_2
dataread1;;tabstrc--recurs-tabbuff--45_2
datawrite1;>tabstrc--recurs-tabbuff_read--45_2
dataread1;;tabstrc--recurs-tabbuff_read--45_2

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--45_2
goto;>tabstrc--recurs-checkno--45_2
null;;tabstrc--recurs-checkyes--45_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--45
setreg2;+
add
datawrite1;>tabstrc--adrbuff--45

setreg1;>tabstrc--adrbuff--45

datawrite1;>tabstrc--recurs-tabbuff--45_3
dataread1;;tabstrc--recurs-tabbuff--45_3
datawrite1;>tabstrc--recurs-tabbuff_read--45_3
dataread1;;tabstrc--recurs-tabbuff_read--45_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--45_3
goto;>tabstrc--recurs-checkno--45_3
null;;tabstrc--recurs-checkyes--45_3
##set flag########
setreg1;>tabstrc--outbuff--45
datawrite1;>tabstrc--recurs-flag--45_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--45_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--45_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--45_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--45_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--45
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-47
goto;>goto--jumper-47
setreg1;>goto--jumper-47;goto--branch-47
s1push1
goto;>vdi--label
null;;goto--jumper-47
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-48
goto;>goto--jumper-48
dataread1;>@1;goto--branch-48
datawrite1;>validflg
null;;goto--jumper-48
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--49
null;;tabstrc--adrbuff--49
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--49
null;;tabstrc--outbuff--49
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_1
dataread1;;tabstrc--recurs-tabbuff--49_1
datawrite1;>tabstrc--recurs-tabbuff_read--49_1
dataread1;;tabstrc--recurs-tabbuff_read--49_1

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--49_1
goto;>tabstrc--recurs-checkno--49_1
null;;tabstrc--recurs-checkyes--49_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_2
dataread1;;tabstrc--recurs-tabbuff--49_2
datawrite1;>tabstrc--recurs-tabbuff_read--49_2
dataread1;;tabstrc--recurs-tabbuff_read--49_2

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--49_2
goto;>tabstrc--recurs-checkno--49_2
null;;tabstrc--recurs-checkyes--49_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_3
dataread1;;tabstrc--recurs-tabbuff--49_3
datawrite1;>tabstrc--recurs-tabbuff_read--49_3
dataread1;;tabstrc--recurs-tabbuff_read--49_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--49_3
goto;>tabstrc--recurs-checkno--49_3
null;;tabstrc--recurs-checkyes--49_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_4
dataread1;;tabstrc--recurs-tabbuff--49_4
datawrite1;>tabstrc--recurs-tabbuff_read--49_4
dataread1;;tabstrc--recurs-tabbuff_read--49_4

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--49_4
goto;>tabstrc--recurs-checkno--49_4
null;;tabstrc--recurs-checkyes--49_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_5
dataread1;;tabstrc--recurs-tabbuff--49_5
datawrite1;>tabstrc--recurs-tabbuff_read--49_5
dataread1;;tabstrc--recurs-tabbuff_read--49_5

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--49_5
goto;>tabstrc--recurs-checkno--49_5
null;;tabstrc--recurs-checkyes--49_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--49
setreg2;+
add
datawrite1;>tabstrc--adrbuff--49

setreg1;>tabstrc--adrbuff--49

datawrite1;>tabstrc--recurs-tabbuff--49_6
dataread1;;tabstrc--recurs-tabbuff--49_6
datawrite1;>tabstrc--recurs-tabbuff_read--49_6
dataread1;;tabstrc--recurs-tabbuff_read--49_6

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--49_6
goto;>tabstrc--recurs-checkno--49_6
null;;tabstrc--recurs-checkyes--49_6
##set flag########
setreg1;>tabstrc--outbuff--49
datawrite1;>tabstrc--recurs-flag--49_6
setreg1;+
datawrite1;;tabstrc--recurs-flag--49_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--49_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--49
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-51
goto;>goto--jumper-51
setreg1;>goto--jumper-51;goto--branch-51
s1push1
goto;>drives--label
null;;goto--jumper-51
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-52
goto;>goto--jumper-52
dataread1;>@1;goto--branch-52
datawrite1;>validflg
null;;goto--jumper-52
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--53
null;;tabstrc--adrbuff--53
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--53
null;;tabstrc--outbuff--53
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--53

datawrite1;>tabstrc--recurs-tabbuff--53_1
dataread1;;tabstrc--recurs-tabbuff--53_1
datawrite1;>tabstrc--recurs-tabbuff_read--53_1
dataread1;;tabstrc--recurs-tabbuff_read--53_1

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--53_1
goto;>tabstrc--recurs-checkno--53_1
null;;tabstrc--recurs-checkyes--53_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--53
setreg2;+
add
datawrite1;>tabstrc--adrbuff--53

setreg1;>tabstrc--adrbuff--53

datawrite1;>tabstrc--recurs-tabbuff--53_2
dataread1;;tabstrc--recurs-tabbuff--53_2
datawrite1;>tabstrc--recurs-tabbuff_read--53_2
dataread1;;tabstrc--recurs-tabbuff_read--53_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--53_2
goto;>tabstrc--recurs-checkno--53_2
null;;tabstrc--recurs-checkyes--53_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--53
setreg2;+
add
datawrite1;>tabstrc--adrbuff--53

setreg1;>tabstrc--adrbuff--53

datawrite1;>tabstrc--recurs-tabbuff--53_3
dataread1;;tabstrc--recurs-tabbuff--53_3
datawrite1;>tabstrc--recurs-tabbuff_read--53_3
dataread1;;tabstrc--recurs-tabbuff_read--53_3

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--53_3
goto;>tabstrc--recurs-checkno--53_3
null;;tabstrc--recurs-checkyes--53_3
##set flag########
setreg1;>tabstrc--outbuff--53
datawrite1;>tabstrc--recurs-flag--53_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--53_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--53_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--53_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--53_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--53
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-55
goto;>goto--jumper-55
setreg1;>goto--jumper-55;goto--branch-55
s1push1
goto;>version--label
null;;goto--jumper-55
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-56
goto;>goto--jumper-56
dataread1;>@1;goto--branch-56
datawrite1;>validflg
null;;goto--jumper-56
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--57
null;;tabstrc--adrbuff--57
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--57
null;;tabstrc--outbuff--57
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--57

datawrite1;>tabstrc--recurs-tabbuff--57_1
dataread1;;tabstrc--recurs-tabbuff--57_1
datawrite1;>tabstrc--recurs-tabbuff_read--57_1
dataread1;;tabstrc--recurs-tabbuff_read--57_1

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--57_1
goto;>tabstrc--recurs-checkno--57_1
null;;tabstrc--recurs-checkyes--57_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--57
setreg2;+
add
datawrite1;>tabstrc--adrbuff--57

setreg1;>tabstrc--adrbuff--57

datawrite1;>tabstrc--recurs-tabbuff--57_2
dataread1;;tabstrc--recurs-tabbuff--57_2
datawrite1;>tabstrc--recurs-tabbuff_read--57_2
dataread1;;tabstrc--recurs-tabbuff_read--57_2

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--57_2
goto;>tabstrc--recurs-checkno--57_2
null;;tabstrc--recurs-checkyes--57_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--57
setreg2;+
add
datawrite1;>tabstrc--adrbuff--57

setreg1;>tabstrc--adrbuff--57

datawrite1;>tabstrc--recurs-tabbuff--57_3
dataread1;;tabstrc--recurs-tabbuff--57_3
datawrite1;>tabstrc--recurs-tabbuff_read--57_3
dataread1;;tabstrc--recurs-tabbuff_read--57_3

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--57_3
goto;>tabstrc--recurs-checkno--57_3
null;;tabstrc--recurs-checkyes--57_3
##set flag########
setreg1;>tabstrc--outbuff--57
datawrite1;>tabstrc--recurs-flag--57_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--57_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--57_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--57_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--57_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--57
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-59
goto;>goto--jumper-59
setreg1;>goto--jumper-59;goto--branch-59
s1push1
goto;>directory_list--label
null;;goto--jumper-59
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-60
goto;>goto--jumper-60
dataread1;>@1;goto--branch-60
datawrite1;>validflg
null;;goto--jumper-60
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--61
null;;tabstrc--adrbuff--61
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--61
null;;tabstrc--outbuff--61
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_1
dataread1;;tabstrc--recurs-tabbuff--61_1
datawrite1;>tabstrc--recurs-tabbuff_read--61_1
dataread1;;tabstrc--recurs-tabbuff_read--61_1

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--61_1
goto;>tabstrc--recurs-checkno--61_1
null;;tabstrc--recurs-checkyes--61_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_2
dataread1;;tabstrc--recurs-tabbuff--61_2
datawrite1;>tabstrc--recurs-tabbuff_read--61_2
dataread1;;tabstrc--recurs-tabbuff_read--61_2

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--61_2
goto;>tabstrc--recurs-checkno--61_2
null;;tabstrc--recurs-checkyes--61_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_3
dataread1;;tabstrc--recurs-tabbuff--61_3
datawrite1;>tabstrc--recurs-tabbuff_read--61_3
dataread1;;tabstrc--recurs-tabbuff_read--61_3

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--61_3
goto;>tabstrc--recurs-checkno--61_3
null;;tabstrc--recurs-checkyes--61_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_4
dataread1;;tabstrc--recurs-tabbuff--61_4
datawrite1;>tabstrc--recurs-tabbuff_read--61_4
dataread1;;tabstrc--recurs-tabbuff_read--61_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--61_4
goto;>tabstrc--recurs-checkno--61_4
null;;tabstrc--recurs-checkyes--61_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_5
dataread1;;tabstrc--recurs-tabbuff--61_5
datawrite1;>tabstrc--recurs-tabbuff_read--61_5
dataread1;;tabstrc--recurs-tabbuff_read--61_5

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--61_5
goto;>tabstrc--recurs-checkno--61_5
null;;tabstrc--recurs-checkyes--61_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_6
dataread1;;tabstrc--recurs-tabbuff--61_6
datawrite1;>tabstrc--recurs-tabbuff_read--61_6
dataread1;;tabstrc--recurs-tabbuff_read--61_6

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--61_6
goto;>tabstrc--recurs-checkno--61_6
null;;tabstrc--recurs-checkyes--61_6
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_7
dataread1;;tabstrc--recurs-tabbuff--61_7
datawrite1;>tabstrc--recurs-tabbuff_read--61_7
dataread1;;tabstrc--recurs-tabbuff_read--61_7

setreg2;:w


gotoif;>tabstrc--recurs-checkyes--61_7
goto;>tabstrc--recurs-checkno--61_7
null;;tabstrc--recurs-checkyes--61_7
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--61
setreg2;+
add
datawrite1;>tabstrc--adrbuff--61

setreg1;>tabstrc--adrbuff--61

datawrite1;>tabstrc--recurs-tabbuff--61_8
dataread1;;tabstrc--recurs-tabbuff--61_8
datawrite1;>tabstrc--recurs-tabbuff_read--61_8
dataread1;;tabstrc--recurs-tabbuff_read--61_8

setreg2;:n


gotoif;>tabstrc--recurs-checkyes--61_8
goto;>tabstrc--recurs-checkno--61_8
null;;tabstrc--recurs-checkyes--61_8
##set flag########
setreg1;>tabstrc--outbuff--61
datawrite1;>tabstrc--recurs-flag--61_8
setreg1;+
datawrite1;;tabstrc--recurs-flag--61_8
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_8
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_7
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--61_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--61
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-63
goto;>goto--jumper-63
setreg1;>goto--jumper-63;goto--branch-63
s1push1
goto;>shutdown--label
null;;goto--jumper-63
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-64
goto;>goto--jumper-64
dataread1;>@1;goto--branch-64
datawrite1;>validflg
null;;goto--jumper-64
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--67
null;;tabstrc--adrbuff--67
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--67
null;;tabstrc--outbuff--67
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_1
dataread1;;tabstrc--recurs-tabbuff--67_1
datawrite1;>tabstrc--recurs-tabbuff_read--67_1
dataread1;;tabstrc--recurs-tabbuff_read--67_1

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--67_1
goto;>tabstrc--recurs-checkno--67_1
null;;tabstrc--recurs-checkyes--67_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--67
setreg2;+
add
datawrite1;>tabstrc--adrbuff--67

setreg1;>tabstrc--adrbuff--67

datawrite1;>tabstrc--recurs-tabbuff--67_2
dataread1;;tabstrc--recurs-tabbuff--67_2
datawrite1;>tabstrc--recurs-tabbuff_read--67_2
dataread1;;tabstrc--recurs-tabbuff_read--67_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--67_2
goto;>tabstrc--recurs-checkno--67_2
null;;tabstrc--recurs-checkyes--67_2
##set flag########
setreg1;>tabstrc--outbuff--67
datawrite1;>tabstrc--recurs-flag--67_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--67_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--67_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--67
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-69
goto;>goto--jumper-69
setreg1;>goto--jumper-69;goto--branch-69
s1push1
goto;>driveA--label
null;;goto--jumper-69
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-70
goto;>goto--jumper-70
dataread1;>@1;goto--branch-70
datawrite1;>validflg
null;;goto--jumper-70
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--71
null;;tabstrc--adrbuff--71
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--71
null;;tabstrc--outbuff--71
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--71

datawrite1;>tabstrc--recurs-tabbuff--71_1
dataread1;;tabstrc--recurs-tabbuff--71_1
datawrite1;>tabstrc--recurs-tabbuff_read--71_1
dataread1;;tabstrc--recurs-tabbuff_read--71_1

setreg2;:A


gotoif;>tabstrc--recurs-checkyes--71_1
goto;>tabstrc--recurs-checkno--71_1
null;;tabstrc--recurs-checkyes--71_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--71
setreg2;+
add
datawrite1;>tabstrc--adrbuff--71

setreg1;>tabstrc--adrbuff--71

datawrite1;>tabstrc--recurs-tabbuff--71_2
dataread1;;tabstrc--recurs-tabbuff--71_2
datawrite1;>tabstrc--recurs-tabbuff_read--71_2
dataread1;;tabstrc--recurs-tabbuff_read--71_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--71_2
goto;>tabstrc--recurs-checkno--71_2
null;;tabstrc--recurs-checkyes--71_2
##set flag########
setreg1;>tabstrc--outbuff--71
datawrite1;>tabstrc--recurs-flag--71_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--71_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--71_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--71_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--71
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-73
goto;>goto--jumper-73
setreg1;>goto--jumper-73;goto--branch-73
s1push1
goto;>driveA--label
null;;goto--jumper-73
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-74
goto;>goto--jumper-74
dataread1;>@1;goto--branch-74
datawrite1;>validflg
null;;goto--jumper-74
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--76
null;;tabstrc--adrbuff--76
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--76
null;;tabstrc--outbuff--76
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--76

datawrite1;>tabstrc--recurs-tabbuff--76_1
dataread1;;tabstrc--recurs-tabbuff--76_1
datawrite1;>tabstrc--recurs-tabbuff_read--76_1
dataread1;;tabstrc--recurs-tabbuff_read--76_1

setreg2;:b


gotoif;>tabstrc--recurs-checkyes--76_1
goto;>tabstrc--recurs-checkno--76_1
null;;tabstrc--recurs-checkyes--76_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--76
setreg2;+
add
datawrite1;>tabstrc--adrbuff--76

setreg1;>tabstrc--adrbuff--76

datawrite1;>tabstrc--recurs-tabbuff--76_2
dataread1;;tabstrc--recurs-tabbuff--76_2
datawrite1;>tabstrc--recurs-tabbuff_read--76_2
dataread1;;tabstrc--recurs-tabbuff_read--76_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--76_2
goto;>tabstrc--recurs-checkno--76_2
null;;tabstrc--recurs-checkyes--76_2
##set flag########
setreg1;>tabstrc--outbuff--76
datawrite1;>tabstrc--recurs-flag--76_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--76_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--76_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--76_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--76
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-78
goto;>goto--jumper-78
setreg1;>goto--jumper-78;goto--branch-78
s1push1
goto;>driveB--label
null;;goto--jumper-78
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-79
goto;>goto--jumper-79
dataread1;>@1;goto--branch-79
datawrite1;>validflg
null;;goto--jumper-79
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--80
null;;tabstrc--adrbuff--80
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--80
null;;tabstrc--outbuff--80
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--80

datawrite1;>tabstrc--recurs-tabbuff--80_1
dataread1;;tabstrc--recurs-tabbuff--80_1
datawrite1;>tabstrc--recurs-tabbuff_read--80_1
dataread1;;tabstrc--recurs-tabbuff_read--80_1

setreg2;:B


gotoif;>tabstrc--recurs-checkyes--80_1
goto;>tabstrc--recurs-checkno--80_1
null;;tabstrc--recurs-checkyes--80_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--80
setreg2;+
add
datawrite1;>tabstrc--adrbuff--80

setreg1;>tabstrc--adrbuff--80

datawrite1;>tabstrc--recurs-tabbuff--80_2
dataread1;;tabstrc--recurs-tabbuff--80_2
datawrite1;>tabstrc--recurs-tabbuff_read--80_2
dataread1;;tabstrc--recurs-tabbuff_read--80_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--80_2
goto;>tabstrc--recurs-checkno--80_2
null;;tabstrc--recurs-checkyes--80_2
##set flag########
setreg1;>tabstrc--outbuff--80
datawrite1;>tabstrc--recurs-flag--80_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--80_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--80_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--80_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--80
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-82
goto;>goto--jumper-82
setreg1;>goto--jumper-82;goto--branch-82
s1push1
goto;>driveB--label
null;;goto--jumper-82
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-83
goto;>goto--jumper-83
dataread1;>@1;goto--branch-83
datawrite1;>validflg
null;;goto--jumper-83
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--85
null;;tabstrc--adrbuff--85
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--85
null;;tabstrc--outbuff--85
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--85

datawrite1;>tabstrc--recurs-tabbuff--85_1
dataread1;;tabstrc--recurs-tabbuff--85_1
datawrite1;>tabstrc--recurs-tabbuff_read--85_1
dataread1;;tabstrc--recurs-tabbuff_read--85_1

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--85_1
goto;>tabstrc--recurs-checkno--85_1
null;;tabstrc--recurs-checkyes--85_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--85
setreg2;+
add
datawrite1;>tabstrc--adrbuff--85

setreg1;>tabstrc--adrbuff--85

datawrite1;>tabstrc--recurs-tabbuff--85_2
dataread1;;tabstrc--recurs-tabbuff--85_2
datawrite1;>tabstrc--recurs-tabbuff_read--85_2
dataread1;;tabstrc--recurs-tabbuff_read--85_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--85_2
goto;>tabstrc--recurs-checkno--85_2
null;;tabstrc--recurs-checkyes--85_2
##set flag########
setreg1;>tabstrc--outbuff--85
datawrite1;>tabstrc--recurs-flag--85_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--85_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--85_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--85_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--85
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-87
goto;>goto--jumper-87
setreg1;>goto--jumper-87;goto--branch-87
s1push1
goto;>driveR--label
null;;goto--jumper-87
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-88
goto;>goto--jumper-88
dataread1;>@1;goto--branch-88
datawrite1;>validflg
null;;goto--jumper-88
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--89
null;;tabstrc--adrbuff--89
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--89
null;;tabstrc--outbuff--89
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--89

datawrite1;>tabstrc--recurs-tabbuff--89_1
dataread1;;tabstrc--recurs-tabbuff--89_1
datawrite1;>tabstrc--recurs-tabbuff_read--89_1
dataread1;;tabstrc--recurs-tabbuff_read--89_1

setreg2;:R


gotoif;>tabstrc--recurs-checkyes--89_1
goto;>tabstrc--recurs-checkno--89_1
null;;tabstrc--recurs-checkyes--89_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--89
setreg2;+
add
datawrite1;>tabstrc--adrbuff--89

setreg1;>tabstrc--adrbuff--89

datawrite1;>tabstrc--recurs-tabbuff--89_2
dataread1;;tabstrc--recurs-tabbuff--89_2
datawrite1;>tabstrc--recurs-tabbuff_read--89_2
dataread1;;tabstrc--recurs-tabbuff_read--89_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--89_2
goto;>tabstrc--recurs-checkno--89_2
null;;tabstrc--recurs-checkyes--89_2
##set flag########
setreg1;>tabstrc--outbuff--89
datawrite1;>tabstrc--recurs-flag--89_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--89_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--89_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--89_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--89
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-91
goto;>goto--jumper-91
setreg1;>goto--jumper-91;goto--branch-91
s1push1
goto;>driveR--label
null;;goto--jumper-91
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-92
goto;>goto--jumper-92
dataread1;>@1;goto--branch-92
datawrite1;>validflg
null;;goto--jumper-92
#conditional subroutine goto
dataread1;>validflg
dataread2;>@0
gotoif;>goto--branch-94
goto;>goto--jumper-94
setreg1;>goto--jumper-94;goto--branch-94
s1push1
goto;>invalid--label
null;;goto--jumper-94
#goto 
goto;>main--label
#label
null;;driveA--label
#val (used with set to change variable value during runtime.)
setreg1;:A
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drive
#conditional return
dataread1;>cp.size
dataread2;>@3
gotoifless;>goto--branch-102
goto;>goto--jumper-102
s1pop1;;goto--branch-102
gotoreg1
null;;goto--jumper-102
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:0
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-110
s1push1
goto;>run_send_setup--label
null;;goto--jumper-110
#Upward range iterator
dataread1;>@3
datawrite1;>run_iter
setreg1;>uiter-retpos-111;uiter-loopback-111
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-111
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-111
gotoif;>uiter-loopback-111

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-114
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-114
#return from subroutine.
s1pop1
gotoreg1
#label
null;;driveB--label
#val (used with set to change variable value during runtime.)
setreg1;:B
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drive
#conditional return
dataread1;>cp.size
dataread2;>@3
gotoifless;>goto--branch-120
goto;>goto--jumper-120
s1pop1;;goto--branch-120
gotoreg1
null;;goto--jumper-120
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:1
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-128
s1push1
goto;>run_send_setup--label
null;;goto--jumper-128
#Upward range iterator
dataread1;>@3
datawrite1;>run_iter
setreg1;>uiter-retpos-129;uiter-loopback-129
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-129
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-129
gotoif;>uiter-loopback-129

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-132
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-132
#return from subroutine.
s1pop1
gotoreg1
#label
null;;driveR--label
#val (used with set to change variable value during runtime.)
setreg1;:R
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drive
#conditional return
dataread1;>cp.size
dataread2;>@3
gotoifless;>goto--branch-139
goto;>goto--jumper-139
s1pop1;;goto--branch-139
gotoreg1
null;;goto--jumper-139
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:2
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-147
s1push1
goto;>run_send_setup--label
null;;goto--jumper-147
#Upward range iterator
dataread1;>@3
datawrite1;>run_iter
setreg1;>uiter-retpos-148;uiter-loopback-148
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-148
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-148
gotoif;>uiter-loopback-148

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-151
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-151
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list--label
#conditional subroutine goto
dataread1;>drive
dataread2;>:R
gotoif;>goto--branch-156
goto;>goto--jumper-156
setreg1;>goto--jumper-156;goto--branch-156
s1push1
goto;>directory_list_R--label
null;;goto--jumper-156
#conditional subroutine goto
dataread1;>drive
dataread2;>:B
gotoif;>goto--branch-157
goto;>goto--jumper-157
setreg1;>goto--jumper-157;goto--branch-157
s1push1
goto;>directory_list_B--label
null;;goto--jumper-157
#conditional subroutine goto
dataread1;>drive
dataread2;>:A
gotoif;>goto--branch-158
goto;>goto--jumper-158
setreg1;>goto--jumper-158;goto--branch-158
s1push1
goto;>directory_list_A--label
null;;goto--jumper-158
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list_A--label
#print
fopwri1;:F
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:\v
fopwri1;:\s
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-163;uiter-loopback-163
s1push1
goto;>pattern_print_char--label
dataread1;>run_iter;uiter-retpos-163
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-163
gotoif;>uiter-loopback-163

#print newline
fopwri1;:\n
#vdin
fopset1;>vdi.cli.in
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:0
fopwri1;:\s
fopset1;>io.ttywr
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-166;uiter-loopback-166
s1push1
goto;>run_send_char--label
dataread1;>run_iter;uiter-retpos-166
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-166
gotoif;>uiter-loopback-166

#vdi
fopset1;>vdi.cli.in
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-168
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-168
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list_B--label
#print
fopwri1;:F
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:B
fopwri1;:\s
fopwri1;:\v
fopwri1;:\s
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-173;uiter-loopback-173
s1push1
goto;>pattern_print_char--label
dataread1;>run_iter;uiter-retpos-173
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-173
gotoif;>uiter-loopback-173

#print newline
fopwri1;:\n
#vdin
fopset1;>vdi.cli.in
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:1
fopwri1;:\s
fopset1;>io.ttywr
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-176;uiter-loopback-176
s1push1
goto;>run_send_char--label
dataread1;>run_iter;uiter-retpos-176
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-176
gotoif;>uiter-loopback-176

#vdi
fopset1;>vdi.cli.in
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-178
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-178
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list_R--label
#print
fopwri1;:F
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:R
fopwri1;:\s
fopwri1;:\v
fopwri1;:\s
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-183;uiter-loopback-183
s1push1
goto;>pattern_print_char--label
dataread1;>run_iter;uiter-retpos-183
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-183
gotoif;>uiter-loopback-183

#print newline
fopwri1;:\n
#vdin
fopset1;>vdi.cli.in
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:2
fopwri1;:\s
fopset1;>io.ttywr
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-186;uiter-loopback-186
s1push1
goto;>run_send_char--label
dataread1;>run_iter;uiter-retpos-186
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-186
gotoif;>uiter-loopback-186

#vdi
fopset1;>vdi.cli.in
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-188
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-188
#return from subroutine.
s1pop1
gotoreg1
#label
null;;invalid--label
#Set text colors
dataread1;>*++0---
iowrite1;>io.textcolor
#conditional goto
dataread1;>cp.size
dataread2;>@2
gotoifless;>goto--branch-194
goto;>goto--jumper-194
setreg1;>goto--jumper-194;goto--branch-194
goto;>run_command--label
null;;goto--jumper-194
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>@1
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--196
dataread1;;tabr--adrbuff--196
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>invalid_charcheck
#conditional goto
dataread1;>invalid_charcheck
dataread2;>::
gotoif;>goto--jumper-198
goto;>goto--branch-198
setreg1;>goto--jumper-198;goto--branch-198
goto;>run_command--label
null;;goto--jumper-198
#prline
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:N
fopwri1;:o
fopwri1;:t
fopwri1;:\s
fopwri1;:V
fopwri1;:a
fopwri1;:l
fopwri1;:i
fopwri1;:d
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:s
fopwri1;:'
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_command--label
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopset1;>io.ttywr
#conditional set
dataread1;>drive
dataread2;>:A
gotoif;>goto--branch-205
goto;>goto--jumper-205
dataread1;>:0;goto--branch-205
datawrite1;>driveref
null;;goto--jumper-205
#conditional set
dataread1;>drive
dataread2;>:B
gotoif;>goto--branch-206
goto;>goto--jumper-206
dataread1;>:1;goto--branch-206
datawrite1;>driveref
null;;goto--jumper-206
#conditional set
dataread1;>drive
dataread2;>:R
gotoif;>goto--branch-207
goto;>goto--jumper-207
dataread1;>:2;goto--branch-207
datawrite1;>driveref
null;;goto--jumper-207
#get(1) (may be used with set, or asm code)
dataread1;>driveref
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #209
iowrite1;>vdi.cli.in#SSTNPL Source Line: '209' 
#vdin
fopset1;>vdi.cli.in
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-211
s1push1
goto;>run_send_setup--label
null;;goto--jumper-211
#Upward range iterator
dataread1;>@0
datawrite1;>run_iter
setreg1;>uiter-retpos-212;uiter-loopback-212
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-212
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-212
gotoif;>uiter-loopback-212

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-217
s1push1
goto;>run_send_setup--label
null;;goto--jumper-217
#Upward range iterator
dataread1;>@0
datawrite1;>run_iter
setreg1;>uiter-retpos-218;uiter-loopback-218
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-218
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-218
gotoif;>uiter-loopback-218

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-221
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-221
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_setup--label
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>run_tobuffer_flg
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_char_exec--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>run_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--234
dataread1;;tabr--adrbuff--234
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>run_s_tmp
#conditional goto
dataread1;>run_tobuffer_flg
dataread2;>@1
gotoif;>goto--branch-236
goto;>goto--jumper-236
setreg1;>goto--jumper-236;goto--branch-236
goto;>run_send_doredir--label
null;;goto--jumper-236
#conditional set
dataread1;>run_s_tmp
dataread2;>:\s
gotoif;>goto--branch-237
goto;>goto--jumper-237
dataread1;>@1;goto--branch-237
datawrite1;>run_tobuffer_flg
null;;goto--jumper-237
#conditional return
dataread1;>run_s_tmp
dataread2;>:\s
gotoif;>goto--branch-238
goto;>goto--jumper-238
s1pop1;;goto--branch-238
gotoreg1
null;;goto--jumper-238
#get(1) (may be used with set, or asm code)
dataread1;>run_s_tmp
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #241
iowrite1;>vdi.cli.in#SSTNPL Source Line: '241' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_doredir--label
#buffer 2 head write
dataread1;>run_s_tmp
iowrite1;>buffer.2.write.head
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_char--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>run_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--249
dataread1;;tabr--adrbuff--249
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #250
iowrite1;>vdi.cli.in#SSTNPL Source Line: '250' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;pattern_print_char--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>run_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--254
dataread1;;tabr--adrbuff--254
iowrite1;>io.ttywr
#return from subroutine.
s1pop1
gotoreg1
#label
null;;version--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-258
s1push1
goto;>splash--label
null;;goto--jumper-258
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#prline
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:I
fopwri1;:n
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:p
fopwri1;:r
fopwri1;:e
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:2
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;vdi--label
#val (used with set to change variable value during runtime.)
setreg1;10x1
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #268
iowrite1;>vdi.cli.status#SSTNPL Source Line: '268' 
#Upward range iterator
dataread1;>@4
datawrite1;>vdi_iter
setreg1;>uiter-retpos-270;uiter-loopback-270
s1push1
goto;>vdi_buffiter--label
dataread1;>vdi_iter;uiter-retpos-270
setreg2;10x1
add
datawrite1;>vdi_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-270
gotoif;>uiter-loopback-270

#val (used with set to change variable value during runtime.)
setreg1;:\n
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #272
iowrite1;>vdi.cli.in#SSTNPL Source Line: '272' 
#goto 
goto;>vdi_outloop--label
#label
null;;vdi_outloop--label
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #279
ioread1;>vdi.cli.out#SSTNPL Source Line: '279' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>vdi_vdioutput_buffer
#conditional return
dataread1;>vdi_vdioutput_buffer
dataread2;>@0
gotoif;>goto--branch-282
goto;>goto--jumper-282
s1pop1;;goto--branch-282
gotoreg1
null;;goto--jumper-282
#Dump (character)
dataread1;>vdi_vdioutput_buffer
iowrite1;>io.ttywr
#goto 
goto;>vdi_outloop--label
#label
null;;drives--label
#prline
fopwri1;:A
fopwri1;::
fopwri1;:\s
fopwri1;:9
fopwri1;:.
fopwri1;:5
fopwri1;:M
fopwri1;:N
fopwri1;:\s
fopwri1;:(
fopwri1;:T
fopwri1;:D
fopwri1;:S
fopwri1;:K
fopwri1;:1
fopwri1;:)
fopwri1;:\s
fopwri1;:f
fopwri1;:l
fopwri1;:o
fopwri1;:p
fopwri1;:p
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:B
fopwri1;::
fopwri1;:\s
fopwri1;:9
fopwri1;:.
fopwri1;:5
fopwri1;:M
fopwri1;:N
fopwri1;:\s
fopwri1;:(
fopwri1;:T
fopwri1;:D
fopwri1;:S
fopwri1;:K
fopwri1;:1
fopwri1;:)
fopwri1;:\s
fopwri1;:f
fopwri1;:l
fopwri1;:o
fopwri1;:p
fopwri1;:p
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:R
fopwri1;::
fopwri1;:\s
fopwri1;:9
fopwri1;:.
fopwri1;:5
fopwri1;:M
fopwri1;:N
fopwri1;:\s
fopwri1;:H
fopwri1;:a
fopwri1;:r
fopwri1;:d
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:R
fopwri1;:a
fopwri1;:m
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;vdi_buffiter--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>vdi_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--295
dataread1;;tabr--adrbuff--295
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #296
iowrite1;>vdi.cli.in#SSTNPL Source Line: '296' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;help--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:[
fopwri1;:c
fopwri1;:m
fopwri1;:d
fopwri1;:]
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:a
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:r
fopwri1;:i
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:s
fopwri1;:o
fopwri1;:l
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:'
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\n
#prline
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:*
fopwri1;::
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:l
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:u
fopwri1;:r
fopwri1;:r
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:'
fopwri1;:A
fopwri1;::
fopwri1;:'
fopwri1;:\m
fopwri1;:\s
fopwri1;:'
fopwri1;:B
fopwri1;::
fopwri1;:'
fopwri1;:\m
fopwri1;:\s
fopwri1;:'
fopwri1;:R
fopwri1;::
fopwri1;:'
fopwri1;:)
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:-
fopwri1;:i
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:i
fopwri1;:t
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:m
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\n
#prline
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\n
#prline
fopwri1;:a
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:A
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:\s
fopwri1;:<
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:>
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:C
fopwri1;:U
fopwri1;:R
fopwri1;:R
fopwri1;:E
fopwri1;:N
fopwri1;:T
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:a
fopwri1;:l
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:s
fopwri1;:p
fopwri1;:e
fopwri1;:c
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\s
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:n
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:m
fopwri1;:u
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:a
fopwri1;:r
fopwri1;:c
fopwri1;:h
fopwri1;:\s
fopwri1;:c
fopwri1;:u
fopwri1;:r
fopwri1;:r
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\m
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:a
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:s
fopwri1;:\m
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:-
fopwri1;:l
fopwri1;:o
fopwri1;:a
fopwri1;:d
fopwri1;:\n
#prline
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:t
fopwri1;:c
fopwri1;:h
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:*
fopwri1;::
fopwri1;:\b
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:r
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:*
fopwri1;:)
fopwri1;:\s
fopwri1;:e
fopwri1;:.
fopwri1;:g
fopwri1;:.
fopwri1;:\s
fopwri1;:A
fopwri1;::
fopwri1;:\b
fopwri1;:b
fopwri1;:o
fopwri1;:o
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:b
fopwri1;:o
fopwri1;:o
fopwri1;:t
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:A
fopwri1;::
fopwri1;:\n
#print
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;about--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:A
fopwri1;:B
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-326
s1push1
goto;>splash--label
null;;goto--jumper-326
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:\s
fopwri1;:(
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:D
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\s
fopwri1;:O
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:S
fopwri1;:y
fopwri1;:s
fopwri1;:t
fopwri1;:e
fopwri1;:m
fopwri1;:)
fopwri1;:\n
#prline
fopwri1;:P
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:2
fopwri1;:-
fopwri1;:9
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:r
fopwri1;:i
fopwri1;:g
fopwri1;:h
fopwri1;:t
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:)
fopwri1;:\s
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:8
fopwri1;:-
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:9
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:o
fopwri1;:m
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:L
fopwri1;:e
fopwri1;:a
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:\s
fopwri1;:&
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:s
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:/
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:m
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:p
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:b
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:S
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:o
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\m
fopwri1;:\s
fopwri1;:e
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:3
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:(
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:r
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:)
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:y
fopwri1;:\s
fopwri1;:l
fopwri1;:a
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:h
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:b
fopwri1;:e
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:f
fopwri1;:u
fopwri1;:l
fopwri1;:\m
fopwri1;:\n
#prline
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:T
fopwri1;:H
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:\s
fopwri1;:A
fopwri1;:N
fopwri1;:Y
fopwri1;:\s
fopwri1;:W
fopwri1;:A
fopwri1;:R
fopwri1;:R
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:Y
fopwri1;:\c
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:e
fopwri1;:v
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:m
fopwri1;:p
fopwri1;:l
fopwri1;:i
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:r
fopwri1;:a
fopwri1;:n
fopwri1;:t
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\n
#prline
fopwri1;:M
fopwri1;:E
fopwri1;:R
fopwri1;:C
fopwri1;:H
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:A
fopwri1;:B
fopwri1;:I
fopwri1;:L
fopwri1;:I
fopwri1;:T
fopwri1;:Y
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:F
fopwri1;:I
fopwri1;:T
fopwri1;:N
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:F
fopwri1;:O
fopwri1;:R
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:P
fopwri1;:A
fopwri1;:R
fopwri1;:T
fopwri1;:I
fopwri1;:C
fopwri1;:U
fopwri1;:L
fopwri1;:A
fopwri1;:R
fopwri1;:\s
fopwri1;:P
fopwri1;:U
fopwri1;:R
fopwri1;:P
fopwri1;:O
fopwri1;:S
fopwri1;:E
fopwri1;:.
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:l
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:h
fopwri1;:a
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:e
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\n
#print
fopwri1;:a
fopwri1;:l
fopwri1;:o
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:.
fopwri1;:\s
fopwri1;:I
fopwri1;:f
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:t
fopwri1;:\m
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:<
fopwri1;:h
fopwri1;:t
fopwri1;:t
fopwri1;:p
fopwri1;::
fopwri1;:/
fopwri1;:/
fopwri1;:w
fopwri1;:w
fopwri1;:w
fopwri1;:.
fopwri1;:g
fopwri1;:n
fopwri1;:u
fopwri1;:.
fopwri1;:o
fopwri1;:r
fopwri1;:g
fopwri1;:/
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:s
fopwri1;:/
fopwri1;:>
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;splash--label
#Set text colors
dataread1;>*+++0--
iowrite1;>io.textcolor
#print
fopwri1;:S
#Set text colors
dataread1;>*+++00-
iowrite1;>io.textcolor
#print
fopwri1;:B
#Set text colors
dataread1;>*+++-0-
iowrite1;>io.textcolor
#print
fopwri1;:T
#Set text colors
dataread1;>*+++-00
iowrite1;>io.textcolor
#print
fopwri1;:C
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#print
fopwri1;:V
#Set text colors
dataread1;>*+++0-0
iowrite1;>io.textcolor
#print
fopwri1;:M
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print
fopwri1;:-
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#print
fopwri1;:D
fopwri1;:O
fopwri1;:S
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#return from subroutine.
s1pop1
gotoreg1
#label
null;;shutdown--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-375
s1push1
goto;>splash--label
null;;goto--jumper-375
#prline
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:o
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#stop (shutdown vm)
stop
#module include: line 383: comprompt as cp
includeas;comprompt,cp
#END OF FILE
