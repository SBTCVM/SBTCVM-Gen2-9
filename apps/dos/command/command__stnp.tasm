#SSTNPL COMPILER v0.3.0
#header
head-rname=command
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/dos/command/command.stnp
null;+++---;*+++---
null;10x1;@1
null;0;cmdflg
null;0;validflg
null;:A;drive
null;0+0---;*0+0---
null;10x0;@0
null;10x3;@3
null;10x0;run_iter
null;:R;:R
null;:B;:B
null;:A;:A
null;10x4;@4
null;:0;driveref
null;0;invalid_charcheck
null;++0---;*++0---
null;10x2;@2
null;::;::
null;:0;:0
null;:1;:1
null;:2;:2
null;0;run_s_tmp
null;0;run_tobuffer_flg
null;:\s;:\s
null;0++---;*0++---
null;0;vdi_vdioutput_buffer
null;10x0;vdi_iter
null;+++--0;*+++--0
null;+++0--;*+++0--
null;+++00-;*+++00-
null;+++-0-;*+++-0-
null;+++-00;*+++-00
null;+++0-0;*+++0-0
#label
null;;startup--label
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#prline
fopwri1;:T
fopwri1;:y
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:?
fopwri1;:'
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:.
fopwri1;:\s
fopwri1;:R
fopwri1;:E
fopwri1;:A
fopwri1;:D
fopwri1;:Y
fopwri1;:.
fopwri1;:\n
#vdi mode set
dataread1;>@1
iowrite1;>vdi.cli.status
#val (used with set to change variable value during runtime.)
setreg1;10x70
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.max
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cp.clearbuffer
#goto 
goto;>main--label
#buffer 2 reset
iowrite1;>buffer.2.reset
#label
null;;main--label
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#Dump (character)
dataread1;>drive
iowrite1;>io.ttywr
#print
fopwri1;::
fopwri1;:\b
fopwri1;:>
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#goto (extra code stores away return address.)
setreg1;>goto--jumper-30
s1push1
goto;>cp.getentry--label
null;;goto--jumper-30
#print newline
fopwri1;:\n
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>validflg
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--36
null;;tabstrc--adrbuff--36
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--36
null;;tabstrc--outbuff--36
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--36

datawrite1;>tabstrc--recurs-tabbuff--36_1
dataread1;;tabstrc--recurs-tabbuff--36_1
datawrite1;>tabstrc--recurs-tabbuff_read--36_1
dataread1;;tabstrc--recurs-tabbuff_read--36_1

setreg2;:?


gotoif;>tabstrc--recurs-checkyes--36_1
goto;>tabstrc--recurs-checkno--36_1
null;;tabstrc--recurs-checkyes--36_1
##set flag########
setreg1;>tabstrc--outbuff--36
datawrite1;>tabstrc--recurs-flag--36_1
setreg1;+
datawrite1;;tabstrc--recurs-flag--36_1
#recursionskip endpoint
null;;tabstrc--recurs-checkno--36_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--36
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-38
goto;>goto--jumper-38
setreg1;>goto--jumper-38;goto--branch-38
s1push1
goto;>help--label
null;;goto--jumper-38
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-39
goto;>goto--jumper-39
dataread1;>@1;goto--branch-39
datawrite1;>validflg
null;;goto--jumper-39
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--40
null;;tabstrc--adrbuff--40
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--40
null;;tabstrc--outbuff--40
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_1
dataread1;;tabstrc--recurs-tabbuff--40_1
datawrite1;>tabstrc--recurs-tabbuff_read--40_1
dataread1;;tabstrc--recurs-tabbuff_read--40_1

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--40_1
goto;>tabstrc--recurs-checkno--40_1
null;;tabstrc--recurs-checkyes--40_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_2
dataread1;;tabstrc--recurs-tabbuff--40_2
datawrite1;>tabstrc--recurs-tabbuff_read--40_2
dataread1;;tabstrc--recurs-tabbuff_read--40_2

setreg2;:b


gotoif;>tabstrc--recurs-checkyes--40_2
goto;>tabstrc--recurs-checkno--40_2
null;;tabstrc--recurs-checkyes--40_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_3
dataread1;;tabstrc--recurs-tabbuff--40_3
datawrite1;>tabstrc--recurs-tabbuff_read--40_3
dataread1;;tabstrc--recurs-tabbuff_read--40_3

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--40_3
goto;>tabstrc--recurs-checkno--40_3
null;;tabstrc--recurs-checkyes--40_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_4
dataread1;;tabstrc--recurs-tabbuff--40_4
datawrite1;>tabstrc--recurs-tabbuff_read--40_4
dataread1;;tabstrc--recurs-tabbuff_read--40_4

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--40_4
goto;>tabstrc--recurs-checkno--40_4
null;;tabstrc--recurs-checkyes--40_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--40
setreg2;+
add
datawrite1;>tabstrc--adrbuff--40

setreg1;>tabstrc--adrbuff--40

datawrite1;>tabstrc--recurs-tabbuff--40_5
dataread1;;tabstrc--recurs-tabbuff--40_5
datawrite1;>tabstrc--recurs-tabbuff_read--40_5
dataread1;;tabstrc--recurs-tabbuff_read--40_5

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--40_5
goto;>tabstrc--recurs-checkno--40_5
null;;tabstrc--recurs-checkyes--40_5
##set flag########
setreg1;>tabstrc--outbuff--40
datawrite1;>tabstrc--recurs-flag--40_5
setreg1;+
datawrite1;;tabstrc--recurs-flag--40_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--40_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--40
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-42
goto;>goto--jumper-42
setreg1;>goto--jumper-42;goto--branch-42
s1push1
goto;>about--label
null;;goto--jumper-42
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-43
goto;>goto--jumper-43
dataread1;>@1;goto--branch-43
datawrite1;>validflg
null;;goto--jumper-43
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--44
null;;tabstrc--adrbuff--44
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--44
null;;tabstrc--outbuff--44
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--44

datawrite1;>tabstrc--recurs-tabbuff--44_1
dataread1;;tabstrc--recurs-tabbuff--44_1
datawrite1;>tabstrc--recurs-tabbuff_read--44_1
dataread1;;tabstrc--recurs-tabbuff_read--44_1

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--44_1
goto;>tabstrc--recurs-checkno--44_1
null;;tabstrc--recurs-checkyes--44_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--44
setreg2;+
add
datawrite1;>tabstrc--adrbuff--44

setreg1;>tabstrc--adrbuff--44

datawrite1;>tabstrc--recurs-tabbuff--44_2
dataread1;;tabstrc--recurs-tabbuff--44_2
datawrite1;>tabstrc--recurs-tabbuff_read--44_2
dataread1;;tabstrc--recurs-tabbuff_read--44_2

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--44_2
goto;>tabstrc--recurs-checkno--44_2
null;;tabstrc--recurs-checkyes--44_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--44
setreg2;+
add
datawrite1;>tabstrc--adrbuff--44

setreg1;>tabstrc--adrbuff--44

datawrite1;>tabstrc--recurs-tabbuff--44_3
dataread1;;tabstrc--recurs-tabbuff--44_3
datawrite1;>tabstrc--recurs-tabbuff_read--44_3
dataread1;;tabstrc--recurs-tabbuff_read--44_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--44_3
goto;>tabstrc--recurs-checkno--44_3
null;;tabstrc--recurs-checkyes--44_3
##set flag########
setreg1;>tabstrc--outbuff--44
datawrite1;>tabstrc--recurs-flag--44_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--44_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--44_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--44_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--44_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--44
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-46
goto;>goto--jumper-46
setreg1;>goto--jumper-46;goto--branch-46
s1push1
goto;>vdi--label
null;;goto--jumper-46
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-47
goto;>goto--jumper-47
dataread1;>@1;goto--branch-47
datawrite1;>validflg
null;;goto--jumper-47
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--48
null;;tabstrc--adrbuff--48
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--48
null;;tabstrc--outbuff--48
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--48

datawrite1;>tabstrc--recurs-tabbuff--48_1
dataread1;;tabstrc--recurs-tabbuff--48_1
datawrite1;>tabstrc--recurs-tabbuff_read--48_1
dataread1;;tabstrc--recurs-tabbuff_read--48_1

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--48_1
goto;>tabstrc--recurs-checkno--48_1
null;;tabstrc--recurs-checkyes--48_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--48
setreg2;+
add
datawrite1;>tabstrc--adrbuff--48

setreg1;>tabstrc--adrbuff--48

datawrite1;>tabstrc--recurs-tabbuff--48_2
dataread1;;tabstrc--recurs-tabbuff--48_2
datawrite1;>tabstrc--recurs-tabbuff_read--48_2
dataread1;;tabstrc--recurs-tabbuff_read--48_2

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--48_2
goto;>tabstrc--recurs-checkno--48_2
null;;tabstrc--recurs-checkyes--48_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--48
setreg2;+
add
datawrite1;>tabstrc--adrbuff--48

setreg1;>tabstrc--adrbuff--48

datawrite1;>tabstrc--recurs-tabbuff--48_3
dataread1;;tabstrc--recurs-tabbuff--48_3
datawrite1;>tabstrc--recurs-tabbuff_read--48_3
dataread1;;tabstrc--recurs-tabbuff_read--48_3

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--48_3
goto;>tabstrc--recurs-checkno--48_3
null;;tabstrc--recurs-checkyes--48_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--48
setreg2;+
add
datawrite1;>tabstrc--adrbuff--48

setreg1;>tabstrc--adrbuff--48

datawrite1;>tabstrc--recurs-tabbuff--48_4
dataread1;;tabstrc--recurs-tabbuff--48_4
datawrite1;>tabstrc--recurs-tabbuff_read--48_4
dataread1;;tabstrc--recurs-tabbuff_read--48_4

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--48_4
goto;>tabstrc--recurs-checkno--48_4
null;;tabstrc--recurs-checkyes--48_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--48
setreg2;+
add
datawrite1;>tabstrc--adrbuff--48

setreg1;>tabstrc--adrbuff--48

datawrite1;>tabstrc--recurs-tabbuff--48_5
dataread1;;tabstrc--recurs-tabbuff--48_5
datawrite1;>tabstrc--recurs-tabbuff_read--48_5
dataread1;;tabstrc--recurs-tabbuff_read--48_5

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--48_5
goto;>tabstrc--recurs-checkno--48_5
null;;tabstrc--recurs-checkyes--48_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--48
setreg2;+
add
datawrite1;>tabstrc--adrbuff--48

setreg1;>tabstrc--adrbuff--48

datawrite1;>tabstrc--recurs-tabbuff--48_6
dataread1;;tabstrc--recurs-tabbuff--48_6
datawrite1;>tabstrc--recurs-tabbuff_read--48_6
dataread1;;tabstrc--recurs-tabbuff_read--48_6

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--48_6
goto;>tabstrc--recurs-checkno--48_6
null;;tabstrc--recurs-checkyes--48_6
##set flag########
setreg1;>tabstrc--outbuff--48
datawrite1;>tabstrc--recurs-flag--48_6
setreg1;+
datawrite1;;tabstrc--recurs-flag--48_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--48_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--48_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--48_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--48_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--48_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--48_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--48
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-50
goto;>goto--jumper-50
setreg1;>goto--jumper-50;goto--branch-50
s1push1
goto;>drives--label
null;;goto--jumper-50
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-51
goto;>goto--jumper-51
dataread1;>@1;goto--branch-51
datawrite1;>validflg
null;;goto--jumper-51
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--52
null;;tabstrc--adrbuff--52
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--52
null;;tabstrc--outbuff--52
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--52

datawrite1;>tabstrc--recurs-tabbuff--52_1
dataread1;;tabstrc--recurs-tabbuff--52_1
datawrite1;>tabstrc--recurs-tabbuff_read--52_1
dataread1;;tabstrc--recurs-tabbuff_read--52_1

setreg2;:v


gotoif;>tabstrc--recurs-checkyes--52_1
goto;>tabstrc--recurs-checkno--52_1
null;;tabstrc--recurs-checkyes--52_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--52
setreg2;+
add
datawrite1;>tabstrc--adrbuff--52

setreg1;>tabstrc--adrbuff--52

datawrite1;>tabstrc--recurs-tabbuff--52_2
dataread1;;tabstrc--recurs-tabbuff--52_2
datawrite1;>tabstrc--recurs-tabbuff_read--52_2
dataread1;;tabstrc--recurs-tabbuff_read--52_2

setreg2;:e


gotoif;>tabstrc--recurs-checkyes--52_2
goto;>tabstrc--recurs-checkno--52_2
null;;tabstrc--recurs-checkyes--52_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--52
setreg2;+
add
datawrite1;>tabstrc--adrbuff--52

setreg1;>tabstrc--adrbuff--52

datawrite1;>tabstrc--recurs-tabbuff--52_3
dataread1;;tabstrc--recurs-tabbuff--52_3
datawrite1;>tabstrc--recurs-tabbuff_read--52_3
dataread1;;tabstrc--recurs-tabbuff_read--52_3

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--52_3
goto;>tabstrc--recurs-checkno--52_3
null;;tabstrc--recurs-checkyes--52_3
##set flag########
setreg1;>tabstrc--outbuff--52
datawrite1;>tabstrc--recurs-flag--52_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--52_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--52_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--52_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--52_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--52
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-54
goto;>goto--jumper-54
setreg1;>goto--jumper-54;goto--branch-54
s1push1
goto;>version--label
null;;goto--jumper-54
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-55
goto;>goto--jumper-55
dataread1;>@1;goto--branch-55
datawrite1;>validflg
null;;goto--jumper-55
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--56
null;;tabstrc--adrbuff--56
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--56
null;;tabstrc--outbuff--56
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--56

datawrite1;>tabstrc--recurs-tabbuff--56_1
dataread1;;tabstrc--recurs-tabbuff--56_1
datawrite1;>tabstrc--recurs-tabbuff_read--56_1
dataread1;;tabstrc--recurs-tabbuff_read--56_1

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--56_1
goto;>tabstrc--recurs-checkno--56_1
null;;tabstrc--recurs-checkyes--56_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--56
setreg2;+
add
datawrite1;>tabstrc--adrbuff--56

setreg1;>tabstrc--adrbuff--56

datawrite1;>tabstrc--recurs-tabbuff--56_2
dataread1;;tabstrc--recurs-tabbuff--56_2
datawrite1;>tabstrc--recurs-tabbuff_read--56_2
dataread1;;tabstrc--recurs-tabbuff_read--56_2

setreg2;:i


gotoif;>tabstrc--recurs-checkyes--56_2
goto;>tabstrc--recurs-checkno--56_2
null;;tabstrc--recurs-checkyes--56_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--56
setreg2;+
add
datawrite1;>tabstrc--adrbuff--56

setreg1;>tabstrc--adrbuff--56

datawrite1;>tabstrc--recurs-tabbuff--56_3
dataread1;;tabstrc--recurs-tabbuff--56_3
datawrite1;>tabstrc--recurs-tabbuff_read--56_3
dataread1;;tabstrc--recurs-tabbuff_read--56_3

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--56_3
goto;>tabstrc--recurs-checkno--56_3
null;;tabstrc--recurs-checkyes--56_3
##set flag########
setreg1;>tabstrc--outbuff--56
datawrite1;>tabstrc--recurs-flag--56_3
setreg1;+
datawrite1;;tabstrc--recurs-flag--56_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--56_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--56_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--56_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--56
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-58
goto;>goto--jumper-58
setreg1;>goto--jumper-58;goto--branch-58
s1push1
goto;>directory_list--label
null;;goto--jumper-58
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-59
goto;>goto--jumper-59
dataread1;>@1;goto--branch-59
datawrite1;>validflg
null;;goto--jumper-59
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--60
null;;tabstrc--adrbuff--60
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--60
null;;tabstrc--outbuff--60
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_1
dataread1;;tabstrc--recurs-tabbuff--60_1
datawrite1;>tabstrc--recurs-tabbuff_read--60_1
dataread1;;tabstrc--recurs-tabbuff_read--60_1

setreg2;:s


gotoif;>tabstrc--recurs-checkyes--60_1
goto;>tabstrc--recurs-checkno--60_1
null;;tabstrc--recurs-checkyes--60_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_2
dataread1;;tabstrc--recurs-tabbuff--60_2
datawrite1;>tabstrc--recurs-tabbuff_read--60_2
dataread1;;tabstrc--recurs-tabbuff_read--60_2

setreg2;:h


gotoif;>tabstrc--recurs-checkyes--60_2
goto;>tabstrc--recurs-checkno--60_2
null;;tabstrc--recurs-checkyes--60_2
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_3
dataread1;;tabstrc--recurs-tabbuff--60_3
datawrite1;>tabstrc--recurs-tabbuff_read--60_3
dataread1;;tabstrc--recurs-tabbuff_read--60_3

setreg2;:u


gotoif;>tabstrc--recurs-checkyes--60_3
goto;>tabstrc--recurs-checkno--60_3
null;;tabstrc--recurs-checkyes--60_3
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_4
dataread1;;tabstrc--recurs-tabbuff--60_4
datawrite1;>tabstrc--recurs-tabbuff_read--60_4
dataread1;;tabstrc--recurs-tabbuff_read--60_4

setreg2;:t


gotoif;>tabstrc--recurs-checkyes--60_4
goto;>tabstrc--recurs-checkno--60_4
null;;tabstrc--recurs-checkyes--60_4
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_5
dataread1;;tabstrc--recurs-tabbuff--60_5
datawrite1;>tabstrc--recurs-tabbuff_read--60_5
dataread1;;tabstrc--recurs-tabbuff_read--60_5

setreg2;:d


gotoif;>tabstrc--recurs-checkyes--60_5
goto;>tabstrc--recurs-checkno--60_5
null;;tabstrc--recurs-checkyes--60_5
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_6
dataread1;;tabstrc--recurs-tabbuff--60_6
datawrite1;>tabstrc--recurs-tabbuff_read--60_6
dataread1;;tabstrc--recurs-tabbuff_read--60_6

setreg2;:o


gotoif;>tabstrc--recurs-checkyes--60_6
goto;>tabstrc--recurs-checkno--60_6
null;;tabstrc--recurs-checkyes--60_6
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_7
dataread1;;tabstrc--recurs-tabbuff--60_7
datawrite1;>tabstrc--recurs-tabbuff_read--60_7
dataread1;;tabstrc--recurs-tabbuff_read--60_7

setreg2;:w


gotoif;>tabstrc--recurs-checkyes--60_7
goto;>tabstrc--recurs-checkno--60_7
null;;tabstrc--recurs-checkyes--60_7
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--60
setreg2;+
add
datawrite1;>tabstrc--adrbuff--60

setreg1;>tabstrc--adrbuff--60

datawrite1;>tabstrc--recurs-tabbuff--60_8
dataread1;;tabstrc--recurs-tabbuff--60_8
datawrite1;>tabstrc--recurs-tabbuff_read--60_8
dataread1;;tabstrc--recurs-tabbuff_read--60_8

setreg2;:n


gotoif;>tabstrc--recurs-checkyes--60_8
goto;>tabstrc--recurs-checkno--60_8
null;;tabstrc--recurs-checkyes--60_8
##set flag########
setreg1;>tabstrc--outbuff--60
datawrite1;>tabstrc--recurs-flag--60_8
setreg1;+
datawrite1;;tabstrc--recurs-flag--60_8
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_8
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_7
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_6
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_5
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_4
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_3
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--60_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--60
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-62
goto;>goto--jumper-62
setreg1;>goto--jumper-62;goto--branch-62
s1push1
goto;>shutdown--label
null;;goto--jumper-62
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-63
goto;>goto--jumper-63
dataread1;>@1;goto--branch-63
datawrite1;>validflg
null;;goto--jumper-63
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--66
null;;tabstrc--adrbuff--66
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--66
null;;tabstrc--outbuff--66
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--66

datawrite1;>tabstrc--recurs-tabbuff--66_1
dataread1;;tabstrc--recurs-tabbuff--66_1
datawrite1;>tabstrc--recurs-tabbuff_read--66_1
dataread1;;tabstrc--recurs-tabbuff_read--66_1

setreg2;:a


gotoif;>tabstrc--recurs-checkyes--66_1
goto;>tabstrc--recurs-checkno--66_1
null;;tabstrc--recurs-checkyes--66_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--66
setreg2;+
add
datawrite1;>tabstrc--adrbuff--66

setreg1;>tabstrc--adrbuff--66

datawrite1;>tabstrc--recurs-tabbuff--66_2
dataread1;;tabstrc--recurs-tabbuff--66_2
datawrite1;>tabstrc--recurs-tabbuff_read--66_2
dataread1;;tabstrc--recurs-tabbuff_read--66_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--66_2
goto;>tabstrc--recurs-checkno--66_2
null;;tabstrc--recurs-checkyes--66_2
##set flag########
setreg1;>tabstrc--outbuff--66
datawrite1;>tabstrc--recurs-flag--66_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--66_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--66_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--66_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--66
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-68
goto;>goto--jumper-68
setreg1;>goto--jumper-68;goto--branch-68
s1push1
goto;>driveA--label
null;;goto--jumper-68
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-69
goto;>goto--jumper-69
dataread1;>@1;goto--branch-69
datawrite1;>validflg
null;;goto--jumper-69
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--70
null;;tabstrc--adrbuff--70
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--70
null;;tabstrc--outbuff--70
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--70

datawrite1;>tabstrc--recurs-tabbuff--70_1
dataread1;;tabstrc--recurs-tabbuff--70_1
datawrite1;>tabstrc--recurs-tabbuff_read--70_1
dataread1;;tabstrc--recurs-tabbuff_read--70_1

setreg2;:A


gotoif;>tabstrc--recurs-checkyes--70_1
goto;>tabstrc--recurs-checkno--70_1
null;;tabstrc--recurs-checkyes--70_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--70
setreg2;+
add
datawrite1;>tabstrc--adrbuff--70

setreg1;>tabstrc--adrbuff--70

datawrite1;>tabstrc--recurs-tabbuff--70_2
dataread1;;tabstrc--recurs-tabbuff--70_2
datawrite1;>tabstrc--recurs-tabbuff_read--70_2
dataread1;;tabstrc--recurs-tabbuff_read--70_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--70_2
goto;>tabstrc--recurs-checkno--70_2
null;;tabstrc--recurs-checkyes--70_2
##set flag########
setreg1;>tabstrc--outbuff--70
datawrite1;>tabstrc--recurs-flag--70_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--70_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--70_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--70_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--70
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-72
goto;>goto--jumper-72
setreg1;>goto--jumper-72;goto--branch-72
s1push1
goto;>driveA--label
null;;goto--jumper-72
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-73
goto;>goto--jumper-73
dataread1;>@1;goto--branch-73
datawrite1;>validflg
null;;goto--jumper-73
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--75
null;;tabstrc--adrbuff--75
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--75
null;;tabstrc--outbuff--75
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--75

datawrite1;>tabstrc--recurs-tabbuff--75_1
dataread1;;tabstrc--recurs-tabbuff--75_1
datawrite1;>tabstrc--recurs-tabbuff_read--75_1
dataread1;;tabstrc--recurs-tabbuff_read--75_1

setreg2;:b


gotoif;>tabstrc--recurs-checkyes--75_1
goto;>tabstrc--recurs-checkno--75_1
null;;tabstrc--recurs-checkyes--75_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--75
setreg2;+
add
datawrite1;>tabstrc--adrbuff--75

setreg1;>tabstrc--adrbuff--75

datawrite1;>tabstrc--recurs-tabbuff--75_2
dataread1;;tabstrc--recurs-tabbuff--75_2
datawrite1;>tabstrc--recurs-tabbuff_read--75_2
dataread1;;tabstrc--recurs-tabbuff_read--75_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--75_2
goto;>tabstrc--recurs-checkno--75_2
null;;tabstrc--recurs-checkyes--75_2
##set flag########
setreg1;>tabstrc--outbuff--75
datawrite1;>tabstrc--recurs-flag--75_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--75_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--75_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--75_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--75
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-77
goto;>goto--jumper-77
setreg1;>goto--jumper-77;goto--branch-77
s1push1
goto;>driveB--label
null;;goto--jumper-77
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-78
goto;>goto--jumper-78
dataread1;>@1;goto--branch-78
datawrite1;>validflg
null;;goto--jumper-78
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--79
null;;tabstrc--adrbuff--79
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--79
null;;tabstrc--outbuff--79
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--79

datawrite1;>tabstrc--recurs-tabbuff--79_1
dataread1;;tabstrc--recurs-tabbuff--79_1
datawrite1;>tabstrc--recurs-tabbuff_read--79_1
dataread1;;tabstrc--recurs-tabbuff_read--79_1

setreg2;:B


gotoif;>tabstrc--recurs-checkyes--79_1
goto;>tabstrc--recurs-checkno--79_1
null;;tabstrc--recurs-checkyes--79_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--79
setreg2;+
add
datawrite1;>tabstrc--adrbuff--79

setreg1;>tabstrc--adrbuff--79

datawrite1;>tabstrc--recurs-tabbuff--79_2
dataread1;;tabstrc--recurs-tabbuff--79_2
datawrite1;>tabstrc--recurs-tabbuff_read--79_2
dataread1;;tabstrc--recurs-tabbuff_read--79_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--79_2
goto;>tabstrc--recurs-checkno--79_2
null;;tabstrc--recurs-checkyes--79_2
##set flag########
setreg1;>tabstrc--outbuff--79
datawrite1;>tabstrc--recurs-flag--79_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--79_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--79_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--79_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--79
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-81
goto;>goto--jumper-81
setreg1;>goto--jumper-81;goto--branch-81
s1push1
goto;>driveB--label
null;;goto--jumper-81
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-82
goto;>goto--jumper-82
dataread1;>@1;goto--branch-82
datawrite1;>validflg
null;;goto--jumper-82
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--84
null;;tabstrc--adrbuff--84
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--84
null;;tabstrc--outbuff--84
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--84

datawrite1;>tabstrc--recurs-tabbuff--84_1
dataread1;;tabstrc--recurs-tabbuff--84_1
datawrite1;>tabstrc--recurs-tabbuff_read--84_1
dataread1;;tabstrc--recurs-tabbuff_read--84_1

setreg2;:r


gotoif;>tabstrc--recurs-checkyes--84_1
goto;>tabstrc--recurs-checkno--84_1
null;;tabstrc--recurs-checkyes--84_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--84
setreg2;+
add
datawrite1;>tabstrc--adrbuff--84

setreg1;>tabstrc--adrbuff--84

datawrite1;>tabstrc--recurs-tabbuff--84_2
dataread1;;tabstrc--recurs-tabbuff--84_2
datawrite1;>tabstrc--recurs-tabbuff_read--84_2
dataread1;;tabstrc--recurs-tabbuff_read--84_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--84_2
goto;>tabstrc--recurs-checkno--84_2
null;;tabstrc--recurs-checkyes--84_2
##set flag########
setreg1;>tabstrc--outbuff--84
datawrite1;>tabstrc--recurs-flag--84_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--84_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--84_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--84_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--84
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-86
goto;>goto--jumper-86
setreg1;>goto--jumper-86;goto--branch-86
s1push1
goto;>driveR--label
null;;goto--jumper-86
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-87
goto;>goto--jumper-87
dataread1;>@1;goto--branch-87
datawrite1;>validflg
null;;goto--jumper-87
#######tabstrc
#init
setreg1;10x85
dataread2;>@0
mul
dataread2;>@0
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabstrc--adrbuff--88
null;;tabstrc--adrbuff--88
#reset output buffer to 0
setreg1;0
datawrite1;>tabstrc--outbuff--88
null;;tabstrc--outbuff--88
#recursive_parser
#recursion

setreg1;>tabstrc--adrbuff--88

datawrite1;>tabstrc--recurs-tabbuff--88_1
dataread1;;tabstrc--recurs-tabbuff--88_1
datawrite1;>tabstrc--recurs-tabbuff_read--88_1
dataread1;;tabstrc--recurs-tabbuff_read--88_1

setreg2;:R


gotoif;>tabstrc--recurs-checkyes--88_1
goto;>tabstrc--recurs-checkno--88_1
null;;tabstrc--recurs-checkyes--88_1
#recursion
#increment pointer
dataread1;>tabstrc--adrbuff--88
setreg2;+
add
datawrite1;>tabstrc--adrbuff--88

setreg1;>tabstrc--adrbuff--88

datawrite1;>tabstrc--recurs-tabbuff--88_2
dataread1;;tabstrc--recurs-tabbuff--88_2
datawrite1;>tabstrc--recurs-tabbuff_read--88_2
dataread1;;tabstrc--recurs-tabbuff_read--88_2

setreg2;::


gotoif;>tabstrc--recurs-checkyes--88_2
goto;>tabstrc--recurs-checkno--88_2
null;;tabstrc--recurs-checkyes--88_2
##set flag########
setreg1;>tabstrc--outbuff--88
datawrite1;>tabstrc--recurs-flag--88_2
setreg1;+
datawrite1;;tabstrc--recurs-flag--88_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--88_2
#recursionskip endpoint
null;;tabstrc--recurs-checkno--88_1
#read output to register 1 for 'set' to use.
dataread1;>tabstrc--outbuff--88
#######tabstrc END
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cmdflg
#conditional subroutine goto
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-90
goto;>goto--jumper-90
setreg1;>goto--jumper-90;goto--branch-90
s1push1
goto;>driveR--label
null;;goto--jumper-90
#conditional set
dataread1;>cmdflg
dataread2;>@1
gotoif;>goto--branch-91
goto;>goto--jumper-91
dataread1;>@1;goto--branch-91
datawrite1;>validflg
null;;goto--jumper-91
#conditional subroutine goto
dataread1;>validflg
dataread2;>@0
gotoif;>goto--branch-93
goto;>goto--jumper-93
setreg1;>goto--jumper-93;goto--branch-93
s1push1
goto;>invalid--label
null;;goto--jumper-93
#goto 
goto;>main--label
#label
null;;driveA--label
#val (used with set to change variable value during runtime.)
setreg1;:A
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drive
#conditional return
dataread1;>cp.size
dataread2;>@3
gotoifless;>goto--branch-101
goto;>goto--jumper-101
s1pop1;;goto--branch-101
gotoreg1
null;;goto--jumper-101
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:0
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-109
s1push1
goto;>run_send_setup--label
null;;goto--jumper-109
#Upward range iterator
dataread1;>@3
datawrite1;>run_iter
setreg1;>uiter-retpos-110;uiter-loopback-110
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-110
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-110
gotoif;>uiter-loopback-110

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-113
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-113
#return from subroutine.
s1pop1
gotoreg1
#label
null;;driveB--label
#val (used with set to change variable value during runtime.)
setreg1;:B
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drive
#conditional return
dataread1;>cp.size
dataread2;>@3
gotoifless;>goto--branch-119
goto;>goto--jumper-119
s1pop1;;goto--branch-119
gotoreg1
null;;goto--jumper-119
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:1
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-127
s1push1
goto;>run_send_setup--label
null;;goto--jumper-127
#Upward range iterator
dataread1;>@3
datawrite1;>run_iter
setreg1;>uiter-retpos-128;uiter-loopback-128
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-128
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-128
gotoif;>uiter-loopback-128

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-131
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-131
#return from subroutine.
s1pop1
gotoreg1
#label
null;;driveR--label
#val (used with set to change variable value during runtime.)
setreg1;:R
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drive
#conditional return
dataread1;>cp.size
dataread2;>@3
gotoifless;>goto--branch-138
goto;>goto--jumper-138
s1pop1;;goto--branch-138
gotoreg1
null;;goto--jumper-138
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:2
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-146
s1push1
goto;>run_send_setup--label
null;;goto--jumper-146
#Upward range iterator
dataread1;>@3
datawrite1;>run_iter
setreg1;>uiter-retpos-147;uiter-loopback-147
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-147
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-147
gotoif;>uiter-loopback-147

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-150
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-150
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list--label
#conditional subroutine goto
dataread1;>drive
dataread2;>:R
gotoif;>goto--branch-155
goto;>goto--jumper-155
setreg1;>goto--jumper-155;goto--branch-155
s1push1
goto;>directory_list_R--label
null;;goto--jumper-155
#conditional subroutine goto
dataread1;>drive
dataread2;>:B
gotoif;>goto--branch-156
goto;>goto--jumper-156
setreg1;>goto--jumper-156;goto--branch-156
s1push1
goto;>directory_list_B--label
null;;goto--jumper-156
#conditional subroutine goto
dataread1;>drive
dataread2;>:A
gotoif;>goto--branch-157
goto;>goto--jumper-157
setreg1;>goto--jumper-157;goto--branch-157
s1push1
goto;>directory_list_A--label
null;;goto--jumper-157
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list_A--label
#print
fopwri1;:F
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:\v
fopwri1;:\s
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-162;uiter-loopback-162
s1push1
goto;>pattern_print_char--label
dataread1;>run_iter;uiter-retpos-162
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-162
gotoif;>uiter-loopback-162

#print newline
fopwri1;:\n
#vdin
fopset1;>vdi.cli.in
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:0
fopwri1;:\s
fopset1;>io.ttywr
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-165;uiter-loopback-165
s1push1
goto;>run_send_char--label
dataread1;>run_iter;uiter-retpos-165
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-165
gotoif;>uiter-loopback-165

#vdi
fopset1;>vdi.cli.in
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-167
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-167
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list_B--label
#print
fopwri1;:F
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:B
fopwri1;:\s
fopwri1;:\v
fopwri1;:\s
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-172;uiter-loopback-172
s1push1
goto;>pattern_print_char--label
dataread1;>run_iter;uiter-retpos-172
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-172
gotoif;>uiter-loopback-172

#print newline
fopwri1;:\n
#vdin
fopset1;>vdi.cli.in
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:1
fopwri1;:\s
fopset1;>io.ttywr
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-175;uiter-loopback-175
s1push1
goto;>run_send_char--label
dataread1;>run_iter;uiter-retpos-175
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-175
gotoif;>uiter-loopback-175

#vdi
fopset1;>vdi.cli.in
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-177
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-177
#return from subroutine.
s1pop1
gotoreg1
#label
null;;directory_list_R--label
#print
fopwri1;:F
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:R
fopwri1;:\s
fopwri1;:\v
fopwri1;:\s
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-182;uiter-loopback-182
s1push1
goto;>pattern_print_char--label
dataread1;>run_iter;uiter-retpos-182
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-182
gotoif;>uiter-loopback-182

#print newline
fopwri1;:\n
#vdin
fopset1;>vdi.cli.in
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:2
fopwri1;:\s
fopset1;>io.ttywr
#Upward range iterator
dataread1;>@4
datawrite1;>run_iter
setreg1;>uiter-retpos-185;uiter-loopback-185
s1push1
goto;>run_send_char--label
dataread1;>run_iter;uiter-retpos-185
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-185
gotoif;>uiter-loopback-185

#vdi
fopset1;>vdi.cli.in
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-187
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-187
#return from subroutine.
s1pop1
gotoreg1
#label
null;;invalid--label
#Set text colors
dataread1;>*++0---
iowrite1;>io.textcolor
#conditional goto
dataread1;>cp.size
dataread2;>@2
gotoifless;>goto--branch-193
goto;>goto--jumper-193
setreg1;>goto--jumper-193;goto--branch-193
goto;>run_command--label
null;;goto--jumper-193
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>@1
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--195
dataread1;;tabr--adrbuff--195
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>invalid_charcheck
#conditional goto
dataread1;>invalid_charcheck
dataread2;>::
gotoif;>goto--jumper-197
goto;>goto--branch-197
setreg1;>goto--jumper-197;goto--branch-197
goto;>run_command--label
null;;goto--jumper-197
#prline
fopwri1;:D
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:N
fopwri1;:o
fopwri1;:t
fopwri1;:\s
fopwri1;:V
fopwri1;:a
fopwri1;:l
fopwri1;:i
fopwri1;:d
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:'
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:s
fopwri1;:'
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_command--label
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopset1;>io.ttywr
#conditional set
dataread1;>drive
dataread2;>:A
gotoif;>goto--branch-204
goto;>goto--jumper-204
dataread1;>:0;goto--branch-204
datawrite1;>driveref
null;;goto--jumper-204
#conditional set
dataread1;>drive
dataread2;>:B
gotoif;>goto--branch-205
goto;>goto--jumper-205
dataread1;>:1;goto--branch-205
datawrite1;>driveref
null;;goto--jumper-205
#conditional set
dataread1;>drive
dataread2;>:R
gotoif;>goto--branch-206
goto;>goto--jumper-206
dataread1;>:2;goto--branch-206
datawrite1;>driveref
null;;goto--jumper-206
#get(1) (may be used with set, or asm code)
dataread1;>driveref
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #208
iowrite1;>vdi.cli.in#SSTNPL Source Line: '208' 
#vdin
fopset1;>vdi.cli.in
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-210
s1push1
goto;>run_send_setup--label
null;;goto--jumper-210
#Upward range iterator
dataread1;>@0
datawrite1;>run_iter
setreg1;>uiter-retpos-211;uiter-loopback-211
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-211
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-211
gotoif;>uiter-loopback-211

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#vdin
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-216
s1push1
goto;>run_send_setup--label
null;;goto--jumper-216
#Upward range iterator
dataread1;>@0
datawrite1;>run_iter
setreg1;>uiter-retpos-217;uiter-loopback-217
s1push1
goto;>run_send_char_exec--label
dataread1;>run_iter;uiter-retpos-217
setreg2;10x1
add
datawrite1;>run_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-217
gotoif;>uiter-loopback-217

#vdi
fopset1;>vdi.cli.in
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-220
s1push1
goto;>vdi_outloop--label
null;;goto--jumper-220
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_setup--label
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>run_tobuffer_flg
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_char_exec--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>run_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--233
dataread1;;tabr--adrbuff--233
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>run_s_tmp
#conditional goto
dataread1;>run_tobuffer_flg
dataread2;>@1
gotoif;>goto--branch-235
goto;>goto--jumper-235
setreg1;>goto--jumper-235;goto--branch-235
goto;>run_send_doredir--label
null;;goto--jumper-235
#conditional set
dataread1;>run_s_tmp
dataread2;>:\s
gotoif;>goto--branch-236
goto;>goto--jumper-236
dataread1;>@1;goto--branch-236
datawrite1;>run_tobuffer_flg
null;;goto--jumper-236
#conditional return
dataread1;>run_s_tmp
dataread2;>:\s
gotoif;>goto--branch-237
goto;>goto--jumper-237
s1pop1;;goto--branch-237
gotoreg1
null;;goto--jumper-237
#get(1) (may be used with set, or asm code)
dataread1;>run_s_tmp
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #240
iowrite1;>vdi.cli.in#SSTNPL Source Line: '240' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_doredir--label
#buffer 2 head write
dataread1;>run_s_tmp
iowrite1;>buffer.2.write.head
#return from subroutine.
s1pop1
gotoreg1
#label
null;;run_send_char--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>run_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--248
dataread1;;tabr--adrbuff--248
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #249
iowrite1;>vdi.cli.in#SSTNPL Source Line: '249' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;pattern_print_char--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>run_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--253
dataread1;;tabr--adrbuff--253
iowrite1;>io.ttywr
#return from subroutine.
s1pop1
gotoreg1
#label
null;;version--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-257
s1push1
goto;>splash--label
null;;goto--jumper-257
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#prline
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:\s
fopwri1;:I
fopwri1;:n
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:p
fopwri1;:r
fopwri1;:e
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:2
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;vdi--label
#val (used with set to change variable value during runtime.)
setreg1;10x1
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #267
iowrite1;>vdi.cli.status#SSTNPL Source Line: '267' 
#Upward range iterator
dataread1;>@4
datawrite1;>vdi_iter
setreg1;>uiter-retpos-269;uiter-loopback-269
s1push1
goto;>vdi_buffiter--label
dataread1;>vdi_iter;uiter-retpos-269
setreg2;10x1
add
datawrite1;>vdi_iter
dataread2;>cp.itersize
gotoifless;>uiter-loopback-269
gotoif;>uiter-loopback-269

#val (used with set to change variable value during runtime.)
setreg1;:\n
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #271
iowrite1;>vdi.cli.in#SSTNPL Source Line: '271' 
#goto 
goto;>vdi_outloop--label
#label
null;;vdi_outloop--label
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #278
ioread1;>vdi.cli.out#SSTNPL Source Line: '278' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>vdi_vdioutput_buffer
#conditional return
dataread1;>vdi_vdioutput_buffer
dataread2;>@0
gotoif;>goto--branch-281
goto;>goto--jumper-281
s1pop1;;goto--branch-281
gotoreg1
null;;goto--jumper-281
#Dump (character)
dataread1;>vdi_vdioutput_buffer
iowrite1;>io.ttywr
#goto 
goto;>vdi_outloop--label
#label
null;;drives--label
#prline
fopwri1;:A
fopwri1;::
fopwri1;:\s
fopwri1;:9
fopwri1;:.
fopwri1;:5
fopwri1;:M
fopwri1;:N
fopwri1;:\s
fopwri1;:(
fopwri1;:T
fopwri1;:D
fopwri1;:S
fopwri1;:K
fopwri1;:1
fopwri1;:)
fopwri1;:\s
fopwri1;:f
fopwri1;:l
fopwri1;:o
fopwri1;:p
fopwri1;:p
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:B
fopwri1;::
fopwri1;:\s
fopwri1;:9
fopwri1;:.
fopwri1;:5
fopwri1;:M
fopwri1;:N
fopwri1;:\s
fopwri1;:(
fopwri1;:T
fopwri1;:D
fopwri1;:S
fopwri1;:K
fopwri1;:1
fopwri1;:)
fopwri1;:\s
fopwri1;:f
fopwri1;:l
fopwri1;:o
fopwri1;:p
fopwri1;:p
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:R
fopwri1;::
fopwri1;:\s
fopwri1;:9
fopwri1;:.
fopwri1;:5
fopwri1;:M
fopwri1;:N
fopwri1;:\s
fopwri1;:H
fopwri1;:a
fopwri1;:r
fopwri1;:d
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:R
fopwri1;:a
fopwri1;:m
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;vdi_buffiter--label
#SSTNPL table read instruction.
setreg1;10x85
dataread2;>@0
mul
dataread2;>vdi_iter
add
setreg2;10x1
add
setreg2;>cp.buffer--table
add
datawrite1;>tabr--adrbuff--294
dataread1;;tabr--adrbuff--294
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #295
iowrite1;>vdi.cli.in#SSTNPL Source Line: '295' 
#return from subroutine.
s1pop1
gotoreg1
#label
null;;help--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:[
fopwri1;:c
fopwri1;:m
fopwri1;:d
fopwri1;:]
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:a
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:m
fopwri1;:m
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:V
fopwri1;:D
fopwri1;:I
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:r
fopwri1;:i
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:s
fopwri1;:o
fopwri1;:l
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:'
fopwri1;:v
fopwri1;:d
fopwri1;:i
fopwri1;:\s
fopwri1;:h
fopwri1;:e
fopwri1;:l
fopwri1;:p
fopwri1;:'
fopwri1;:\n
#prline
fopwri1;:?
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:x
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:*
fopwri1;::
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:l
fopwri1;:e
fopwri1;:c
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:u
fopwri1;:r
fopwri1;:r
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:'
fopwri1;:A
fopwri1;::
fopwri1;:'
fopwri1;:\m
fopwri1;:\s
fopwri1;:'
fopwri1;:B
fopwri1;::
fopwri1;:'
fopwri1;:\m
fopwri1;:\s
fopwri1;:'
fopwri1;:R
fopwri1;::
fopwri1;:'
fopwri1;:)
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:s
fopwri1;:e
fopwri1;:-
fopwri1;:i
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:i
fopwri1;:t
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:m
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\n
#prline
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:P
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:V
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\n
#prline
fopwri1;:a
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:A
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:i
fopwri1;:r
fopwri1;:\s
fopwri1;:<
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:>
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:C
fopwri1;:U
fopwri1;:R
fopwri1;:R
fopwri1;:E
fopwri1;:N
fopwri1;:T
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:a
fopwri1;:l
fopwri1;:l
fopwri1;:y
fopwri1;:\s
fopwri1;:s
fopwri1;:p
fopwri1;:e
fopwri1;:c
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\s
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:l
fopwri1;:e
fopwri1;:n
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:m
fopwri1;:u
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:a
fopwri1;:r
fopwri1;:c
fopwri1;:h
fopwri1;:\s
fopwri1;:c
fopwri1;:u
fopwri1;:r
fopwri1;:r
fopwri1;:e
fopwri1;:n
fopwri1;:t
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\m
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:a
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:s
fopwri1;:\m
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:e
fopwri1;:t
fopwri1;:-
fopwri1;:l
fopwri1;:o
fopwri1;:a
fopwri1;:d
fopwri1;:\n
#prline
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:f
fopwri1;:i
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:t
fopwri1;:c
fopwri1;:h
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:*
fopwri1;::
fopwri1;:\b
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:r
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:<
fopwri1;:e
fopwri1;:x
fopwri1;:e
fopwri1;:c
fopwri1;:>
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:d
fopwri1;:r
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:(
fopwri1;:*
fopwri1;:)
fopwri1;:\s
fopwri1;:e
fopwri1;:.
fopwri1;:g
fopwri1;:.
fopwri1;:\s
fopwri1;:A
fopwri1;::
fopwri1;:\b
fopwri1;:b
fopwri1;:o
fopwri1;:o
fopwri1;:t
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:b
fopwri1;:o
fopwri1;:o
fopwri1;:t
fopwri1;:.
fopwri1;:t
fopwri1;:x
fopwri1;:e
fopwri1;:\s
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:A
fopwri1;::
fopwri1;:\n
#print
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;::
fopwri1;:\s
fopwri1;:S
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;about--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:A
fopwri1;:B
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-325
s1push1
goto;>splash--label
null;;goto--jumper-325
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:\s
fopwri1;:(
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:D
fopwri1;:i
fopwri1;:s
fopwri1;:k
fopwri1;:\s
fopwri1;:O
fopwri1;:p
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:S
fopwri1;:y
fopwri1;:s
fopwri1;:t
fopwri1;:e
fopwri1;:m
fopwri1;:)
fopwri1;:\n
#prline
fopwri1;:P
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:2
fopwri1;:-
fopwri1;:9
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:r
fopwri1;:i
fopwri1;:g
fopwri1;:h
fopwri1;:t
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:)
fopwri1;:\s
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:8
fopwri1;:-
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:9
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:o
fopwri1;:m
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:L
fopwri1;:e
fopwri1;:a
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:\s
fopwri1;:&
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:s
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:/
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:m
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:p
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:b
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:S
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:o
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\m
fopwri1;:\s
fopwri1;:e
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:3
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:(
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:r
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:)
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:y
fopwri1;:\s
fopwri1;:l
fopwri1;:a
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:h
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:b
fopwri1;:e
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:f
fopwri1;:u
fopwri1;:l
fopwri1;:\m
fopwri1;:\n
#prline
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:T
fopwri1;:H
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:\s
fopwri1;:A
fopwri1;:N
fopwri1;:Y
fopwri1;:\s
fopwri1;:W
fopwri1;:A
fopwri1;:R
fopwri1;:R
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:Y
fopwri1;:\c
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:e
fopwri1;:v
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:m
fopwri1;:p
fopwri1;:l
fopwri1;:i
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:r
fopwri1;:a
fopwri1;:n
fopwri1;:t
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\n
#prline
fopwri1;:M
fopwri1;:E
fopwri1;:R
fopwri1;:C
fopwri1;:H
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:A
fopwri1;:B
fopwri1;:I
fopwri1;:L
fopwri1;:I
fopwri1;:T
fopwri1;:Y
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:F
fopwri1;:I
fopwri1;:T
fopwri1;:N
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:F
fopwri1;:O
fopwri1;:R
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:P
fopwri1;:A
fopwri1;:R
fopwri1;:T
fopwri1;:I
fopwri1;:C
fopwri1;:U
fopwri1;:L
fopwri1;:A
fopwri1;:R
fopwri1;:\s
fopwri1;:P
fopwri1;:U
fopwri1;:R
fopwri1;:P
fopwri1;:O
fopwri1;:S
fopwri1;:E
fopwri1;:.
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:l
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:h
fopwri1;:a
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:e
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\n
#print
fopwri1;:a
fopwri1;:l
fopwri1;:o
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:-
fopwri1;:D
fopwri1;:O
fopwri1;:S
fopwri1;:.
fopwri1;:\s
fopwri1;:I
fopwri1;:f
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:t
fopwri1;:\m
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:<
fopwri1;:h
fopwri1;:t
fopwri1;:t
fopwri1;:p
fopwri1;::
fopwri1;:/
fopwri1;:/
fopwri1;:w
fopwri1;:w
fopwri1;:w
fopwri1;:.
fopwri1;:g
fopwri1;:n
fopwri1;:u
fopwri1;:.
fopwri1;:o
fopwri1;:r
fopwri1;:g
fopwri1;:/
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:s
fopwri1;:/
fopwri1;:>
#Set text colors
dataread1;>*0+0---
iowrite1;>io.textcolor
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;splash--label
#Set text colors
dataread1;>*+++0--
iowrite1;>io.textcolor
#print
fopwri1;:S
#Set text colors
dataread1;>*+++00-
iowrite1;>io.textcolor
#print
fopwri1;:B
#Set text colors
dataread1;>*+++-0-
iowrite1;>io.textcolor
#print
fopwri1;:T
#Set text colors
dataread1;>*+++-00
iowrite1;>io.textcolor
#print
fopwri1;:C
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#print
fopwri1;:V
#Set text colors
dataread1;>*+++0-0
iowrite1;>io.textcolor
#print
fopwri1;:M
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#print
fopwri1;:-
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#print
fopwri1;:D
fopwri1;:O
fopwri1;:S
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#return from subroutine.
s1pop1
gotoreg1
#label
null;;shutdown--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-374
s1push1
goto;>splash--label
null;;goto--jumper-374
#prline
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:u
fopwri1;:t
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:w
fopwri1;:n
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:d
fopwri1;:o
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\n
#stop (shutdown vm)
stop
#module include: line 382: comprompt as cp
includeas;comprompt,cp
#END OF FILE
