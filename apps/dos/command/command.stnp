var sysbak=0

#avoid endless loop.
if sysbak,$true goto startup

vdimode @1
vdi rstld 2 command.state.tri
#refresh VDI to avoid error text.
vdimode @1

########## SBTCVM-DOS - Command Interpreter ########## 
label startup
#marks program as backup, so the state restore doesn't occur when restored. (avoids endless loop)
	if sysbak,$false gsub version
	val @1
	set sysbak
	
	textcolor *+++---
	prline Type '?' for help. READY.
	#prline READY.
	vdimode @1
	##setup command prompt library##
		val @70
		set cp.max
		
		val @0
		set cp.clearbuffer
	breset2
goto main

##variables##
var cmdflg=0
var validflg=0
var drive=:A

#reset Hardware buffer 2


label main
	textcolor *0+0---
	chardump drive
	print :\>
	textcolor *+++---
	gsub cp.getentry
	
	newline
	val 0
	set cmdflg
	set validflg
	tabstrc cp.buffer,@0,@0,?
		set cmdflg
		if cmdflg,@1 gsub help
		if cmdflg,@1 =validflg @1
	tabstrc cp.buffer,@0,@0,vdi
		set cmdflg
		if cmdflg,@1 gsub vdi
		if cmdflg,@1 =validflg @1
	tabstrc cp.buffer,@0,@0,drives
		set cmdflg
		if cmdflg,@1 gsub drives
		if cmdflg,@1 =validflg @1
	tabstrc cp.buffer,@0,@0,ver
		set cmdflg
		if cmdflg,@1 gsub version
		if cmdflg,@1 =validflg @1
	tabstrc cp.buffer,@0,@0,dir
		set cmdflg
		if cmdflg,@1 gsub directory_list
		if cmdflg,@1 =validflg @1
	tabstrc cp.buffer,@0,@0,shutdown
		set cmdflg
		if cmdflg,@1 gsub shutdown
		if cmdflg,@1 =validflg @1
	####DRIVE SELECT/RUN####
		#A
			tabstrc cp.buffer,@0,@0,a:
				set cmdflg
				if cmdflg,@1 gsub driveA
				if cmdflg,@1 =validflg @1
			tabstrc cp.buffer,@0,@0,A:
				set cmdflg
				if cmdflg,@1 gsub driveA
				if cmdflg,@1 =validflg @1
		#B
			tabstrc cp.buffer,@0,@0,b:
				set cmdflg
				if cmdflg,@1 gsub driveB
				if cmdflg,@1 =validflg @1
			tabstrc cp.buffer,@0,@0,B:
				set cmdflg
				if cmdflg,@1 gsub driveB
				if cmdflg,@1 =validflg @1
		#R (RAMDISK)
			tabstrc cp.buffer,@0,@0,r:
				set cmdflg
				if cmdflg,@1 gsub driveR
				if cmdflg,@1 =validflg @1
			tabstrc cp.buffer,@0,@0,R:
				set cmdflg
				if cmdflg,@1 gsub driveR
				if cmdflg,@1 =validflg @1
		
	if validflg,@0 gsub invalid
goto main


### DRIVE SELECT/RUN SUBROUTINES ###
label driveA
	val 0
	set extflg
	ifmore cp.size,@4 gsub extcheck
	val :A
	set drive
	ifless cp.size,@3 return
	vdi membak 2 command.state.tri
	vdin rstld 0 
		gsub run_send_setup
		uiter run_iter,run_send_char_exec,@3,cp.itersize
		gsub cmd_run_send_newline
		
		
		gsub vdi_outloop
return

label driveB
	val 0
	set extflg
	ifmore cp.size,@4 gsub extcheck
	val :B
	set drive
	ifless cp.size,@3 return
	vdi membak 2 command.state.tri
	vdin rstld 1 
		gsub run_send_setup
		uiter run_iter,run_send_char_exec,@3,cp.itersize
		gsub cmd_run_send_newline
		
		
		gsub vdi_outloop
return


label driveR
	val 0
	set extflg
	ifmore cp.size,@4 gsub extcheck
	val :R
	set drive
	ifless cp.size,@3 return
	vdi membak 2 command.state.tri
	vdin rstld 2 
		gsub run_send_setup
		uiter run_iter,run_send_char_exec,@3,cp.itersize
		gsub cmd_run_send_newline
		
		
		gsub vdi_outloop
return


label directory_list
	if drive,:R gsub directory_list_R
	if drive,:B gsub directory_list_B
	if drive,:A gsub directory_list_A
return

label directory_list_A
	print Files on Drive A | 
	uiter run_iter,pattern_print_char,@4,cp.itersize
	newline
	vdin list 0 
	uiter run_iter,run_send_char,@4,cp.itersize
	vdi 
	gsub vdi_outloop
return

label directory_list_B
	print Files on Drive B | 
	uiter run_iter,pattern_print_char,@4,cp.itersize
	newline
	vdin list 1 
	uiter run_iter,run_send_char,@4,cp.itersize
	vdi 
	gsub vdi_outloop
return

label directory_list_R
	print Files on Drive R | 
	uiter run_iter,pattern_print_char,@4,cp.itersize
	newline
	vdin list 2 
	uiter run_iter,run_send_char,@4,cp.itersize
	vdi 
	gsub vdi_outloop
return
var driveref=:0
var invalid_charcheck=0
var extflg=0
var extoffset=0
label invalid
	val 0
	set extflg
	ifmore cp.size,@4 gsub extcheck
	textcolor *++0---
	ifless cp.size,@2 goto run_command
		
		
		tabr cp.buffer,@1,@0
		set invalid_charcheck
		ifnot invalid_charcheck,:: goto run_command
			prline Drive Not Valid. see 'drives' command.
			return

	label run_command
		vdi membak 2 command.state.tri
		#try current drive FIRST
		vdin rstld 
			if drive,:A =driveref :0
			if drive,:B =driveref :1
			if drive,:R =driveref :2
			get driveref
			asm iowrite1;>vdi.cli.in
			vdin  #print space
		gsub run_send_setup
		uiter run_iter,run_send_char_exec,@0,cp.itersize
		gsub cmd_run_send_newline
		
		#if does not load, try ALL drives...
		vdin rstld -1 
		gsub run_send_setup
		uiter run_iter,run_send_char_exec,@0,cp.itersize
		gsub cmd_run_send_newline
		
		gsub vdi_outloop
		return


label extcheck
	sub cp.size,@4
	set extoffset
	tabstrc cp.buffer,extoffset,@0,.txe
	set extflg
	#dumpd extflg
	#newline
return

label cmd_run_send_newline
	if extflg,$true goto cmd_run_send_newline_noext
		vdi .txe#send newline
		return
	label cmd_run_send_newline_noext
		vdi 
		return

return
#get character from iterator var, write to VDI serial INPUT
var run_s_tmp=0
var run_tobuffer_flg=0

label run_send_setup
val @0
set run_tobuffer_flg
return

label run_send_char_exec
	tabr cp.buffer,run_iter,@0
	set run_s_tmp
	if run_tobuffer_flg,@1 goto run_send_doredir
	if run_s_tmp,:\s =run_tobuffer_flg @1
	if run_s_tmp,:\s return
	
	get run_s_tmp
		asm iowrite1;>vdi.cli.in
		return
	label run_send_doredir
		bwrhead2 run_s_tmp
return


label run_send_char
	tabr cp.buffer,run_iter,@0
	asm iowrite1;>vdi.cli.in
	return

label pattern_print_char
	tabcd cp.buffer,run_iter,@0
return

label version
	gsub splash
	textcolor *0++---
	prline  Command Interpreter v2
return

var vdi_vdioutput_buffer=0
##VDI command processor##
label vdi
	####ensure VDI serial is in mode 1####
		val @1
		asm iowrite1;>vdi.cli.status
	####Write output from shell input buffer (cp.buffer) to VDI serial input.####
	uiter vdi_iter,vdi_buffiter,@4,cp.itersize
	val :\n
	asm iowrite1;>vdi.cli.in
	
	goto vdi_outloop
	

####stream output from VDI serial output, to Serial TTY####
label vdi_outloop
		asm ioread1;>vdi.cli.out
		set vdi_vdioutput_buffer
		
		if vdi_vdioutput_buffer,@0 return
		chardump vdi_vdioutput_buffer
	goto vdi_outloop

#TODO: Dump disk labels too via SBTVDI
label drives
	prline A: 9.5MN (TDSK1) floppy
	prline B: 9.5MN (TDSK1) floppy
	prline R: 9.5MN Hardware Ramdisk
return

##VDI output write subroutine.##
	label vdi_buffiter
		tabr cp.buffer,vdi_iter,@0
		asm iowrite1;>vdi.cli.in
	return


#call `command` help category via help.txe (saves space in command.txe)
label help
	vdi membak 2 command.state.tri
	bprinthead2n command
	vdi rstld -1 help.txe
return


label splash
	textcolor *+++0--
	print S
	textcolor *+++00-
	print B
	textcolor *+++-0-
	print T
	textcolor *+++-00
	print C
	textcolor *+++--0
	print V
	textcolor *+++0-0
	print M
	textcolor *+++---
	print -
	textcolor *0++---
	print DOS
	textcolor *+++---
return


##Shutdown routine##
label shutdown
	gsub splash
	prline  is shutting down...
	prline done.
stop




include comprompt as cp
