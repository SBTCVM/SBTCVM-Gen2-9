


#gsub draw_desktop

var xbuff=0
var ybuff=0
var actflg=@1
var btnbuff=0

var isbackup=0

if isbackup,@0 begin
	val @1
	set isbackup
	##moved to sndkern
	#gsub common.tune
	!sklib.sk_startup()
	gsub draw_desktop
	drawcopy @12
	drawcopy @-1
end
val @1
set actflg

loop
	
	if actflg,@1 begin
		val @0
		set actflg
		drawblit @12
		drawcopy @-1
	end
	
	{val 0 / set btnbuff}
	until btnbuff,@1
	
		asm ioread1;>mouse.button
		set btnbuff
		gsub common.mouse_cursor
	
	end
	
	##### Main screen icon click parser #####
	
	asm ioread1;>mouse.lockx
	set xbuff
	asm ioread1;>mouse.locky
	set ybuff
	ifrange @-90,@-63,ybuff begin
	
		#ifrange @-120,@-93,xbuff =actflg @1
		ifrange @-120,@-93,xbuff gsub info
	
	end
	ifrange @-58,@-32,ybuff begin
	
		#ifrange @-120,@-93,xbuff =actflg @1
		ifrange @-120,@-93,xbuff gsub dos
	
	end
	ifrange @-26,@1,ybuff begin
	
		#ifrange @-120,@-93,xbuff =actflg @1
		ifrange @-120,@-93,xbuff gsub credits
	
	end
end
label info
	gsub backup_self
	!b_lib.app_run(info.app)
return

label dos
	gsub backup_self
	!b_lib.app_run(dos.app)
return

label credits
	gsub backup_self
	!b_lib.app_run(credits.app)
return


label backup_self
	vdi membak 2 desktop.back.tri
return

label draw_desktop
	bprinttail1 DESKTOP
	gsub ui.base_draw
	
	val @3
	set pl.pixx
	set pl.pixy
	
	val @-120
	set pl.posx
	set pl.posy
	
	#vertical spacing: start+(3*9)+5
	
	#info
		val @-90
		set pl.posy
		asm setreg1;>ICON_info
		set pl.offset
		gsub pl.decode
	
	#dos
		val @-58
		set pl.posy
		asm setreg1;>ICON_dos
		set pl.offset
		gsub pl.decode
	
	#credits
		val @-26
		set pl.posy
		asm setreg1;>ICON_credits
		set pl.offset
		gsub pl.decode
return




include bench/lib/common as common
include bench/lib/ui as ui
include plrle_noalpha as pl
include bench/lib/sndkern_lib as sklib
include bench/lib/bench_lib as b_lib
asm include;bench/media/info.tas0;ICON_info
asm include;bench/media/dos.tas0;ICON_dos
asm include;bench/media/credits_icn.tas0;ICON_credits