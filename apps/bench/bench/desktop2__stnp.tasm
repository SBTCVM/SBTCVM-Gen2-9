#SSTNPL COMPILER v0.4.0
#header
head-rname=desktop2
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/bench/bench/desktop2.stnp
null;0;xbuff
null;0;ybuff
null;10x1;actflg
null;0;btnbuff
null;0;cl_y
null;0;cl_y2
null;0;isbackup
null;10x32;i_yspace
null;10x27;i_ysize
null;10x5;i_ygap
null;10x-90;i_start_y
null;10x0;@0
null;10x1;$sklib.snd_startup
null;10x12;@12
null;10x-1;@-1
null;10x1;@1
null;10x-120;@-120
null;10x-93;@-93
#conditional flow control begin
dataread1;>isbackup
dataread2;>@0
gotoif;>goto--jumper-23-0
goto;>goto--branch-23-0
goto;>flow--con-x-1;goto--branch-23-0

zerosize;;goto--jumper-23-0
zerosize;;flow--con-x-1--start
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>isbackup
#get(1) (may be used with set, or asm code)
dataread1;>$sklib.snd_startup
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #28-2
iowrite1;>cross.io.1#SSTNPL Source Line: '28-2' 
#goto (extra code stores away return address.)
setreg1;>goto--jumper-29-0
s1push1
goto;>draw_desktop--label
zerosize;;goto--jumper-29-0
#plotter buffer copy
dataread1;>@12
iowrite1;>plot.copy
#plotter buffer copy
dataread1;>@-1
iowrite1;>plot.copy
zerosize;;flow--con-x-1
#val (used with set to change variable value during runtime.)
setreg1;10x1
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>actflg
#unconditional loop
zerosize;;flowloop--con-x-2--start
#conditional flow control begin
dataread1;>actflg
dataread2;>@1
gotoif;>goto--jumper-45-0
goto;>goto--branch-45-0
goto;>flow--con-x-3;goto--branch-45-0

zerosize;;goto--jumper-45-0
zerosize;;flow--con-x-3--start
#val (used with set to change variable value during runtime.)
setreg1;10x0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>actflg
#plotter buffer blit
dataread1;>@12
iowrite1;>plot.blit
#plotter buffer copy
dataread1;>@-1
iowrite1;>plot.copy
zerosize;;flow--con-x-3
#val (used with set to change variable value during runtime.)
setreg1;0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>btnbuff
#conditional flow control begin
null;;flowloop--con-x-4--start
dataread1;>btnbuff
dataread2;>@1
gotoif;>goto--branch-53-0
goto;>goto--jumper-53-0
goto;>flowloop--con-x-4;goto--branch-53-0
zerosize;;goto--jumper-53-0
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #55-1
ioread1;>mouse.button#SSTNPL Source Line: '55-1' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>btnbuff
#goto (extra code stores away return address.)
setreg1;>goto--jumper-56-0
s1push1
goto;>common.mouse_cursor--label
zerosize;;goto--jumper-56-0
goto;>flowloop--con-x-4--start
zerosize;;flowloop--con-x-4
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #62-1
ioread1;>mouse.lockx#SSTNPL Source Line: '62-1' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>xbuff
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #63-1
ioread1;>mouse.locky#SSTNPL Source Line: '63-1' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>ybuff
#get(1) (may be used with set, or asm code)
dataread1;>i_start_y
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y
#add (2op math)
dataread1;>cl_y
dataread2;>i_ysize
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y2
#conditional flow control begin
dataread1;>ybuff
dataread2;>cl_y
gotoifmore;>goto--halfstep-70-0
gotoif;>goto--halfstep-70-0
goto;>goto--branch-70-0
dataread1;>ybuff;goto--halfstep-70-0
dataread2;>cl_y2
gotoifless;>goto--jumper-70-0
gotoif;>goto--jumper-70-0
goto;>goto--branch-70-0
goto;>flow--con-x-5;goto--branch-70-0

zerosize;;goto--jumper-70-0
zerosize;;flow--con-x-5--start
#conditional subroutine goto
dataread1;>xbuff
dataread2;>@-120
gotoifmore;>goto--halfstep-72-0
gotoif;>goto--halfstep-72-0
goto;>goto--jumper-72-0
dataread1;>xbuff;goto--halfstep-72-0
dataread2;>@-93
gotoifless;>goto--branch-72-0
gotoif;>goto--branch-72-0
goto;>goto--jumper-72-0
setreg1;>goto--jumper-72-0;goto--branch-72-0
s1push1
goto;>info--label
zerosize;;goto--jumper-72-0
zerosize;;flow--con-x-5
#add (2op math)
dataread1;>cl_y
dataread2;>i_yspace
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y
#add (2op math)
dataread1;>cl_y
dataread2;>i_ysize
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y2
#conditional flow control begin
dataread1;>ybuff
dataread2;>cl_y
gotoifmore;>goto--halfstep-78-0
gotoif;>goto--halfstep-78-0
goto;>goto--branch-78-0
dataread1;>ybuff;goto--halfstep-78-0
dataread2;>cl_y2
gotoifless;>goto--jumper-78-0
gotoif;>goto--jumper-78-0
goto;>goto--branch-78-0
goto;>flow--con-x-6;goto--branch-78-0

zerosize;;goto--jumper-78-0
zerosize;;flow--con-x-6--start
#conditional subroutine goto
dataread1;>xbuff
dataread2;>@-120
gotoifmore;>goto--halfstep-80-0
gotoif;>goto--halfstep-80-0
goto;>goto--jumper-80-0
dataread1;>xbuff;goto--halfstep-80-0
dataread2;>@-93
gotoifless;>goto--branch-80-0
gotoif;>goto--branch-80-0
goto;>goto--jumper-80-0
setreg1;>goto--jumper-80-0;goto--branch-80-0
s1push1
goto;>dos--label
zerosize;;goto--jumper-80-0
zerosize;;flow--con-x-6
#add (2op math)
dataread1;>cl_y
dataread2;>i_yspace
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y
#add (2op math)
dataread1;>cl_y
dataread2;>i_ysize
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y2
#conditional flow control begin
dataread1;>ybuff
dataread2;>cl_y
gotoifmore;>goto--halfstep-86-0
gotoif;>goto--halfstep-86-0
goto;>goto--branch-86-0
dataread1;>ybuff;goto--halfstep-86-0
dataread2;>cl_y2
gotoifless;>goto--jumper-86-0
gotoif;>goto--jumper-86-0
goto;>goto--branch-86-0
goto;>flow--con-x-7;goto--branch-86-0

zerosize;;goto--jumper-86-0
zerosize;;flow--con-x-7--start
#conditional subroutine goto
dataread1;>xbuff
dataread2;>@-120
gotoifmore;>goto--halfstep-88-0
gotoif;>goto--halfstep-88-0
goto;>goto--jumper-88-0
dataread1;>xbuff;goto--halfstep-88-0
dataread2;>@-93
gotoifless;>goto--branch-88-0
gotoif;>goto--branch-88-0
goto;>goto--jumper-88-0
setreg1;>goto--jumper-88-0;goto--branch-88-0
s1push1
goto;>credits--label
zerosize;;goto--jumper-88-0
zerosize;;flow--con-x-7
#add (2op math)
dataread1;>cl_y
dataread2;>i_yspace
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>cl_y
goto;>flowloop--con-x-2--start
zerosize;;flowloop--con-x-2
#label
zerosize;;info--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-96-0
s1push1
goto;>backup_self--label
zerosize;;goto--jumper-96-0
#prline
fopwri1;:s
fopwri1;:t
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:\n
fopset1;>io.ttywr
#prline
fopwri1;:E
fopwri1;:R
fopwri1;:R
fopwri1;:O
fopwri1;:R
fopwri1;::
fopwri1;:\s
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:r
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:f
fopwri1;:o
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;dos--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-101-0
s1push1
goto;>backup_self--label
zerosize;;goto--jumper-101-0
#prline
fopwri1;:s
fopwri1;:t
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:s
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:s
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:\n
fopset1;>io.ttywr
#prline
fopwri1;:E
fopwri1;:R
fopwri1;:R
fopwri1;:O
fopwri1;:R
fopwri1;::
fopwri1;:\s
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:r
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:d
fopwri1;:o
fopwri1;:s
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;credits--label
#goto (extra code stores away return address.)
setreg1;>goto--jumper-106-0
s1push1
goto;>backup_self--label
zerosize;;goto--jumper-106-0
#prline
fopwri1;:s
fopwri1;:t
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:i
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:c
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:t
fopwri1;:s
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:.
fopwri1;:.
fopwri1;:.
fopwri1;:\n
#vdi
fopset1;>vdi.cli.in
fopwri1;:r
fopwri1;:s
fopwri1;:t
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:-
fopwri1;:1
fopwri1;:\s
fopwri1;:c
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:t
fopwri1;:s
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:\n
fopset1;>io.ttywr
#prline
fopwri1;:E
fopwri1;:R
fopwri1;:R
fopwri1;:O
fopwri1;:R
fopwri1;::
fopwri1;:\s
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:r
fopwri1;:u
fopwri1;:n
fopwri1;:\s
fopwri1;:c
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:t
fopwri1;:s
fopwri1;:.
fopwri1;:a
fopwri1;:p
fopwri1;:p
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;backup_self--label
#vdi
fopset1;>vdi.cli.in
fopwri1;:m
fopwri1;:e
fopwri1;:m
fopwri1;:b
fopwri1;:a
fopwri1;:k
fopwri1;:\s
fopwri1;:2
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:s
fopwri1;:k
fopwri1;:t
fopwri1;:o
fopwri1;:p
fopwri1;:.
fopwri1;:b
fopwri1;:a
fopwri1;:c
fopwri1;:k
fopwri1;:.
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:\n
fopset1;>io.ttywr
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;draw_desktop--label
#bprinttail1
fopset1;>buffer.1.write.tail
fopwri1;:D
fopwri1;:E
fopwri1;:S
fopwri1;:K
fopwri1;:T
fopwri1;:O
fopwri1;:P
fopwri1;:\n
fopset1;>io.ttywr
#goto (extra code stores away return address.)
setreg1;>goto--jumper-117-0
s1push1
goto;>ui.base_draw--label
zerosize;;goto--jumper-117-0
#val (used with set to change variable value during runtime.)
setreg1;10x3
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.pixx
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.pixy
#val (used with set to change variable value during runtime.)
setreg1;10x-120
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.posx
#get(1) (may be used with set, or asm code)
dataread1;>i_start_y
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.posy
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #131-0
setreg1;>ICON_info#SSTNPL Source Line: '131-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.offset
#goto (extra code stores away return address.)
setreg1;>goto--jumper-133-0
s1push1
goto;>pl.decode--label
zerosize;;goto--jumper-133-0
#add (2op math)
dataread1;>pl.posy
dataread2;>i_yspace
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.posy
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #137-0
setreg1;>ICON_dos#SSTNPL Source Line: '137-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.offset
#goto (extra code stores away return address.)
setreg1;>goto--jumper-139-0
s1push1
goto;>pl.decode--label
zerosize;;goto--jumper-139-0
#add (2op math)
dataread1;>pl.posy
dataread2;>i_yspace
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.posy
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #143-0
setreg1;>ICON_credits#SSTNPL Source Line: '143-0' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.offset
#goto (extra code stores away return address.)
setreg1;>goto--jumper-145-0
s1push1
goto;>pl.decode--label
zerosize;;goto--jumper-145-0
#add (2op math)
dataread1;>pl.posy
dataread2;>i_yspace
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>pl.posy
#return from subroutine.
s1pop1
gotoreg1
#module include: line 152-0: bench/lib/common as common
includeas;bench/lib/common,common
#module include: line 153-0: bench/lib/ui as ui
includeas;bench/lib/ui,ui
#module include: line 154-0: plrle_noalpha as pl
includeas;plrle_noalpha,pl
#module include: line 155-0: bench/lib/sndkern_lib as sklib
includeas;bench/lib/sndkern_lib,sklib
#module include: line 156-0: bench/lib/bench_lib as b_lib
includeas;bench/lib/bench_lib,b_lib
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #157-0
include;bench/media/info.tas0;ICON_info#SSTNPL Source Line: '157-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #158-0
include;bench/media/dos.tas0;ICON_dos#SSTNPL Source Line: '158-0' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #159-0
include;bench/media/credits_icn.tas0;ICON_credits#SSTNPL Source Line: '159-0' 
#END OF FILE
