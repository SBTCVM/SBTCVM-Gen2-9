

#car dimensions
var car_height=@30
var car_width=@8
var car_window_width=@6

#train dimensions (height is not important, as the train is 'dragged' 
#    across the screen to create a stripe)
var train_height=@10
var train_width=@15
var train_width_gleam=@4

var playclick=0




#player position variable. (also used with train_height to set collidepos)
var player_pos=@90

var player_window_f=@100
var player_window_b=@110
var car_window_height_f=@2
var car_window_height_b=@4
var collidepos=0


#determine point at which train would hit player.
sub player_pos,train_height
set collidepos



#speed configuration (controls train speed for each difficulty setting)
var slow=@1
var medium=@2
var fast=@3
var turbo=@4


##### SET ELSEWHERE IN CODE
var speed=@3
var kb=0
var train_pos=@-140
var train_side=@0
var player_side=@0
var train_score=0
var player_score=0
#####


label main
	asm include;ontrain+media+title.tas0
	prline Oncoming Trains - v1.5
	prline MAIN MENU:
	prline a: About   1: slow    3: fast
	prline r: rules   2: medium  4: turbo
	print q: quit    s: story
	keyprompt
	set kb
		newline
		
		if kb,:q stop
		if kb,:Q stop
		
		if kb,:a gsub about
		if kb,:A gsub about
		
		if kb,:r gsub rules
		if kb,:R gsub rules
		
		if kb,:s gsub story
		if kb,:S gsub story
		
		if kb,:1 gsub slowg
		if kb,:! gsub slowg
		
		if kb,:4 gsub turbog
		if kb,:$ gsub turbog
		
		if kb,:2 gsub mediumg
		if kb,:@ gsub mediumg
		
		if kb,:3 gsub fastg
		if kb,:\p gsub fastg
	
goto main


label slowg
	copy slow,speed
	gsub pregame
return

label turbog
	copy turbo,speed
	gsub pregame
return

label mediumg
	copy medium,speed
	gsub pregame
return

label fastg
	copy fast,speed
	gsub pregame
return

#main game loop

label pregame
	gamode @30
	val 0
	set train_score
	set player_score
	set train_side
	set player_side
	
	
	
	drawfill *---0++---
	
	
	#trees
		drawx1 @-121
		drawy1 @-121
		drawwidth @60
		drawheight @243
		drawcolor *----0+---
		drawrect
	
	#sand
		drawx1 @60
		drawy1 @-121
		drawwidth @70
		drawheight @243
		drawcolor *++++++000
		drawrect
	
	#sea
		drawx1 @85
		drawy1 @-121
		drawwidth @70
		drawheight @243
		drawcolor *0000+++++
		drawrect
	
	
	#hudbars
		drawx1 @-121
		drawy1 @-121
		drawwidth @90
		drawheight @5
		drawcolor *--+--+--+
		drawrect
		
		drawx1 @26
		drawy1 @-121
		drawwidth @90
		drawheight @5
		drawcolor *--+--+-++
		drawrect
		
	gsub track_draw
	
	waitcy 6000
	label primaryloop
		
		gsub track_draw
		
		val @-140
		set train_pos
		rrange @0,@1
		set train_side
		gsub gameloop
		
		if player_side,train_side gsub train_point
		ifnot player_side,train_side gsub player_point
		ifnotless player_score,@90 goto player_win
		ifnotless train_score,@90 goto player_lose
	goto primaryloop

#railroad track draw routine
label track_draw
	drawx1 @-25
	drawy1 @-121
	drawwidth @50
	drawheight @243
	
	
	drawcolor *--+--+--+
	drawrect
	
	drawcolor *+++++++++
	
	drawy1 @-121
	drawy2 @121
	
	
	drawx1 @-18
	drawx2 @-18
	drawline
	
	drawx1 @18
	drawx2 @18
	drawline
	
	drawx1 @-7
	drawx2 @-7
	drawline
	
	drawx1 @7
	drawx2 @7
	drawline
	
	if player_side,@0 gsub playcar_left
	if player_side,@1 gsub playcar_right
	
return
#### win & lose screen
label player_win
	gamode @0
	newline
	asm include;ontrain+media+win.tas0
	print YOU WIN! :D
	keyprompt
	newline
	return

label player_lose
	gamode @0
	newline
	asm include;ontrain+media+gameover.tas0
	print YOU LOSE! >:)
	keyprompt
	newline
	return


# add to player score
label player_point

	add player_score,@3
	set player_score
	drawx1 @26
	drawy1 @-121
	drawwidth player_score
	drawheight @5
	
	
	drawcolor *--+--++++
	drawrect
return

#add to train hits score
label train_point

	add train_score,@15
	set train_score
	drawx1 @-121
	drawy1 @-121
	drawwidth train_score
	drawheight @5
	
	
	drawcolor *+++++++++
	drawrect
return


#primary game round code (in the sense that each train is a round)
label gameloop
	add train_pos,speed
	set train_pos
	
	
	asm ioread1;>mouse.button
	set playclick
	
	if playclick,@1 gsub playertoggle
	
	
	
	
	waitcy 18
	if train_side,@0 gsub train_left
	if train_side,@1 gsub train_right
	
	
	
	#dumpd train_pos
	#newline
	ifnotless train_pos,collidepos return
goto gameloop


#draw train on left track
label train_left
	drawx1 @-20
	drawy1 train_pos
	drawwidth train_width
	drawheight train_height
	drawcolor *+0-+0-+0-
	drawrect
	
	drawwidth train_width_gleam
	drawcolor *+++++++++
	drawrect
return

#draw train on right track
label train_right
	drawx1 @5
	drawy1 train_pos
	drawwidth train_width
	drawheight train_height
	drawcolor *+0-+0-+0-
	drawrect
	
	drawwidth train_width_gleam
	drawcolor *+++++++++
	drawrect
return

#draw player car on left track, and cover up old position.
label playcar_left
	drawx1 @-16
	drawy1 player_pos
	drawwidth car_width
	drawheight car_height
	drawcolor *---000+++
	drawrect
	
	#cover up old position
		drawx1 @8
		drawcolor *--+--+--+
		drawrect
	
	#Car windows
		drawx1 @-15
		drawwidth car_window_width
		drawcolor *------000
		
		#front window
			drawy1 player_window_f
			drawheight car_window_height_f
			drawrect
		
		#rear window
			drawy1 player_window_b
			drawheight car_window_height_b
			drawrect
return

#draw player car on right track, and cover up old position.
label playcar_right
	drawx1 @8
	drawy1 player_pos
	drawwidth car_width
	drawheight car_height
	drawcolor *---000+++
	drawrect
	
	#cover up old position
		drawx1 @-16
		drawcolor *--+--+--+
		drawrect
	
	#Car windows
		drawx1 @9
		drawwidth car_window_width
		drawcolor *------000
		
		#front window
			drawy1 player_window_f
			drawheight car_window_height_f
			drawrect
		
		#rear window
			drawy1 player_window_b
			drawheight car_window_height_b
			drawrect
return

## Player position toggle
label playertoggle
	if player_side,@0 goto playertoggle_skip
		if player_side,@1 =player_side @0
		gsub playcar_left
		return
	label playertoggle_skip
		if player_side,@0 =player_side @1
		gsub playcar_right
		return



#about, rules, and story screens below.

label about
textcolor *+++--0
newline
prline --ABOUT--
prline Oncoming Trains - v1.5 - A graphical 'oncoming obstacle' game.
prline Written as a bundled game for: SBTCVM Gen2-9 (SBTGA)
prline 
prline Copyright (c) 2018-2019 Thomas Leathers & Contributors
prline 
prline Oncoming Trains is free software: you can redistribute it and/or modify
prline it under the terms of the GNU General Public License as published by
prline the Free Software Foundation, either version 3 of the License, or
prline (at your option) any later version.
prline 
prline Oncoming Trains is distributed in the hope that it will be useful,
prline but WITHOUT ANY WARRANTY; without even the implied warranty of
prline MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
prline GNU General Public License for more details.
prline 
prline You should have received a copy of the GNU General Public License
prline along with Oncoming Trains. If not, see <http://www.gnu.org/licenses/>
textcolor *+++---
prline 
prline PRESS A KEY TO RETURN TO MAIN MENU
print >
keyprompt
newline
return

label rules
asm include;ontrain+media+rules.tas0
prline You are trying to escape the city by driving on a railroad line. 
prline One problem: Its actively used!
newline
prline player must pass all 30 trains, while being hit by less than 6.
prline use your mouse to leftclick to change tracks. difficulty changes speed.
textcolor *++----
print Good Luck!
textcolor *+++---
keyprompt
newline
return

label story
asm include;ontrain+media+story.tas0
prline You are a spy trying to escape the enemy city with crucial information.
prline You take a rail line thats supposed to be abandoned, but the enemy was
prline expecting this and is sending 30 trains your way!
newline
prline Can the spy escape the city? Can he save the day?
textcolor *++----
print or will he be hit by the Oncoming Trains?
textcolor *+++---
keyprompt
newline
return
