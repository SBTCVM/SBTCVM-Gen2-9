########
###gett vars###
var gett_ch=0
var gett_val=0
var gett_cnt=0
var gett_decv=0
var gett_numb=0
var gett_disp=0
########

########
###getd vars###
var getd_ch=0
var getd_val=0
var getd_cnt=0
var getd_decv=0
var getd_numb=0
var getd_disp=0
var getd_negflg=0
########

var promptcolor=0+0---

var monitor_wri_buff=0
var monitor_ran_buff=0
var monitor_inst_buff=0
var monitor_data_buff=0
var mon_dmp_stop=0

#determine & set end of code area for monitor INSTRUCTION/DATA write safety.
var WRITEPROTECT_END=0
asm setreg1;>END_OF_WRITE_PROTECT
set WRITEPROTECT_END

var mem_stat_buff=0

var inmode=@1
var valbuff=0
var promptprefix=:d

var v1buff=0
var v2buff=0
var resbuff=0
var resbuff2=0
var kb=0

####### CALCULATOR MAIN ROUTINE #######
textcolor *+++--0
prline clicalc: A ternary/decimal CLI calculator.
prline Version 2.2
prline press 'h' for help, and '?' for about info.
textcolor *+++---
gsub do_mode_decimal
label main
textcolor *0++---
chardump promptprefix
print >
textcolor *+++---
keyprompt
set kb
chardump kb
newline
if kb,:a gsub add
if kb,:A gsub add
if kb,:s gsub sub
if kb,:S gsub sub
if kb,:m gsub mul
if kb,:M gsub mul
if kb,:d gsub div
if kb,:D gsub div
if kb,:r gsub divm
if kb,:R gsub divm
if kb,:i gsub inv
if kb,:I gsub inv
if kb,:b gsub abso
if kb,:B gsub abso
if kb,:h gsub help
if kb,:H gsub help
if kb,:? gsub about
if kb,:/ gsub about
if kb,:1 gsub do_mode_decimal
if kb,:! gsub do_mode_decimal
if kb,:2 gsub do_mode_ternary
if kb,:@ gsub do_mode_ternary
if kb,:p gsub monitor_main
if kb,:P gsub monitor_main
if kb,:q stop
if kb,:Q stop

goto main


#### enable ternary mode ####
label do_mode_ternary
textcolor *+0----
prline ----- TERNARY MODE ENABLED -----
textcolor *+++---
val @2
set inmode
val :t
set promptprefix
return

#### enable ternary mode ####
label do_mode_decimal
textcolor *+-0---
prline ----- DECIMAL MODE ENABLED -----
textcolor *+++---
val @1
set inmode
val :d
set promptprefix
return


#### ADD ####
label add
prline ADDITION:
gsub getnums
add v1buff,v2buff
set resbuff
print sum is   : 
dumpt resbuff
print  ( 
dumpd resbuff
prline  )
return

#### INVERT ####
label inv
prline INVERT:
gsub get1num
invert v1buff
print result is: 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
return

#### ABSOLUTE ####
label abso
prline ABSOLUTE:
gsub get1num
abs v1buff
set v1buff
print result is: 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
return


#### SUBTRACTION ####
label sub
prline SUBTRACTION:
gsub getnums
sub v1buff,v2buff
set resbuff
print result is: 
dumpt resbuff
print  ( 
dumpd resbuff
prline  )
return


#### MULTIPLICATION ####
label mul
prline MULTIPLICATION:
gsub getnums
mul v1buff,v2buff
set resbuff
print result is: 
dumpt resbuff
print  ( 
dumpd resbuff
prline  )
return

#### DIVISION ####
label div
prline DIVISION:
gsub getnums
#######catch those sneaky zero divisions early.
if v2buff,@0 goto div_err
div v1buff,v2buff
set resbuff
print result is: 
dumpt resbuff
print  ( 
dumpd resbuff
prline  )
return

#### MODULO DIVISION ####
label divm
prline DIVISION (modulo):
gsub getnums
#######catch those sneaky zero divisions early.
if v2buff,@0 goto div_err
divmod v1buff,v2buff
set resbuff
set2 resbuff2
print remainder is: 
dumpt resbuff
print  ( 
dumpd resbuff
prline  )
print quotient is : 
dumpt resbuff2
print  ( 
dumpd resbuff2
prline  )
return

#### a message for the age old zero division error: ####
label div_err
prline ERROR: Not even in balanced ternary, can you divide by zero.
return


#### Dual Number prompt code (see 'inget' for actual number input) ####
label getnums
textcolor *0++---
print num0? >
gsub inget
textcolor *+++---
copy valbuff,v1buff
newline
print num0 is  : 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
textcolor *0++---
print num1? >
gsub inget
textcolor *+++---
copy valbuff,v2buff
newline
print num1 is  : 
dumpt v2buff
print  ( 
dumpd v2buff
prline  )
return

#### Single Number prompt code (see 'inget' for actual number input) ####
label get1num
textcolor *0++---
print num? >
gsub inget
textcolor *+++---
copy valbuff,v1buff
newline
print num is   : 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
return

########## input chooser for use with GETT & GETD ########
label inget
if inmode,@1 gsub getd
if inmode,@1 =valbuff getd_val
if inmode,@2 gsub gett
if inmode,@2 =valbuff gett_val
return


####### GETT: TERNARY VALUE INPUT CODE ########

label gett
val 0
set gett_val
val 0
set gett_cnt
label gett_loop
keyprompt
set gett_ch
if gett_ch,:\x =gett_disp :\x
if gett_ch,:\x gsub gett_backone
#valid zero keys
if gett_ch,:0 =gett_decv @0
if gett_ch,:0 =gett_disp :0
if gett_ch,:0 gsub gett_donum
if gett_ch,:) =gett_decv @0
if gett_ch,:) =gett_disp :0
if gett_ch,:) gsub gett_donum

#valid negative keys
if gett_ch,:- =gett_decv @-1
if gett_ch,:- =gett_disp :-
if gett_ch,:- gsub gett_donum
if gett_ch,:_ =gett_decv @-1
if gett_ch,:_ =gett_disp :-
if gett_ch,:_ gsub gett_donum
if gett_ch,:n =gett_decv @-1
if gett_ch,:n =gett_disp :-
if gett_ch,:n gsub gett_donum
if gett_ch,:N =gett_decv @-1
if gett_ch,:N =gett_disp :-
if gett_ch,:N gsub gett_donum

#valid positive keys
if gett_ch,:+ =gett_decv @1
if gett_ch,:+ =gett_disp :+
if gett_ch,:+ gsub gett_donum
if gett_ch,:= =gett_decv @1
if gett_ch,:= =gett_disp :+
if gett_ch,:= gsub gett_donum
if gett_ch,:p =gett_decv @1
if gett_ch,:p =gett_disp :+
if gett_ch,:p gsub gett_donum
if gett_ch,:P =gett_decv @1
if gett_ch,:P =gett_disp :+
if gett_ch,:P gsub gett_donum

#confirm key
if gett_ch,:\n goto gett_end
#comment out the following 2 conditionals to disable user exit in number prompts.
if gett_ch,:q stop
if gett_ch,:Q stop
goto gett_loop

#####calculate number
label gett_end
stackrev
label gett_end_loop
if gett_cnt,@0 return
sub gett_cnt,@1
set gett_cnt
pop
set gett_numb
mul gett_val,@3
set gett_val
add gett_val,gett_numb
set gett_val
goto gett_end_loop





####push number value to stack
label gett_donum
if gett_cnt,@9 return
chardump gett_disp
get gett_decv
push
add gett_cnt,@1
set gett_cnt
return



#if number count isn't 0, pop last from stack.
label gett_backone

if gett_cnt,@0 return
chardump gett_disp
sub gett_cnt,@1
set gett_cnt
pop
return



####### getd: DECIMAL VALUE INPUT CODE ########

label getd
val 0
set getd_val
set getd_cnt
set getd_negflg
label getd_loop
keyprompt
set getd_ch
if getd_ch,:\x =getd_disp :\x
if getd_ch,:\x gsub getd_backone
#valid keys
if getd_ch,:- =getd_decv @10
if getd_ch,:- =getd_disp :-
if getd_ch,:- gsub getd_donum

if getd_ch,:0 =getd_decv @0
if getd_ch,:0 =getd_disp :0
if getd_ch,:0 gsub getd_donum
if getd_ch,:1 =getd_decv @1
if getd_ch,:1 =getd_disp :1
if getd_ch,:1 gsub getd_donum
if getd_ch,:2 =getd_decv @2
if getd_ch,:2 =getd_disp :2
if getd_ch,:2 gsub getd_donum
if getd_ch,:3 =getd_decv @3
if getd_ch,:3 =getd_disp :3
if getd_ch,:3 gsub getd_donum
if getd_ch,:4 =getd_decv @4
if getd_ch,:4 =getd_disp :4
if getd_ch,:4 gsub getd_donum
if getd_ch,:5 =getd_decv @5
if getd_ch,:5 =getd_disp :5
if getd_ch,:5 gsub getd_donum
if getd_ch,:6 =getd_decv @6
if getd_ch,:6 =getd_disp :6
if getd_ch,:6 gsub getd_donum
if getd_ch,:7 =getd_decv @7
if getd_ch,:7 =getd_disp :7
if getd_ch,:7 gsub getd_donum
if getd_ch,:8 =getd_decv @8
if getd_ch,:8 =getd_disp :8
if getd_ch,:8 gsub getd_donum
if getd_ch,:9 =getd_decv @9
if getd_ch,:9 =getd_disp :9
if getd_ch,:9 gsub getd_donum

#confirm key
if getd_ch,:\n goto getd_end
#comment out the following 2 conditionals to disable user exit in number prompts.
if getd_ch,:q stop
if getd_ch,:Q stop
goto getd_loop

#####calculate number
label getd_end
stackrev
label getd_end_loop
if getd_cnt,@0 goto getd_negdo
sub getd_cnt,@1
set getd_cnt
pop
set getd_numb
## check for 10 in input, this means to set the negative flag!
if getd_numb,@10 gsub getd_doneg
if getd_numb,@10 goto getd_end_loop

mul getd_val,@10
set getd_val
add getd_val,getd_numb
set getd_val
goto getd_end_loop

### negative flag setter helper for getd_end
label getd_doneg
val @1
set getd_negflg
return

####invert number if negative flag set, then return
label getd_negdo
if getd_negflg,@0 return
invert getd_val
return




####push number value to stack
label getd_donum
if getd_cnt,@6 return
chardump getd_disp
get getd_decv
push
add getd_cnt,@1
set getd_cnt
return



#if number count isn't 0, pop last from stack.
label getd_backone
if getd_cnt,@0 =getd_negflg @0
if getd_cnt,@0 return
chardump getd_disp
sub getd_cnt,@1
set getd_cnt
pop
return



####### ABOUT & HELP #######

label about
textcolor *+++--0
newline
prline --ABOUT--
prline clicalc v2.2: A ternary/decimal CLI calculator & memory monitor
prline Part of SBTCVM Gen2-9
prline 
prline Copyright (c) 2018-2019 Thomas Leathers & Contributors
prline 
prline clicalc is free software: you can redistribute it and/or modify
prline it under the terms of the GNU General Public License as published by
prline the Free Software Foundation, either version 3 of the License, or
prline (at your option) any later version.
prline 
prline clicalc is distributed in the hope that it will be useful,
prline but WITHOUT ANY WARRANTY; without even the implied warranty of
prline MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
prline GNU General Public License for more details.
prline 
prline You should have received a copy of the GNU General Public License
prline along with clicalc. If not, see <http://www.gnu.org/licenses/>
textcolor *+++---
prline 
prline PRESS A KEY TO RETURN TO MAIN PROMPT
textcolor *0++---
print ?>>>
keyprompt
newline
return


label help
textcolor *+++--0
prline clicalc v2.2: A ternary/decimal CLI calculator & memory monitor
prline COMMANDS:
prline   a: add
prline   s: subtract
prline   m: multiply
prline   d: divide
prline   r: modulo divide
prline   i: inversion
prline   b: absolute value
prline   h: This text.
prline   ?: about clicalc
prline   q: quit clicalc
prline   1: enter DECIMAL MODE (indicated by 'd>' prompt) (default)
prline   2: enter TERNARY MODE (indicated by 't>' prompt)
prline   p: Enter MEMORY MONITOR mode. (experimental) (prompt will contain 'Mem')
prline WHEN ENTERING NUMBERS:
prline [+,0,-]/[p,0,n] When in TERNARY MODE
prline [0-9] as well as [-] at start for negatives, When in DECIMAL MODE
prline [q,Q] quits clicalc.
prline [BACKSPACE] remove last-entered digit.
prline <input is limited to 9 trits <-9841 to 9841>>
textcolor *+++---
prline 
prline PRESS A KEY TO RETURN TO MAIN PROMPT
textcolor *0++---
print ?>>>

keyprompt
newline
return


label monitor_help
textcolor *+++--0
prline clicalc v2.2: A ternary/decimal CLI calculator & memory monitor
prline MONITOR COMMANDS:
prline   p: return to calculator mode
prline   o: read IO address                  q: quit clicalc
prline   l: write IO address                 ?: about clicalc
prline   i: read DATA address                h: help (this text)
prline   k: write DATA address *             m: memory stats
prline   u: read INSTRUCTION address         d: view a range of RAM (data/inst)
prline   j: write INSTRUCTION address *      f: view 24 words of RAM at once.
newline
prline   1: enter DECIMAL MODE (indicated by 'dMem>' prompt) (default)
prline   2: enter TERNARY MODE (indicated by 'tMem>' prompt)
prline     * part of RAM is treated as READ ONLY. see 'memory stats' (m)
prline See calculator prompt help for info on entering numbers
textcolor *+++---
prline 
prline PRESS A KEY TO RETURN TO MAIN PROMPT
textcolor *0++---
print ?>>>

keyprompt
newline
return

#### MEMORY MONITOR MAIN MENU ####
label monitor_main
textcolor *+++--0
prline CliCalc Embedded Memory Monitor (experimental!)
gsub memory_stats
label monitor_loop
textcolor *0++---
chardump promptprefix
print Mem>
textcolor *+++---
keyprompt
set kb
chardump kb
newline
if kb,:1 gsub do_mode_decimal
if kb,:! gsub do_mode_decimal
if kb,:2 gsub do_mode_ternary
if kb,:@ gsub do_mode_ternary
if kb,:h gsub monitor_help
if kb,:H gsub monitor_help
if kb,:? gsub about
if kb,:/ gsub about
if kb,:p goto monitor_return
if kb,:P goto monitor_return
if kb,:o gsub m_io_read
if kb,:O gsub m_io_read
if kb,:l gsub m_io_write
if kb,:L gsub m_io_write
if kb,:i gsub m_data_read
if kb,:I gsub m_data_read
if kb,:k gsub m_data_write
if kb,:K gsub m_data_write
if kb,:u gsub m_inst_read
if kb,:U gsub m_inst_read
if kb,:j gsub m_inst_write
if kb,:J gsub m_inst_write
if kb,:m gsub memory_stats
if kb,:M gsub memory_stats
if kb,:d gsub m_rd_view
if kb,:D gsub m_rd_view
if kb,:f gsub m_rd_vscreen
if kb,:F gsub m_rd_vscreen
if kb,:q stop
if kb,:Q stop

goto monitor_loop


label monitor_return
prline Returning to Calculator...
return


#### IOBUS READ ####
label m_io_read
prline IOBUS READ
prline Address?
gsub get1num
get v1buff
asm datawrite1;>IOBUS_READ_MON
asm ioread1;0;IOBUS_READ_MON
set v1buff
newline
print Value: 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
return


#note: IOBUS write has ZERO write protection! THIS IS INTENTIONAL!!!!

#### IOBUS WRITE ####
label m_io_write
prline IOBUS WRITE
prline Address?
gsub get1num
copy v1buff,monitor_wri_buff
prline Value?
gsub get1num
get monitor_wri_buff
get2 v1buff
asm datawrite1;>IOBUS_WRITE_MON
asm iowrite2;0;IOBUS_WRITE_MON
newline
prline done.
return


#### DATA READ ####
label m_data_read
prline DATA READ
prline Address?
gsub get1num
get v1buff
asm datawrite1;>DATA_READ_MON
asm dataread1;0;DATA_READ_MON
set v1buff
newline
print Value: 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
return


#### DATA WRITE ####
label m_data_write
prline DATA WRITE
prline Address?
gsub get1num

#sanity check
ifnotmore v1buff,WRITEPROTECT_END goto write_sanity

copy v1buff,monitor_wri_buff
prline Value?
gsub get1num
get monitor_wri_buff
get2 v1buff
asm datawrite1;>DATA_WRITE_MON
asm datawrite2;0;DATA_WRITE_MON
newline
prline done.
return

#### INST READ ####
label m_inst_read
prline INSTRUCTION READ
prline Address?
gsub get1num
get v1buff
asm datawrite1;>INST_READ_MON
asm instread1;0;INST_READ_MON
set v1buff
newline
print Value: 
dumpt v1buff
print  ( 
dumpd v1buff
prline  )
return


#### INST WRITE ####
label m_inst_write
prline INSTRUCTION WRITE
prline Address?
gsub get1num

#sanity check
ifnotmore v1buff,WRITEPROTECT_END goto write_sanity

copy v1buff,monitor_wri_buff
prline Value?
gsub get1num
get monitor_wri_buff
get2 v1buff
asm datawrite1;>INST_WRITE_MON
asm instwrite2;0;INST_WRITE_MON
newline
prline done.
return

### write protection code ###
label write_sanity
textcolor *+0----
prline FAULT: the entered address is within clicalc's code memory range!
textcolor *+++---
return

### Memory Stats ###
label memory_stats
textcolor *+++---
prline RAM STATS: (data/instruction writing) (IOBUS is NOT affected)
textcolor *+00---
print Protected memory zone: -9841 (---------) to 
dumpd WRITEPROTECT_END
print  (
dumpt WRITEPROTECT_END
print )
newline
textcolor *0+0---
print  writable memory zone:
add WRITEPROTECT_END,@1
set mem_stat_buff
dumpd mem_stat_buff
print  (
dumpt mem_stat_buff
print )

print  to  9841  (+++++++++)
textcolor *+++---
newline
return



#### RANGE DUMP SCREEN ####
label m_rd_vscreen

val 0
set mon_dmp_stop

prline range dump screen
prline Start Address?
gsub get1num
copy v1buff,monitor_ran_buff
add v1buff,@23
set v1buff
goto m_rd_view_loop





#### RANGE DUMP VIEW ####
label m_rd_view

val 0
set mon_dmp_stop

prline range dump view
prline Start Address?
gsub get1num
copy v1buff,monitor_ran_buff
prline End Address?
gsub get1num

label m_rd_view_loop

getchar kb
ifnot kb,@0 goto break


get monitor_ran_buff
asm datawrite1;>INST_RANGE_MON_S
asm datawrite1;>INST_RANGE_MON_E
asm instread1;0;INST_RANGE_MON_S
asm dataread2;0;INST_RANGE_MON_E
set1 monitor_inst_buff
set2 monitor_data_buff
textcolor *+0+---
print A:
dumpd monitor_ran_buff
print , 
textcolor *++0---
dumpt monitor_inst_buff
space
textcolor *0++---
dumpt monitor_data_buff
space
textcolor *++0---
dumpd monitor_inst_buff
space
textcolor *0++---
dumpd monitor_data_buff
newline


waitcy 336

add monitor_ran_buff,@1
set monitor_ran_buff
if mon_dmp_stop,@1 return
if v1buff,monitor_ran_buff =mon_dmp_stop @1
goto m_rd_view_loop


label break
newline
textcolor *+0----
prline ---KEYBOARD BREAK---
textcolor *+++---
newline
return


#used to determine protected memory area
asm null;;END_OF_WRITE_PROTECT