#SSTNPL COMPILER v0.4.0
#header
head-rname=auto_main
head-nspin=stdnsp
fopset1;>io.ttywr
fopset2;>io.packart
#stnp source file: (autogenerated from) "apps/maze/auto_main.stnp
null;10x11;mazewide
null;10x6;mazetall
null;10x1;px
null;10x1;py
null;10x1;add1
null;0;set0
null;10x0;mazememtop
null;10x0;drawx
null;10x0;drawy
null;10x0;lookx
null;10x0;looky
null;:\s;floor
null;:=;win
null;:w;upk
null;:s;dnk
null;:a;lk
null;:d;rk
null;:q;quitk
null;:m;mapk
null;:o;aboutk
null;10x0;ymul
null;10x0;lookpos
null;10x0;lookresult
null;10x0;keybuff
null;10x0;newx
null;10x0;newy
null;+++---;*+++---
null;+++000;*+++000
null;0++---;*0++---
null;+-----;*+-----
null;+++0--;*+++0--
null;+++--0;*+++--0
#goto 
goto;>skipdata--label
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #14
null;;mazetop#SSTNPL Source Line: '14' 
#print
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:=
fopwri1;:X
fopwri1;:X
#label
zerosize;;skipdata--label
#prline
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:2
fopwri1;:\n
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #66
setreg1;>mazetop#SSTNPL Source Line: '66' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>mazememtop
#add (2op math)
dataread1;>add1
dataread2;>mazememtop
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>mazememtop
#label
zerosize;;main--label
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#prline
fopwri1;:M
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:V
fopwri1;:i
fopwri1;:e
fopwri1;:w
fopwri1;::
fopwri1;:\n
#print newline
fopwri1;:\n
#Set text colors
dataread1;>*+++000
iowrite1;>io.textcolor
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#print newline
fopwri1;:\n
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#goto (extra code stores away return address.)
setreg1;>goto--jumper-89
s1push1
goto;>draw2--label
zerosize;;goto--jumper-89
#print newline
fopwri1;:\n
#Set text colors
dataread1;>*+++000
iowrite1;>io.textcolor
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#print newline
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#prline
fopwri1;:w
fopwri1;:\m
fopwri1;:a
fopwri1;:\m
fopwri1;:s
fopwri1;:\m
fopwri1;:d
fopwri1;:=
fopwri1;:m
fopwri1;:o
fopwri1;:v
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:q
fopwri1;:=
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:\m
fopwri1;:\s
fopwri1;:m
fopwri1;:=
fopwri1;:m
fopwri1;:a
fopwri1;:p
fopwri1;:\m
fopwri1;:\s
fopwri1;:o
fopwri1;:=
fopwri1;:a
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:g
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\n
#label
zerosize;;main_input--label
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-97
gotoif;>keyprompt--loop-97
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>keybuff
#conditional subroutine goto
dataread1;>keybuff
dataread2;>upk
gotoif;>goto--branch-99
goto;>goto--jumper-99
setreg1;>goto--jumper-99;goto--branch-99
s1push1
goto;>doup--label
zerosize;;goto--jumper-99
#conditional goto
dataread1;>keybuff
dataread2;>upk
gotoif;>goto--branch-100
goto;>goto--jumper-100
setreg1;>goto--jumper-100;goto--branch-100
goto;>main--label
zerosize;;goto--jumper-100
#conditional subroutine goto
dataread1;>keybuff
dataread2;>dnk
gotoif;>goto--branch-101
goto;>goto--jumper-101
setreg1;>goto--jumper-101;goto--branch-101
s1push1
goto;>dodown--label
zerosize;;goto--jumper-101
#conditional goto
dataread1;>keybuff
dataread2;>dnk
gotoif;>goto--branch-102
goto;>goto--jumper-102
setreg1;>goto--jumper-102;goto--branch-102
goto;>main--label
zerosize;;goto--jumper-102
#conditional subroutine goto
dataread1;>keybuff
dataread2;>lk
gotoif;>goto--branch-103
goto;>goto--jumper-103
setreg1;>goto--jumper-103;goto--branch-103
s1push1
goto;>doleft--label
zerosize;;goto--jumper-103
#conditional goto
dataread1;>keybuff
dataread2;>lk
gotoif;>goto--branch-104
goto;>goto--jumper-104
setreg1;>goto--jumper-104;goto--branch-104
goto;>main--label
zerosize;;goto--jumper-104
#conditional subroutine goto
dataread1;>keybuff
dataread2;>rk
gotoif;>goto--branch-105
goto;>goto--jumper-105
setreg1;>goto--jumper-105;goto--branch-105
s1push1
goto;>doright--label
zerosize;;goto--jumper-105
#conditional goto
dataread1;>keybuff
dataread2;>rk
gotoif;>goto--branch-106
goto;>goto--jumper-106
setreg1;>goto--jumper-106;goto--branch-106
goto;>main--label
zerosize;;goto--jumper-106
#conditional subroutine goto
dataread1;>keybuff
dataread2;>mapk
gotoif;>goto--branch-107
goto;>goto--jumper-107
setreg1;>goto--jumper-107;goto--branch-107
s1push1
goto;>drawfull--label
zerosize;;goto--jumper-107
#conditional goto
dataread1;>keybuff
dataread2;>mapk
gotoif;>goto--branch-108
goto;>goto--jumper-108
setreg1;>goto--jumper-108;goto--branch-108
goto;>main--label
zerosize;;goto--jumper-108
#conditional subroutine goto
dataread1;>keybuff
dataread2;>aboutk
gotoif;>goto--branch-109
goto;>goto--jumper-109
setreg1;>goto--jumper-109;goto--branch-109
s1push1
goto;>about--label
zerosize;;goto--jumper-109
#conditional goto
dataread1;>keybuff
dataread2;>aboutk
gotoif;>goto--branch-110
goto;>goto--jumper-110
setreg1;>goto--jumper-110;goto--branch-110
goto;>main--label
zerosize;;goto--jumper-110
#conditional goto
dataread1;>keybuff
dataread2;>quitk
gotoif;>goto--branch-111
goto;>goto--jumper-111
setreg1;>goto--jumper-111;goto--branch-111
goto;>quit--label
zerosize;;goto--jumper-111
#goto 
goto;>main_input--label
#label
zerosize;;quit--label
#Set text colors
dataread1;>*+-----
iowrite1;>io.textcolor
#prline
fopwri1;:G
fopwri1;:A
fopwri1;:M
fopwri1;:E
fopwri1;:\s
fopwri1;:O
fopwri1;:V
fopwri1;:E
fopwri1;:R
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:p
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:k
fopwri1;:e
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:i
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-119
gotoif;>keyprompt--loop-119
#stop (shutdown vm)
stop
#label
zerosize;;doup--label
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newy
#copy variables 
dataread1;>px
datawrite1;>newx
#goto (extra code stores away return address.)
setreg1;>goto--jumper-126
s1push1
goto;>check--label
zerosize;;goto--jumper-126
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;dodown--label
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newy
#copy variables 
dataread1;>px
datawrite1;>newx
#goto (extra code stores away return address.)
setreg1;>goto--jumper-133
s1push1
goto;>check--label
zerosize;;goto--jumper-133
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;doleft--label
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newx
#copy variables 
dataread1;>py
datawrite1;>newy
#goto (extra code stores away return address.)
setreg1;>goto--jumper-140
s1push1
goto;>check--label
zerosize;;goto--jumper-140
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;doright--label
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newx
#copy variables 
dataread1;>py
datawrite1;>newy
#goto (extra code stores away return address.)
setreg1;>goto--jumper-147
s1push1
goto;>check--label
zerosize;;goto--jumper-147
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;check--label
#copy variables 
dataread1;>newx
datawrite1;>lookx
#copy variables 
dataread1;>newy
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-154
s1push1
goto;>lookup--label
zerosize;;goto--jumper-154
#conditional goto
dataread1;>lookresult
dataread2;>floor
gotoif;>goto--branch-155
goto;>goto--jumper-155
setreg1;>goto--jumper-155;goto--branch-155
goto;>check_pass--label
zerosize;;goto--jumper-155
#conditional goto
dataread1;>lookresult
dataread2;>win
gotoif;>goto--branch-156
goto;>goto--jumper-156
setreg1;>goto--jumper-156;goto--branch-156
goto;>winner--label
zerosize;;goto--jumper-156
#Set text colors
dataread1;>*+++0--
iowrite1;>io.textcolor
#prline
fopwri1;:I
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:g
fopwri1;:o
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:y
fopwri1;:.
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;check_pass--label
#copy variables 
dataread1;>newx
datawrite1;>px
#copy variables 
dataread1;>newy
datawrite1;>py
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;winner--label
#prline
fopwri1;:Y
fopwri1;:O
fopwri1;:U
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:N
fopwri1;:!
fopwri1;:!
fopwri1;:!
fopwri1;:\n
#prline
fopwri1;:P
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:k
fopwri1;:e
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:i
fopwri1;:t
fopwri1;:\n
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-169
gotoif;>keyprompt--loop-169
#stop (shutdown vm)
stop
#label
zerosize;;draw2--label
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-178
s1push1
goto;>lookup--label
zerosize;;goto--jumper-178
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#copy variables 
dataread1;>px
datawrite1;>lookx
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-184
s1push1
goto;>lookup--label
zerosize;;goto--jumper-184
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-191
s1push1
goto;>lookup--label
zerosize;;goto--jumper-191
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:\s
fopwri1;:\v
#print newline
fopwri1;:\n
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#copy variables 
dataread1;>py
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-199
s1push1
goto;>lookup--label
zerosize;;goto--jumper-199
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:@
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#copy variables 
dataread1;>py
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-207
s1push1
goto;>lookup--label
zerosize;;goto--jumper-207
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:\s
fopwri1;:\v
#print newline
fopwri1;:\n
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-217
s1push1
goto;>lookup--label
zerosize;;goto--jumper-217
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#copy variables 
dataread1;>px
datawrite1;>lookx
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-224
s1push1
goto;>lookup--label
zerosize;;goto--jumper-224
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-232
s1push1
goto;>lookup--label
zerosize;;goto--jumper-232
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:\s
fopwri1;:\v
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;drawfull--label
#Set text colors
dataread1;>*0++---
iowrite1;>io.textcolor
#prline
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:'
fopwri1;:@
fopwri1;:'
fopwri1;:.
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:'
fopwri1;:=
fopwri1;:'
fopwri1;:.
fopwri1;:\n
#get(1) (may be used with set, or asm code)
dataread1;>set0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawx
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawy
#label
zerosize;;draw_yl--label
#label
zerosize;;draw_xl--label
#conditional goto
dataread1;>drawy
dataread2;>py
gotoif;>goto--branch-250
goto;>goto--jumper-250
setreg1;>goto--jumper-250;goto--branch-250
goto;>draw_poscheck--label
zerosize;;goto--jumper-250
#goto 
goto;>draw_skippos--label
#label
zerosize;;draw_poscheck--label
#conditional subroutine goto
dataread1;>drawx
dataread2;>px
gotoif;>goto--branch-255
goto;>goto--jumper-255
setreg1;>goto--jumper-255;goto--branch-255
s1push1
goto;>draw_pointget--label
zerosize;;goto--jumper-255
#conditional goto
dataread1;>drawx
dataread2;>px
gotoif;>goto--branch-256
goto;>goto--jumper-256
setreg1;>goto--jumper-256;goto--branch-256
goto;>draw_skiplook--label
zerosize;;goto--jumper-256
#label
zerosize;;draw_skippos--label
#copy variables 
dataread1;>drawx
datawrite1;>lookx
#copy variables 
dataread1;>drawy
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-261
s1push1
goto;>lookup--label
zerosize;;goto--jumper-261
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#label
zerosize;;draw_skiplook--label
#add (2op math)
dataread1;>drawx
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawx
#conditional goto
dataread1;>drawx
dataread2;>mazewide
gotoif;>goto--branch-268
goto;>goto--jumper-268
setreg1;>goto--jumper-268;goto--branch-268
goto;>draw_xret--label
zerosize;;goto--jumper-268
#goto 
goto;>draw_xl--label
#label
zerosize;;draw_xret--label
#get(1) (may be used with set, or asm code)
dataread1;>set0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawx
#print newline
fopwri1;:\n
#add (2op math)
dataread1;>drawy
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawy
#conditional return
dataread1;>drawy
dataread2;>mazetall
gotoif;>goto--branch-277
goto;>goto--jumper-277
s1pop1;;goto--branch-277
gotoreg1
zerosize;;goto--jumper-277
#goto 
goto;>draw_yl--label
#label
zerosize;;draw_pointget--label
#print
fopwri1;:@
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;lookup--label
#multiply (2op math)
dataread1;>mazewide
dataread2;>looky
mul
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>ymul
#add (2op math)
dataread1;>ymul
dataread2;>lookx
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookpos
#add (2op math)
dataread1;>lookpos
dataread2;>mazememtop
add
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #293
datawrite1;>ASMKEEP#SSTNPL Source Line: '293' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #294
dataread1;;ASMKEEP#SSTNPL Source Line: '294' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookresult
#return from subroutine.
s1pop1
gotoreg1
#label
zerosize;;about--label
#Set text colors
dataread1;>*+++--0
iowrite1;>io.textcolor
#prline
fopwri1;:-
fopwri1;:-
fopwri1;:A
fopwri1;:B
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:2
fopwri1;:\n
#prline
fopwri1;:P
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:2
fopwri1;:-
fopwri1;:9
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:r
fopwri1;:i
fopwri1;:g
fopwri1;:h
fopwri1;:t
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:)
fopwri1;:\s
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:8
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:o
fopwri1;:m
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:L
fopwri1;:e
fopwri1;:a
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:\s
fopwri1;:&
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:s
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:/
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:m
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:p
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:b
fopwri1;:y
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:S
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:o
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\m
fopwri1;:\s
fopwri1;:e
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:3
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\m
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#prline
fopwri1;:(
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:r
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:)
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:y
fopwri1;:\s
fopwri1;:l
fopwri1;:a
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:h
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:b
fopwri1;:e
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:f
fopwri1;:u
fopwri1;:l
fopwri1;:\m
fopwri1;:\n
#prline
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:T
fopwri1;:H
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:\s
fopwri1;:A
fopwri1;:N
fopwri1;:Y
fopwri1;:\s
fopwri1;:W
fopwri1;:A
fopwri1;:R
fopwri1;:R
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:Y
fopwri1;:\c
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:e
fopwri1;:v
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:m
fopwri1;:p
fopwri1;:l
fopwri1;:i
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:r
fopwri1;:a
fopwri1;:n
fopwri1;:t
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\n
#prline
fopwri1;:M
fopwri1;:E
fopwri1;:R
fopwri1;:C
fopwri1;:H
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:A
fopwri1;:B
fopwri1;:I
fopwri1;:L
fopwri1;:I
fopwri1;:T
fopwri1;:Y
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:F
fopwri1;:I
fopwri1;:T
fopwri1;:N
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:F
fopwri1;:O
fopwri1;:R
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:P
fopwri1;:A
fopwri1;:R
fopwri1;:T
fopwri1;:I
fopwri1;:C
fopwri1;:U
fopwri1;:L
fopwri1;:A
fopwri1;:R
fopwri1;:\s
fopwri1;:P
fopwri1;:U
fopwri1;:R
fopwri1;:P
fopwri1;:O
fopwri1;:S
fopwri1;:E
fopwri1;:.
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:l
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#prline
fopwri1;:\n
#prline
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:h
fopwri1;:a
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:e
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\n
#prline
fopwri1;:a
fopwri1;:l
fopwri1;:o
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:I
fopwri1;:f
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:t
fopwri1;:\m
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:<
fopwri1;:h
fopwri1;:t
fopwri1;:t
fopwri1;:p
fopwri1;::
fopwri1;:/
fopwri1;:/
fopwri1;:w
fopwri1;:w
fopwri1;:w
fopwri1;:.
fopwri1;:g
fopwri1;:n
fopwri1;:u
fopwri1;:.
fopwri1;:o
fopwri1;:r
fopwri1;:g
fopwri1;:/
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:s
fopwri1;:/
fopwri1;:>
fopwri1;:\n
#Set text colors
dataread1;>*+++---
iowrite1;>io.textcolor
#prline
fopwri1;:\n
#prline
fopwri1;:P
fopwri1;:R
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:K
fopwri1;:E
fopwri1;:Y
fopwri1;:\s
fopwri1;:T
fopwri1;:O
fopwri1;:\s
fopwri1;:R
fopwri1;:E
fopwri1;:T
fopwri1;:U
fopwri1;:R
fopwri1;:N
fopwri1;:\s
fopwri1;:T
fopwri1;:O
fopwri1;:\s
fopwri1;:G
fopwri1;:A
fopwri1;:M
fopwri1;:E
fopwri1;:\n
#print
fopwri1;:>
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-323
gotoif;>keyprompt--loop-323
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
