#SSTNPL COMPILER v0.2.0
#header
head-rname=auto_main
head-nspin=stdnsp
fopset1;>io.ttywr
#stnp source file: (autogenerated from) "APPS/maze/auto_main.stnp
null;10x11;mazewide
null;10x6;mazetall
null;10x1;px
null;10x1;py
null;10x1;add1
null;0;set0
null;10x0;mazememtop
null;10x0;drawx
null;10x0;drawy
null;10x0;lookx
null;10x0;looky
null;:\s;floor
null;:=;win
null;:w;upk
null;:s;dnk
null;:a;lk
null;:d;rk
null;:q;quitk
null;:m;mapk
null;:o;aboutk
null;10x0;ymul
null;10x0;lookpos
null;10x0;lookresult
null;10x0;keybuff
null;10x0;newx
null;10x0;newy
#goto 
goto;>skipdata--label
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #14
null;;mazetop#SSTNPL Source Line: '14' 
#print
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:X
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
fopwri1;:\s
fopwri1;:\s
fopwri1;:X
#print
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:X
fopwri1;:=
fopwri1;:X
fopwri1;:X
#label
null;;skipdata--label
#print
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:\n
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #66
setreg1;>mazetop#SSTNPL Source Line: '66' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>mazememtop
#add (2op math)
dataread1;>add1
dataread2;>mazememtop
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>mazememtop
#label
null;;main--label
#print
fopwri1;:M
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:V
fopwri1;:i
fopwri1;:e
fopwri1;:w
fopwri1;::
fopwri1;:\n
#print newline
fopwri1;:\n
#print
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#print newline
fopwri1;:\n
#goto (extra code stores away return address.)
setreg1;>goto--jumper-86
s1push1
goto;>draw2--label
null;;goto--jumper-86
#print newline
fopwri1;:\n
#print
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#print newline
fopwri1;:\n
#print
fopwri1;:w
fopwri1;:,
fopwri1;:a
fopwri1;:,
fopwri1;:s
fopwri1;:,
fopwri1;:d
fopwri1;:=
fopwri1;:m
fopwri1;:o
fopwri1;:v
fopwri1;:e
fopwri1;:,
fopwri1;:\s
fopwri1;:q
fopwri1;:=
fopwri1;:q
fopwri1;:u
fopwri1;:i
fopwri1;:t
fopwri1;:,
fopwri1;:\s
fopwri1;:m
fopwri1;:=
fopwri1;:m
fopwri1;:a
fopwri1;:p
fopwri1;:,
fopwri1;:\s
fopwri1;:o
fopwri1;:=
fopwri1;:a
fopwri1;:b
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:g
fopwri1;:a
fopwri1;:m
fopwri1;:e
fopwri1;:\n
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-91
gotoif;>keyprompt--loop-91
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>keybuff
#conditional subroutine goto
dataread1;>keybuff
dataread2;>upk
gotoif;>goto--branch-93
goto;>goto--jumper-93
setreg1;>goto--jumper-93;goto--branch-93
s1push1
goto;>doup--label
null;;goto--jumper-93
#conditional subroutine goto
dataread1;>keybuff
dataread2;>dnk
gotoif;>goto--branch-94
goto;>goto--jumper-94
setreg1;>goto--jumper-94;goto--branch-94
s1push1
goto;>dodown--label
null;;goto--jumper-94
#conditional subroutine goto
dataread1;>keybuff
dataread2;>lk
gotoif;>goto--branch-95
goto;>goto--jumper-95
setreg1;>goto--jumper-95;goto--branch-95
s1push1
goto;>doleft--label
null;;goto--jumper-95
#conditional subroutine goto
dataread1;>keybuff
dataread2;>rk
gotoif;>goto--branch-96
goto;>goto--jumper-96
setreg1;>goto--jumper-96;goto--branch-96
s1push1
goto;>doright--label
null;;goto--jumper-96
#conditional subroutine goto
dataread1;>keybuff
dataread2;>mapk
gotoif;>goto--branch-97
goto;>goto--jumper-97
setreg1;>goto--jumper-97;goto--branch-97
s1push1
goto;>drawfull--label
null;;goto--jumper-97
#conditional subroutine goto
dataread1;>keybuff
dataread2;>aboutk
gotoif;>goto--branch-98
goto;>goto--jumper-98
setreg1;>goto--jumper-98;goto--branch-98
s1push1
goto;>about--label
null;;goto--jumper-98
#conditional goto
dataread1;>keybuff
dataread2;>quitk
gotoif;>goto--branch-99
goto;>goto--jumper-99
setreg1;>goto--jumper-99;goto--branch-99
goto;>quit--label
null;;goto--jumper-99
#goto 
goto;>main--label
#label
null;;quit--label
#print
fopwri1;:G
fopwri1;:A
fopwri1;:M
fopwri1;:E
fopwri1;:\s
fopwri1;:O
fopwri1;:V
fopwri1;:E
fopwri1;:R
fopwri1;:.
fopwri1;:\n
#print
fopwri1;:p
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:k
fopwri1;:e
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:i
fopwri1;:t
fopwri1;:.
fopwri1;:\n
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-106
gotoif;>keyprompt--loop-106
#stop (shutdown vm)
stop
#label
null;;doup--label
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newy
#copy variables 
dataread1;>px
datawrite1;>newx
#goto (extra code stores away return address.)
setreg1;>goto--jumper-113
s1push1
goto;>check--label
null;;goto--jumper-113
#return from subroutine.
s1pop1
gotoreg1
#label
null;;dodown--label
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newy
#copy variables 
dataread1;>px
datawrite1;>newx
#goto (extra code stores away return address.)
setreg1;>goto--jumper-120
s1push1
goto;>check--label
null;;goto--jumper-120
#return from subroutine.
s1pop1
gotoreg1
#label
null;;doleft--label
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newx
#copy variables 
dataread1;>py
datawrite1;>newy
#goto (extra code stores away return address.)
setreg1;>goto--jumper-127
s1push1
goto;>check--label
null;;goto--jumper-127
#return from subroutine.
s1pop1
gotoreg1
#label
null;;doright--label
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>newx
#copy variables 
dataread1;>py
datawrite1;>newy
#goto (extra code stores away return address.)
setreg1;>goto--jumper-134
s1push1
goto;>check--label
null;;goto--jumper-134
#return from subroutine.
s1pop1
gotoreg1
#label
null;;check--label
#copy variables 
dataread1;>newx
datawrite1;>lookx
#copy variables 
dataread1;>newy
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-141
s1push1
goto;>lookup--label
null;;goto--jumper-141
#conditional goto
dataread1;>lookresult
dataread2;>floor
gotoif;>goto--branch-142
goto;>goto--jumper-142
setreg1;>goto--jumper-142;goto--branch-142
goto;>check_pass--label
null;;goto--jumper-142
#conditional goto
dataread1;>lookresult
dataread2;>win
gotoif;>goto--branch-143
goto;>goto--jumper-143
setreg1;>goto--jumper-143;goto--branch-143
goto;>winner--label
null;;goto--jumper-143
#print
fopwri1;:I
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:'
fopwri1;:t
fopwri1;:\s
fopwri1;:g
fopwri1;:o
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:y
fopwri1;:.
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;check_pass--label
#copy variables 
dataread1;>newx
datawrite1;>px
#copy variables 
dataread1;>newy
datawrite1;>py
#return from subroutine.
s1pop1
gotoreg1
#label
null;;winner--label
#print
fopwri1;:Y
fopwri1;:O
fopwri1;:U
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:N
fopwri1;:!
fopwri1;:!
fopwri1;:!
fopwri1;:\n
#print
fopwri1;:P
fopwri1;:r
fopwri1;:e
fopwri1;:s
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:k
fopwri1;:e
fopwri1;:y
fopwri1;:\s
fopwri1;:t
fopwri1;:o
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:i
fopwri1;:t
fopwri1;:\n
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-154
gotoif;>keyprompt--loop-154
#stop (shutdown vm)
stop
#label
null;;draw2--label
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-163
s1push1
goto;>lookup--label
null;;goto--jumper-163
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#copy variables 
dataread1;>px
datawrite1;>lookx
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-169
s1push1
goto;>lookup--label
null;;goto--jumper-169
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#subtract (2op math)
dataread1;>py
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-176
s1push1
goto;>lookup--label
null;;goto--jumper-176
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:\s
fopwri1;:\v
#print newline
fopwri1;:\n
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#copy variables 
dataread1;>py
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-184
s1push1
goto;>lookup--label
null;;goto--jumper-184
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:@
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#copy variables 
dataread1;>py
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-192
s1push1
goto;>lookup--label
null;;goto--jumper-192
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:\s
fopwri1;:\v
#print newline
fopwri1;:\n
#subtract (2op math)
dataread1;>px
dataread2;>add1
sub
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-202
s1push1
goto;>lookup--label
null;;goto--jumper-202
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#copy variables 
dataread1;>px
datawrite1;>lookx
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-209
s1push1
goto;>lookup--label
null;;goto--jumper-209
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#add (2op math)
dataread1;>px
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookx
#add (2op math)
dataread1;>py
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-217
s1push1
goto;>lookup--label
null;;goto--jumper-217
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#print
fopwri1;:\s
fopwri1;:\v
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#label
null;;drawfull--label
#print
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:'
fopwri1;:@
fopwri1;:'
fopwri1;:.
fopwri1;:\s
fopwri1;:e
fopwri1;:x
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:'
fopwri1;:=
fopwri1;:'
fopwri1;:.
fopwri1;:\n
#get(1) (may be used with set, or asm code)
dataread1;>set0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawx
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawy
#label
null;;draw_yl--label
#label
null;;draw_xl--label
#conditional goto
dataread1;>drawy
dataread2;>py
gotoif;>goto--branch-234
goto;>goto--jumper-234
setreg1;>goto--jumper-234;goto--branch-234
goto;>draw_poscheck--label
null;;goto--jumper-234
#goto 
goto;>draw_skippos--label
#label
null;;draw_poscheck--label
#conditional subroutine goto
dataread1;>drawx
dataread2;>px
gotoif;>goto--branch-239
goto;>goto--jumper-239
setreg1;>goto--jumper-239;goto--branch-239
s1push1
goto;>draw_pointget--label
null;;goto--jumper-239
#conditional goto
dataread1;>drawx
dataread2;>px
gotoif;>goto--branch-240
goto;>goto--jumper-240
setreg1;>goto--jumper-240;goto--branch-240
goto;>draw_skiplook--label
null;;goto--jumper-240
#label
null;;draw_skippos--label
#copy variables 
dataread1;>drawx
datawrite1;>lookx
#copy variables 
dataread1;>drawy
datawrite1;>looky
#goto (extra code stores away return address.)
setreg1;>goto--jumper-245
s1push1
goto;>lookup--label
null;;goto--jumper-245
#Dump (character)
dataread1;>lookresult
iowrite1;>io.ttywr
#label
null;;draw_skiplook--label
#add (2op math)
dataread1;>drawx
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawx
#conditional goto
dataread1;>drawx
dataread2;>mazewide
gotoif;>goto--branch-252
goto;>goto--jumper-252
setreg1;>goto--jumper-252;goto--branch-252
goto;>draw_xret--label
null;;goto--jumper-252
#goto 
goto;>draw_xl--label
#label
null;;draw_xret--label
#get(1) (may be used with set, or asm code)
dataread1;>set0
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawx
#print newline
fopwri1;:\n
#add (2op math)
dataread1;>drawy
dataread2;>add1
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>drawy
#conditional return
dataread1;>drawy
dataread2;>mazetall
gotoif;>goto--branch-261
goto;>goto--jumper-261
s1pop1;;goto--branch-261
gotoreg1
null;;goto--jumper-261
#goto 
goto;>draw_yl--label
#label
null;;draw_pointget--label
#print
fopwri1;:@
#return from subroutine.
s1pop1
gotoreg1
#label
null;;lookup--label
#multiply (2op math)
dataread1;>mazewide
dataread2;>looky
mul
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>ymul
#add (2op math)
dataread1;>ymul
dataread2;>lookx
add
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookpos
#add (2op math)
dataread1;>lookpos
dataread2;>mazememtop
add
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #277
datawrite1;>ASMKEEP#SSTNPL Source Line: '277' 
#___RAW ASSEMBLY CODE___
#_______NOTE: this corresponds to SSTNPL source line #278
dataread1;;ASMKEEP#SSTNPL Source Line: '278' 
#set(1) (used after 2-op math, asm code, or get)
datawrite1;>lookresult
#return from subroutine.
s1pop1
gotoreg1
#label
null;;about--label
#print
fopwri1;:-
fopwri1;:-
fopwri1;:A
fopwri1;:B
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:-
fopwri1;:-
fopwri1;:\n
#print
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:\s
fopwri1;:v
fopwri1;:0
fopwri1;:.
fopwri1;:1
fopwri1;:\n
#print
fopwri1;:P
fopwri1;:a
fopwri1;:r
fopwri1;:t
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:S
fopwri1;:B
fopwri1;:T
fopwri1;:C
fopwri1;:V
fopwri1;:M
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:2
fopwri1;:-
fopwri1;:9
fopwri1;:\n
#print
fopwri1;:\n
#print
fopwri1;:C
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:r
fopwri1;:i
fopwri1;:g
fopwri1;:h
fopwri1;:t
fopwri1;:\s
fopwri1;:(
fopwri1;:c
fopwri1;:)
fopwri1;:\s
fopwri1;:2
fopwri1;:0
fopwri1;:1
fopwri1;:8
fopwri1;:\s
fopwri1;:T
fopwri1;:h
fopwri1;:o
fopwri1;:m
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:L
fopwri1;:e
fopwri1;:a
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:\s
fopwri1;:&
fopwri1;:\s
fopwri1;:C
fopwri1;:o
fopwri1;:n
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:o
fopwri1;:r
fopwri1;:s
fopwri1;:\n
#print
fopwri1;:\n
#print
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:f
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:s
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;::
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:c
fopwri1;:a
fopwri1;:n
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:d
fopwri1;:/
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:d
fopwri1;:i
fopwri1;:f
fopwri1;:y
fopwri1;:\n
#print
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:m
fopwri1;:s
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:a
fopwri1;:s
fopwri1;:\s
fopwri1;:p
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:s
fopwri1;:h
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:b
fopwri1;:y
fopwri1;:\n
#print
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:r
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:S
fopwri1;:o
fopwri1;:f
fopwri1;:t
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:F
fopwri1;:o
fopwri1;:u
fopwri1;:n
fopwri1;:d
fopwri1;:a
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:,
fopwri1;:\s
fopwri1;:e
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:\s
fopwri1;:3
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:,
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\n
#print
fopwri1;:(
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:y
fopwri1;:o
fopwri1;:u
fopwri1;:r
fopwri1;:\s
fopwri1;:o
fopwri1;:p
fopwri1;:t
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:)
fopwri1;:\s
fopwri1;:a
fopwri1;:n
fopwri1;:y
fopwri1;:\s
fopwri1;:l
fopwri1;:a
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:\s
fopwri1;:v
fopwri1;:e
fopwri1;:r
fopwri1;:s
fopwri1;:i
fopwri1;:o
fopwri1;:n
fopwri1;:.
fopwri1;:\n
#print
fopwri1;:\n
#print
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:s
fopwri1;:\s
fopwri1;:d
fopwri1;:i
fopwri1;:s
fopwri1;:t
fopwri1;:r
fopwri1;:i
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:i
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:h
fopwri1;:o
fopwri1;:p
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:a
fopwri1;:t
fopwri1;:\s
fopwri1;:i
fopwri1;:t
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:l
fopwri1;:l
fopwri1;:\s
fopwri1;:b
fopwri1;:e
fopwri1;:\s
fopwri1;:u
fopwri1;:s
fopwri1;:e
fopwri1;:f
fopwri1;:u
fopwri1;:l
fopwri1;:,
fopwri1;:\n
#print
fopwri1;:b
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:W
fopwri1;:I
fopwri1;:T
fopwri1;:H
fopwri1;:O
fopwri1;:U
fopwri1;:T
fopwri1;:\s
fopwri1;:A
fopwri1;:N
fopwri1;:Y
fopwri1;:\s
fopwri1;:W
fopwri1;:A
fopwri1;:R
fopwri1;:R
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:Y
fopwri1;:\c
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:t
fopwri1;:\s
fopwri1;:e
fopwri1;:v
fopwri1;:e
fopwri1;:n
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:i
fopwri1;:m
fopwri1;:p
fopwri1;:l
fopwri1;:i
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:w
fopwri1;:a
fopwri1;:r
fopwri1;:r
fopwri1;:a
fopwri1;:n
fopwri1;:t
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\n
#print
fopwri1;:M
fopwri1;:E
fopwri1;:R
fopwri1;:C
fopwri1;:H
fopwri1;:A
fopwri1;:N
fopwri1;:T
fopwri1;:A
fopwri1;:B
fopwri1;:I
fopwri1;:L
fopwri1;:I
fopwri1;:T
fopwri1;:Y
fopwri1;:\s
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:F
fopwri1;:I
fopwri1;:T
fopwri1;:N
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:F
fopwri1;:O
fopwri1;:R
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:P
fopwri1;:A
fopwri1;:R
fopwri1;:T
fopwri1;:I
fopwri1;:C
fopwri1;:U
fopwri1;:L
fopwri1;:A
fopwri1;:R
fopwri1;:\s
fopwri1;:P
fopwri1;:U
fopwri1;:R
fopwri1;:P
fopwri1;:O
fopwri1;:S
fopwri1;:E
fopwri1;:.
fopwri1;:\s
fopwri1;:S
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\n
#print
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\s
fopwri1;:f
fopwri1;:o
fopwri1;:r
fopwri1;:\s
fopwri1;:m
fopwri1;:o
fopwri1;:r
fopwri1;:e
fopwri1;:\s
fopwri1;:d
fopwri1;:e
fopwri1;:t
fopwri1;:a
fopwri1;:i
fopwri1;:l
fopwri1;:s
fopwri1;:.
fopwri1;:\n
#print
fopwri1;:\n
#print
fopwri1;:Y
fopwri1;:o
fopwri1;:u
fopwri1;:\s
fopwri1;:s
fopwri1;:h
fopwri1;:o
fopwri1;:u
fopwri1;:l
fopwri1;:d
fopwri1;:\s
fopwri1;:h
fopwri1;:a
fopwri1;:v
fopwri1;:e
fopwri1;:\s
fopwri1;:r
fopwri1;:e
fopwri1;:c
fopwri1;:e
fopwri1;:i
fopwri1;:v
fopwri1;:e
fopwri1;:d
fopwri1;:\s
fopwri1;:a
fopwri1;:\s
fopwri1;:c
fopwri1;:o
fopwri1;:p
fopwri1;:y
fopwri1;:\s
fopwri1;:o
fopwri1;:f
fopwri1;:\s
fopwri1;:t
fopwri1;:h
fopwri1;:e
fopwri1;:\s
fopwri1;:G
fopwri1;:N
fopwri1;:U
fopwri1;:\s
fopwri1;:G
fopwri1;:e
fopwri1;:n
fopwri1;:e
fopwri1;:r
fopwri1;:a
fopwri1;:l
fopwri1;:\s
fopwri1;:P
fopwri1;:u
fopwri1;:b
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:\s
fopwri1;:L
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:\n
#print
fopwri1;:a
fopwri1;:l
fopwri1;:o
fopwri1;:n
fopwri1;:g
fopwri1;:\s
fopwri1;:w
fopwri1;:i
fopwri1;:t
fopwri1;:h
fopwri1;:\s
fopwri1;:t
fopwri1;:e
fopwri1;:r
fopwri1;:n
fopwri1;:a
fopwri1;:r
fopwri1;:y
fopwri1;:\s
fopwri1;:m
fopwri1;:a
fopwri1;:z
fopwri1;:e
fopwri1;:\s
fopwri1;:e
fopwri1;:n
fopwri1;:g
fopwri1;:i
fopwri1;:n
fopwri1;:e
fopwri1;:.
fopwri1;:\s
fopwri1;:I
fopwri1;:f
fopwri1;:\s
fopwri1;:n
fopwri1;:o
fopwri1;:t
fopwri1;:,
fopwri1;:\s
fopwri1;:s
fopwri1;:e
fopwri1;:e
fopwri1;:\s
fopwri1;:<
fopwri1;:h
fopwri1;:t
fopwri1;:t
fopwri1;:p
fopwri1;::
fopwri1;:/
fopwri1;:/
fopwri1;:w
fopwri1;:w
fopwri1;:w
fopwri1;:.
fopwri1;:g
fopwri1;:n
fopwri1;:u
fopwri1;:.
fopwri1;:o
fopwri1;:r
fopwri1;:g
fopwri1;:/
fopwri1;:l
fopwri1;:i
fopwri1;:c
fopwri1;:e
fopwri1;:n
fopwri1;:s
fopwri1;:e
fopwri1;:s
fopwri1;:/
fopwri1;:>
fopwri1;:\n
#print
fopwri1;:\n
#print
fopwri1;:P
fopwri1;:R
fopwri1;:E
fopwri1;:S
fopwri1;:S
fopwri1;:\s
fopwri1;:A
fopwri1;:\s
fopwri1;:K
fopwri1;:E
fopwri1;:Y
fopwri1;:\s
fopwri1;:T
fopwri1;:O
fopwri1;:\s
fopwri1;:R
fopwri1;:E
fopwri1;:T
fopwri1;:U
fopwri1;:R
fopwri1;:N
fopwri1;:\s
fopwri1;:T
fopwri1;:O
fopwri1;:\s
fopwri1;:G
fopwri1;:A
fopwri1;:M
fopwri1;:E
fopwri1;:\n
#print
fopwri1;:>
#keprompt: prompt for single keypress, continue only when keypress is received.
setreg2;0
iowrite1;>io.ttyrd
ioread1;>io.ttyrd;keyprompt--loop-304
gotoif;>keyprompt--loop-304
#print newline
fopwri1;:\n
#return from subroutine.
s1pop1
gotoreg1
#END OF FILE
